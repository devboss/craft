webpackJsonp([0],[
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(116)
var ieee754 = __webpack_require__(159)
var isArray = __webpack_require__(127)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 1 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 2 */
/***/ (function(module, exports) {

// this module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle

module.exports = function normalizeComponent (
  rawScriptExports,
  compiledTemplate,
  scopeId,
  cssModules
) {
  var esModule
  var scriptExports = rawScriptExports = rawScriptExports || {}

  // ES6 modules interop
  var type = typeof rawScriptExports.default
  if (type === 'object' || type === 'function') {
    esModule = rawScriptExports
    scriptExports = rawScriptExports.default
  }

  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (compiledTemplate) {
    options.render = compiledTemplate.render
    options.staticRenderFns = compiledTemplate.staticRenderFns
  }

  // scopedId
  if (scopeId) {
    options._scopeId = scopeId
  }

  // inject cssModules
  if (cssModules) {
    var computed = Object.create(options.computed || null)
    Object.keys(cssModules).forEach(function (key) {
      var module = cssModules[key]
      computed[key] = function () { return module }
    })
    options.computed = computed
  }

  return {
    esModule: esModule,
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = __webpack_require__(0).Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)(module)))

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = exports;

elliptic.version = __webpack_require__(152).version;
elliptic.utils = __webpack_require__(151);
elliptic.rand = __webpack_require__(62);
elliptic.curve = __webpack_require__(33);
elliptic.curves = __webpack_require__(143);

// Protocols
elliptic.ec = __webpack_require__(144);
elliptic.eddsa = __webpack_require__(147);


/***/ }),
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var hash = exports;

hash.utils = __webpack_require__(157);
hash.common = __webpack_require__(153);
hash.sha = __webpack_require__(156);
hash.ripemd = __webpack_require__(155);
hash.hmac = __webpack_require__(154);

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;


/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var processNextTick = __webpack_require__(48);
/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__(24);
util.inherits = __webpack_require__(1);
/*</replacement>*/

var Readable = __webpack_require__(81);
var Writable = __webpack_require__(49);

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var Transform = __webpack_require__(51).Transform
var inherits = __webpack_require__(1)
var StringDecoder = __webpack_require__(52).StringDecoder
module.exports = CipherBase
inherits(CipherBase, Transform)
function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  this._decoder = null
  this._encoding = null
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc)
  }
  var outData = this._update(data)
  if (this.hashMode) {
    return this
  }
  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }
  return outData
}

CipherBase.prototype.setAutoPadding = function () {}

CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this._final())
  } catch (e) {
    err = e
  } finally {
    done(err)
  }
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this._final() || new Buffer('')
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }
  if (this._encoding !== enc) {
    throw new Error('can\'t switch encodings')
  }
  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }
  return out
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var inherits = __webpack_require__(1)
var md5 = __webpack_require__(73)
var rmd160 = __webpack_require__(186)
var sha = __webpack_require__(187)

var Base = __webpack_require__(12)

function HashNoConstructor(hash) {
  Base.call(this, 'digest')

  this._hash = hash
  this.buffers = []
}

inherits(HashNoConstructor, Base)

HashNoConstructor.prototype._update = function (data) {
  this.buffers.push(data)
}

HashNoConstructor.prototype._final = function () {
  var buf = Buffer.concat(this.buffers)
  var r = this._hash(buf)
  this.buffers = null

  return r
}

function Hash(hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if ('md5' === alg) return new HashNoConstructor(md5)
  if ('rmd160' === alg || 'ripemd160' === alg) return new HashNoConstructor(rmd160)

  return new Hash(sha(alg))
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = new Buffer(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
  this._s = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = new Buffer(data, enc)
  }

  var l = this._len += data.length
  var s = this._s || 0
  var f = 0
  var buffer = this._block

  while (s < l) {
    var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
    var ch = (t - f)

    for (var i = 0; i < ch; i++) {
      buffer[(s % this._blockSize) + i] = data[i + f]
    }

    s += ch
    f += ch

    if ((s % this._blockSize) === 0) {
      this._update(buffer)
    }
  }
  this._s = s

  return this
}

Hash.prototype.digest = function (enc) {
  // Suppose the length of the message M, in bits, is l
  var l = this._len * 8

  // Append the bit 1 to the end of the message
  this._block[this._len % this._blockSize] = 0x80

  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
  this._block.fill(0, this._len % this._blockSize + 1)

  if (l % (this._blockSize * 8) >= this._finalSize * 8) {
    this._update(this._block)
    this._block.fill(0)
  }

  // to this append the block which is equal to the number l written in binary
  // TODO: handle case where l is > Math.pow(2, 29)
  this._block.writeInt32BE(l, this._blockSize - 4)

  var hash = this._update(this._block) || this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 15 */,
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vuex__ = __webpack_require__(28);


/* harmony default export */ __webpack_exports__["a"] = ({
       computed: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_vuex__["mapGetters"])({
              days: 'availability',
              promptForLocation: 'promptForLocation',
              promptForSeason: 'promptForSeason',
              locations: 'locations',
              booking: 'getBooking',
              party: 'party',
              selectedDay: 'day',
              selectedSlot: 'slot',
              extras: 'extras',
              availableExtras: 'availableExtras',
              availableInsurance: 'availableInsurance',
              slots: 'slotAvailability',
              location: 'location',
              season: 'season',
              referrers: 'referrers',
              selectedReferrer: 'referrer',
              premiumSearchEnabled: 'premiumSearchEnabled',
              premiumSearch: 'premiumSearch'
       })
});

/***/ }),
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

var asn1 = exports;

asn1.bignum = __webpack_require__(3);

asn1.define = __webpack_require__(99).define;
asn1.base = __webpack_require__(21);
asn1.constants = __webpack_require__(58);
asn1.decoders = __webpack_require__(103);
asn1.encoders = __webpack_require__(105);


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

var base = exports;

base.Reporter = __webpack_require__(101).Reporter;
base.DecoderBuffer = __webpack_require__(57).DecoderBuffer;
base.EncoderBuffer = __webpack_require__(57).EncoderBuffer;
base.Node = __webpack_require__(100);


/***/ }),
/* 22 */,
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 25 */,
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, Buffer, process) {

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}

var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > 65536) throw new Error('requested too many random bytes')
  // in case browserify  isn't using the Uint8Array version
  var rawBytes = new global.Uint8Array(size)

  // This will not work in older browsers.
  // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
  if (size > 0) {  // getRandomValues fails on IE if size == 0
    crypto.getRandomValues(rawBytes)
  }
  // phantomjs doesn't like a buffer being passed here
  var bytes = new Buffer(rawBytes.buffer)

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7), __webpack_require__(0).Buffer, __webpack_require__(15)))

/***/ }),
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec

// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function scrub_vec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
  return false
}

function Global () {
  this.SBOX = []
  this.INV_SBOX = []
  this.SUB_MIX = [[], [], [], []]
  this.INV_SUB_MIX = [[], [], [], []]
  this.init()
  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
}

Global.prototype.init = function () {
  var d, i, sx, t, x, x2, x4, x8, xi, _i
  d = (function () {
    var _i, _results
    _results = []
    for (i = _i = 0; _i < 256; i = ++_i) {
      if (i < 128) {
        _results.push(i << 1)
      } else {
        _results.push((i << 1) ^ 0x11b)
      }
    }
    return _results
  })()
  x = 0
  xi = 0
  for (i = _i = 0; _i < 256; i = ++_i) {
    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    this.SBOX[x] = sx
    this.INV_SBOX[sx] = x
    x2 = d[x]
    x4 = d[x2]
    x8 = d[x4]
    t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    this.SUB_MIX[3][x] = t
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    this.INV_SUB_MIX[3][sx] = t
    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }
  return true
}

var G = new Global()

AES.blockSize = 4 * 4

AES.prototype.blockSize = AES.blockSize

AES.keySize = 256 / 8

AES.prototype.keySize = AES.keySize

function bufferToArray (buf) {
  var len = buf.length / 4
  var out = new Array(len)
  var i = -1
  while (++i < len) {
    out[i] = buf.readUInt32BE(i * 4)
  }
  return out
}
function AES (key) {
  this._key = bufferToArray(key)
  this._doReset()
}

AES.prototype._doReset = function () {
  var invKsRow, keySize, keyWords, ksRow, ksRows, t
  keyWords = this._key
  keySize = keyWords.length
  this._nRounds = keySize + 6
  ksRows = (this._nRounds + 1) * 4
  this._keySchedule = []
  for (ksRow = 0; ksRow < ksRows; ksRow++) {
    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t)
  }
  this._invKeySchedule = []
  for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
    ksRow = ksRows - invKsRow
    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)]
    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]]
  }
  return true
}

AES.prototype.encryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var temp = [M[3], M[1]]
  M[1] = temp[0]
  M[3] = temp[1]
  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrub_vec(this._keySchedule)
  scrub_vec(this._invKeySchedule)
  scrub_vec(this._key)
}

AES.prototype._doCryptBlock = function (M, keySchedule, SUB_MIX, SBOX) {
  var ksRow, s0, s1, s2, s3, t0, t1, t2, t3

  s0 = M[0] ^ keySchedule[0]
  s1 = M[1] ^ keySchedule[1]
  s2 = M[2] ^ keySchedule[2]
  s3 = M[3] ^ keySchedule[3]
  ksRow = 4
  for (var round = 1; round < this._nRounds; round++) {
    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }
  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  return [
    fixup_uint32(t0),
    fixup_uint32(t1),
    fixup_uint32(t2),
    fixup_uint32(t3)
  ]
}

exports.AES = AES

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 31 */
/***/ (function(module, exports) {

exports['aes-128-ecb'] = {
  cipher: 'AES',
  key: 128,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-192-ecb'] = {
  cipher: 'AES',
  key: 192,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-256-ecb'] = {
  cipher: 'AES',
  key: 256,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-128-cbc'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-192-cbc'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-256-cbc'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes128'] = exports['aes-128-cbc']
exports['aes192'] = exports['aes-192-cbc']
exports['aes256'] = exports['aes-256-cbc']
exports['aes-128-cfb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-192-cfb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-256-cfb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-128-cfb8'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-192-cfb8'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-256-cfb8'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-128-cfb1'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-192-cfb1'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-256-cfb1'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-128-ofb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-192-ofb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-256-ofb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-128-ctr'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-192-ctr'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-256-ctr'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-128-gcm'] = {
  cipher: 'AES',
  key: 128,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-192-gcm'] = {
  cipher: 'AES',
  key: 192,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-256-gcm'] = {
  cipher: 'AES',
  key: 256,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(23)

function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}

function getBlock (self) {
  var out = self._cipher.encryptBlock(self._prev)
  incr32(self._prev)
  return out
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = exports;

curve.base = __webpack_require__(139);
curve.short = __webpack_require__(142);
curve.mont = __webpack_require__(141);
curve.edwards = __webpack_require__(140);


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var md5 = __webpack_require__(73)
module.exports = EVP_BytesToKey
function EVP_BytesToKey (password, salt, keyLen, ivLen) {
  if (!Buffer.isBuffer(password)) {
    password = new Buffer(password, 'binary')
  }
  if (salt && !Buffer.isBuffer(salt)) {
    salt = new Buffer(salt, 'binary')
  }
  keyLen = keyLen / 8
  ivLen = ivLen || 0
  var ki = 0
  var ii = 0
  var key = new Buffer(keyLen)
  var iv = new Buffer(ivLen)
  var addmd = 0
  var md_buf
  var i
  var bufs = []
  while (true) {
    if (addmd++ > 0) {
      bufs.push(md_buf)
    }
    bufs.push(password)
    if (salt) {
      bufs.push(salt)
    }
    md_buf = md5(Buffer.concat(bufs))
    bufs = []
    i = 0
    if (keyLen > 0) {
      while (true) {
        if (keyLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        key[ki++] = md_buf[i]
        keyLen--
        i++
      }
    }
    if (ivLen > 0 && i !== md_buf.length) {
      while (true) {
        if (ivLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        iv[ii++] = md_buf[i]
        ivLen--
        i++
      }
    }
    if (keyLen === 0 && ivLen === 0) {
      break
    }
  }
  for (i = 0; i < md_buf.length; i++) {
    md_buf[i] = 0
  }
  return {
    key: key,
    iv: iv
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var asn1 = __webpack_require__(163)
var aesid = __webpack_require__(162)
var fixProc = __webpack_require__(165)
var ciphers = __webpack_require__(42)
var compat = __webpack_require__(77)
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen)
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 36 */,
/* 37 */,
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);


var api = __WEBPACK_IMPORTED_MODULE_0_axios___default.a.create({
    baseURL: window.baseApiUrl
});

/* harmony default export */ __webpack_exports__["a"] = (api);

/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vuex__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__modules_authentication__ = __webpack_require__(111);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__modules_booking__ = __webpack_require__(112);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__modules_bookings__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__modules_my_details__ = __webpack_require__(115);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__modules_errors__ = __webpack_require__(114);








__WEBPACK_IMPORTED_MODULE_0_vue___default.a.use(__WEBPACK_IMPORTED_MODULE_1_vuex__["default"]);

var state = {};

var actions = {};

var mutations = {};

var getters = {};

/* harmony default export */ __webpack_exports__["a"] = (new __WEBPACK_IMPORTED_MODULE_1_vuex__["default"].Store({
    state: state,
    getters: getters,
    actions: actions,
    mutations: mutations,
    modules: {
        auth: __WEBPACK_IMPORTED_MODULE_2__modules_authentication__["a" /* default */],
        myDetails: __WEBPACK_IMPORTED_MODULE_5__modules_my_details__["a" /* default */],
        booking: __WEBPACK_IMPORTED_MODULE_3__modules_booking__["a" /* default */],
        bookings: __WEBPACK_IMPORTED_MODULE_4__modules_bookings__["a" /* default */],
        errors: __WEBPACK_IMPORTED_MODULE_6__modules_errors__["a" /* default */]
    }
}));

/***/ }),
/* 40 */,
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(221),
  /* template */
  __webpack_require__(271),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/BookingSummary.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] BookingSummary.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-f72aaa4c", Component.options)
  } else {
    hotAPI.reload("data-v-f72aaa4c", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

var ciphers = __webpack_require__(118)
exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
var deciphers = __webpack_require__(117)
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
var modes = __webpack_require__(31)
function getCiphers () {
  return Object.keys(modes)
}
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var bn = __webpack_require__(3);
var randomBytes = __webpack_require__(26);
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var buffer = __webpack_require__(0);
var Buffer = buffer.Buffer;
var SlowBuffer = buffer.SlowBuffer;
var MAX_LEN = buffer.kMaxLength || 2147483647;
exports.alloc = function alloc(size, fill, encoding) {
  if (typeof Buffer.alloc === 'function') {
    return Buffer.alloc(size, fill, encoding);
  }
  if (typeof encoding === 'number') {
    throw new TypeError('encoding must not be number');
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size > MAX_LEN) {
    throw new RangeError('size is too large');
  }
  var enc = encoding;
  var _fill = fill;
  if (_fill === undefined) {
    enc = undefined;
    _fill = 0;
  }
  var buf = new Buffer(size);
  if (typeof _fill === 'string') {
    var fillBuf = new Buffer(_fill, enc);
    var flen = fillBuf.length;
    var i = -1;
    while (++i < size) {
      buf[i] = fillBuf[i % flen];
    }
  } else {
    buf.fill(_fill);
  }
  return buf;
}
exports.allocUnsafe = function allocUnsafe(size) {
  if (typeof Buffer.allocUnsafe === 'function') {
    return Buffer.allocUnsafe(size);
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size > MAX_LEN) {
    throw new RangeError('size is too large');
  }
  return new Buffer(size);
}
exports.from = function from(value, encodingOrOffset, length) {
  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
    return Buffer.from(value, encodingOrOffset, length);
  }
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof value === 'string') {
    return new Buffer(value, encodingOrOffset);
  }
  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    var offset = encodingOrOffset;
    if (arguments.length === 1) {
      return new Buffer(value);
    }
    if (typeof offset === 'undefined') {
      offset = 0;
    }
    var len = length;
    if (typeof len === 'undefined') {
      len = value.byteLength - offset;
    }
    if (offset >= value.byteLength) {
      throw new RangeError('\'offset\' is out of bounds');
    }
    if (len > value.byteLength - offset) {
      throw new RangeError('\'length\' is out of bounds');
    }
    return new Buffer(value.slice(offset, offset + len));
  }
  if (Buffer.isBuffer(value)) {
    var out = new Buffer(value.length);
    value.copy(out, 0, 0, value.length);
    return out;
  }
  if (value) {
    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
      return new Buffer(value);
    }
    if (value.type === 'Buffer' && Array.isArray(value.data)) {
      return new Buffer(value.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
}
exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
  if (typeof Buffer.allocUnsafeSlow === 'function') {
    return Buffer.allocUnsafeSlow(size);
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size >= MAX_LEN) {
    throw new RangeError('size is too large');
  }
  return new SlowBuffer(size);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var createHash = __webpack_require__(13);
var inherits = __webpack_require__(1)

var Transform = __webpack_require__(51).Transform

var ZEROS = new Buffer(128)
ZEROS.fill(0)

function Hmac(alg, key) {
  Transform.call(this)
  alg = alg.toLowerCase()
  if (typeof key === 'string') {
    key = new Buffer(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = createHash(alg).update(key).digest()

  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = new Buffer(blocksize)
  var opad = this._opad = new Buffer(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = createHash(alg).update(ipad)
}

inherits(Hmac, Transform)

Hmac.prototype.update = function (data, enc) {
  this._hash.update(data, enc)

  return this
}

Hmac.prototype._transform = function (data, _, next) {
  this._hash.update(data)

  next()
}

Hmac.prototype._flush = function (next) {
  this.push(this.digest())

  next()
}

Hmac.prototype.digest = function (enc) {
  var h = this._hash.digest()

  return createHash(this._alg).update(this._opad).update(h).digest(enc)
}

module.exports = function createHmac(alg, key) {
  return new Hmac(alg, key)
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.utils = __webpack_require__(135);
exports.Cipher = __webpack_require__(132);
exports.DES = __webpack_require__(133);
exports.CBC = __webpack_require__(131);
exports.EDE = __webpack_require__(134);


/***/ }),
/* 47 */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)))

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



module.exports = Writable;

/*<replacement>*/
var processNextTick = __webpack_require__(48);
/*</replacement>*/

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = __webpack_require__(24);
util.inherits = __webpack_require__(1);
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(192)
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(83);
/*</replacement>*/

var Buffer = __webpack_require__(0).Buffer;
/*<replacement>*/
var bufferShim = __webpack_require__(44);
/*</replacement>*/

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(11);

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(11);

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = Buffer.isBuffer(chunk);

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = bufferShim.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    chunk = decodeChunk(state, chunk, encoding);
    if (Buffer.isBuffer(chunk)) encoding = 'buffer';
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) processNextTick(cb, er);else cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    while (entry) {
      buffer[count] = entry;
      entry = entry.next;
      count += 1;
    }

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function (err) {
    var entry = _this.entry;
    _this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = _this;
    } else {
      state.corkedRequestsFree = _this;
    }
  };
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15), __webpack_require__(213).setImmediate))

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(81);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(49);
exports.Duplex = __webpack_require__(11);
exports.Transform = __webpack_require__(82);
exports.PassThrough = __webpack_require__(179);


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = __webpack_require__(47).EventEmitter;
var inherits = __webpack_require__(1);

inherits(Stream, EE);
Stream.Readable = __webpack_require__(50);
Stream.Writable = __webpack_require__(184);
Stream.Duplex = __webpack_require__(178);
Stream.Transform = __webpack_require__(183);
Stream.PassThrough = __webpack_require__(182);

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = __webpack_require__(0).Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}


/***/ }),
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(1);
var Reporter = __webpack_require__(21).Reporter;
var Buffer = __webpack_require__(0).Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = __webpack_require__(102);


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(1);

var asn1 = __webpack_require__(20);
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                    options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(1);
var Buffer = __webpack_require__(0).Buffer;

var asn1 = __webpack_require__(20);
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}


/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_noty__ = __webpack_require__(161);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_noty___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_noty__);

var noty = {
	displayNoty: function displayNoty(message, stack, id) {
		var theme = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
		var includeContactUs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;


		var notymessage = '\n\t\t\t\t\t\t<h1>' + (message ? message : 'Sorry there has been an error.') + '</h1>\n\t\t\t\t\t\t' + (includeContactUs ? '\n\t\t\t\t\t\t\t<h1>Please contact us at: <a href="mailto:enquiries@laplanduk.co.uk" style="text-decoration: underline;">enquiries@laplanduk.co.uk</a></h1>\n\t\t\t\t\t\t' : '') + '\n\t\t\t\t\t\t\n\t\t\t\t\t\t' + (id ? '\n\t\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t\tRequest ID: ' + id + '\n\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\n\t\t\t\t\t\t' : '') + '\n\t\t\t\t\t\t' + (stack ? '\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<code style="overflow:auto; word-break: break-word;">\n\t\t\t\t\t\t\t\t\t' + stack + '\n\t\t\t\t\t\t\t\t</code>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t' : '') + '\n\t\t\t\t\t';

		new __WEBPACK_IMPORTED_MODULE_0_noty___default.a({
			type: theme ? theme : 'error',
			text: notymessage,
			timeout: false,
			closeWith: ['button'],
			theme: 'semanticui'
		}).show();
	}
};

/* harmony default export */ __webpack_exports__["a"] = (noty);

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = __webpack_require__(195);
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(30)
var Transform = __webpack_require__(12)
var inherits = __webpack_require__(1)
var GHASH = __webpack_require__(119)
var xor = __webpack_require__(23)
inherits(StreamCipher, Transform)
module.exports = StreamCipher

function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])])
  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])])
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  iv.copy(this._prev)
  this._mode = mode
  var h = new Buffer(4)
  h.fill(0)
  this._ghash = new GHASH(this._cipher.encryptBlock(h))
  this._authTag = null
  this._called = false
}
StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = new Buffer(rump)
      rump.fill(0)
      this._ghash.update(rump)
    }
  }
  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}
StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) {
    throw new Error('Unsupported state or unable to authenticate data')
  }
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt) {
    if (xorTest(tag, this._authTag)) {
      throw new Error('Unsupported state or unable to authenticate data')
    }
  } else {
    this._authTag = tag
  }
  this._cipher.scrub()
}
StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
    return this._authTag
  } else {
    throw new Error('Attempting to get auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (this._decrypt) {
    this._authTag = tag
  } else {
    throw new Error('Attempting to set auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (!this._called) {
    this._ghash.update(buf)
    this._alen += buf.length
  } else {
    throw new Error('Attempting to set AAD in unsupported state')
  }
}
function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) {
    out++
  }
  var len = Math.min(a.length, b.length)
  var i = -1
  while (++i < len) {
    out += (a[i] ^ b[i])
  }
  return out
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

var xor = __webpack_require__(23)

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(23)

exports.encrypt = function (self, data, decrypt) {
  var out = new Buffer('')
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = new Buffer('')
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}
function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}
function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = new Buffer(buffer.length)
  buffer = Buffer.concat([buffer, new Buffer([value])])
  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }
  return out
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam
  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])])
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 68 */
/***/ (function(module, exports) {

exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}
exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(23)

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(30)
var Transform = __webpack_require__(12)
var inherits = __webpack_require__(1)

inherits(StreamCipher, Transform)
module.exports = StreamCipher
function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  iv.copy(this._prev)
  this._mode = mode
}
StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}
StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 71 */
/***/ (function(module, exports) {

module.exports = {
	"sha224WithRSAEncryption": {
		"sign": "rsa",
		"hash": "sha224",
		"id": "302d300d06096086480165030402040500041c"
	},
	"RSA-SHA224": {
		"sign": "ecdsa/rsa",
		"hash": "sha224",
		"id": "302d300d06096086480165030402040500041c"
	},
	"sha256WithRSAEncryption": {
		"sign": "rsa",
		"hash": "sha256",
		"id": "3031300d060960864801650304020105000420"
	},
	"RSA-SHA256": {
		"sign": "ecdsa/rsa",
		"hash": "sha256",
		"id": "3031300d060960864801650304020105000420"
	},
	"sha384WithRSAEncryption": {
		"sign": "rsa",
		"hash": "sha384",
		"id": "3041300d060960864801650304020205000430"
	},
	"RSA-SHA384": {
		"sign": "ecdsa/rsa",
		"hash": "sha384",
		"id": "3041300d060960864801650304020205000430"
	},
	"sha512WithRSAEncryption": {
		"sign": "rsa",
		"hash": "sha512",
		"id": "3051300d060960864801650304020305000440"
	},
	"RSA-SHA512": {
		"sign": "ecdsa/rsa",
		"hash": "sha512",
		"id": "3051300d060960864801650304020305000440"
	},
	"RSA-SHA1": {
		"sign": "rsa",
		"hash": "sha1",
		"id": "3021300906052b0e03021a05000414"
	},
	"ecdsa-with-SHA1": {
		"sign": "ecdsa",
		"hash": "sha1",
		"id": ""
	},
	"sha256": {
		"sign": "ecdsa",
		"hash": "sha256",
		"id": ""
	},
	"sha224": {
		"sign": "ecdsa",
		"hash": "sha224",
		"id": ""
	},
	"sha384": {
		"sign": "ecdsa",
		"hash": "sha384",
		"id": ""
	},
	"sha512": {
		"sign": "ecdsa",
		"hash": "sha512",
		"id": ""
	},
	"DSA-SHA": {
		"sign": "dsa",
		"hash": "sha1",
		"id": ""
	},
	"DSA-SHA1": {
		"sign": "dsa",
		"hash": "sha1",
		"id": ""
	},
	"DSA": {
		"sign": "dsa",
		"hash": "sha1",
		"id": ""
	},
	"DSA-WITH-SHA224": {
		"sign": "dsa",
		"hash": "sha224",
		"id": ""
	},
	"DSA-SHA224": {
		"sign": "dsa",
		"hash": "sha224",
		"id": ""
	},
	"DSA-WITH-SHA256": {
		"sign": "dsa",
		"hash": "sha256",
		"id": ""
	},
	"DSA-SHA256": {
		"sign": "dsa",
		"hash": "sha256",
		"id": ""
	},
	"DSA-WITH-SHA384": {
		"sign": "dsa",
		"hash": "sha384",
		"id": ""
	},
	"DSA-SHA384": {
		"sign": "dsa",
		"hash": "sha384",
		"id": ""
	},
	"DSA-WITH-SHA512": {
		"sign": "dsa",
		"hash": "sha512",
		"id": ""
	},
	"DSA-SHA512": {
		"sign": "dsa",
		"hash": "sha512",
		"id": ""
	},
	"DSA-RIPEMD160": {
		"sign": "dsa",
		"hash": "rmd160",
		"id": ""
	},
	"ripemd160WithRSA": {
		"sign": "rsa",
		"hash": "rmd160",
		"id": "3021300906052b2403020105000414"
	},
	"RSA-RIPEMD160": {
		"sign": "rsa",
		"hash": "rmd160",
		"id": "3021300906052b2403020105000414"
	},
	"md5WithRSAEncryption": {
		"sign": "rsa",
		"hash": "md5",
		"id": "3020300c06082a864886f70d020505000410"
	},
	"RSA-MD5": {
		"sign": "rsa",
		"hash": "md5",
		"id": "3020300c06082a864886f70d020505000410"
	}
};

/***/ }),
/* 72 */
/***/ (function(module, exports) {

module.exports = {
	"1.3.132.0.10": "secp256k1",
	"1.3.132.0.33": "p224",
	"1.2.840.10045.3.1.1": "p192",
	"1.2.840.10045.3.1.7": "p256",
	"1.3.132.0.34": "p384",
	"1.3.132.0.35": "p521"
};

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

var helpers = __webpack_require__(129);

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32);
  x[(((len + 64) >>> 9) << 4) + 14] = len;

  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  return Array(a, b, c, d);

}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t)
{
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
}
function md5_ff(a, b, c, d, x, s, t)
{
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t)
{
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t)
{
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t)
{
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

module.exports = function md5(buf) {
  return helpers.hash(buf, core_md5, 16);
};

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var randomBytes = __webpack_require__(26);
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = __webpack_require__(3);
var TWENTYFOUR = new BN(24);
var MillerRabin = __webpack_require__(75);
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

var bn = __webpack_require__(3);
var brorand = __webpack_require__(62);

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._rand = function _rand(n) {
  var len = n.bitLength();
  var buf = this.rand.generate(Math.ceil(len / 8));

  // Set low bits
  buf[0] |= 3;

  // Mask high bits
  var mask = len & 0x7;
  if (mask !== 0)
    buf[buf.length - 1] >>= 7 - mask;

  return new bn(buf);
}

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._rand(n2);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._rand(n2);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, Buffer) {var createHmac = __webpack_require__(45)
var checkParameters = __webpack_require__(166)

exports.pbkdf2 = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  checkParameters(iterations, keylen)
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

  setTimeout(function () {
    callback(null, exports.pbkdf2Sync(password, salt, iterations, keylen, digest))
  })
}

var defaultEncoding
if (process.browser) {
  defaultEncoding = 'utf-8'
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
}

exports.pbkdf2Sync = function (password, salt, iterations, keylen, digest) {
  if (!Buffer.isBuffer(password)) password = new Buffer(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt, defaultEncoding)

  checkParameters(iterations, keylen)

  digest = digest || 'sha1'

  var hLen
  var l = 1
  var DK = new Buffer(keylen)
  var block1 = new Buffer(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var r
  var T

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)
    var U = createHmac(digest, password).update(block1).digest()

    if (!hLen) {
      hLen = U.length
      T = new Buffer(hLen)
      l = Math.ceil(keylen / hLen)
      r = keylen - (l - 1) * hLen
    }

    U.copy(T, 0, 0, hLen)

    for (var j = 1; j < iterations; j++) {
      U = createHmac(digest, password).update(U).digest()
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    var destPos = (i - 1) * hLen
    var len = (i === l ? r : hLen)
    T.copy(DK, destPos, 0, len)
  }

  return DK
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15), __webpack_require__(0).Buffer))

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(13);
module.exports = function (seed, len) {
  var t = new Buffer('');
  var  i = 0, c;
  while (t.length < len) {
    c = i2ops(i++);
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
  }
  return t.slice(0, len);
};

function i2ops(c) {
  var out = new Buffer(4);
  out.writeUInt32BE(c,0);
  return out;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var bn = __webpack_require__(3);
function withPublic(paddedMsg, key) {
  return new Buffer(paddedMsg
    .toRed(bn.mont(key.modulus))
    .redPow(new bn(key.publicExponent))
    .fromRed()
    .toArray());
}

module.exports = withPublic;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 80 */
/***/ (function(module, exports) {

module.exports = function xor(a, b) {
  var len = a.length;
  var i = -1;
  while (++i < len) {
    a[i] ^= b[i];
  }
  return a
};

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

module.exports = Readable;

/*<replacement>*/
var processNextTick = __webpack_require__(48);
/*</replacement>*/

/*<replacement>*/
var isArray = __webpack_require__(181);
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(47).EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(83);
/*</replacement>*/

var Buffer = __webpack_require__(0).Buffer;
/*<replacement>*/
var bufferShim = __webpack_require__(44);
/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__(24);
util.inherits = __webpack_require__(1);
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(196);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__(180);
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(11);

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(52).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(11);

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function') this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = bufferShim.from(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var _e = new Error('stream.unshift() after end event');
      stream.emit('error', _e);
    } else {
      var skipAdd;
      if (state.decoder && !addToFront && !encoding) {
        chunk = state.decoder.write(chunk);
        skipAdd = !state.objectMode && chunk.length === 0;
      }

      if (!addToFront) state.reading = false;

      // Don't add to the buffer if we've decoded to an empty string chunk and
      // we're not in object mode
      if (!skipAdd) {
        // if we want the data now, just emit it.
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk);
          stream.read(0);
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

          if (state.needReadable) emitReadable(stream);
        }
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(52).StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = bufferShim.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)))

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(11);

/*<replacement>*/
var util = __webpack_require__(24);
util.inherits = __webpack_require__(1);
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(47).EventEmitter;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(1)
var Hash = __webpack_require__(14)

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = new Buffer(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var inherits = __webpack_require__(1)
var Hash = __webpack_require__(14)

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = new Buffer(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(226),
  /* template */
  __webpack_require__(263),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/ReservationAlert.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] ReservationAlert.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-00956bfd", Component.options)
  } else {
    hotAPI.reload("data-v-00956bfd", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AuthenticationError = function (_Error) {
    _inherits(AuthenticationError, _Error);

    function AuthenticationError(message) {
        _classCallCheck(this, AuthenticationError);

        var _this = _possibleConstructorReturn(this, (AuthenticationError.__proto__ || Object.getPrototypeOf(AuthenticationError)).call(this, 'Failed to authenticate user: ' + message));

        _this.name = 'AuthenticationError';
        return _this;
    }

    return AuthenticationError;
}(Error);

/* harmony default export */ __webpack_exports__["a"] = (AuthenticationError);

/***/ }),
/* 94 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__store__ = __webpack_require__(39);


/* harmony default export */ __webpack_exports__["a"] = ({
    computed: {
        adultsOnly: {
            get: function get() {
                return __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].getters.getAdultsOnly;
            },
            set: function set(value) {
                __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].commit('setAdultsOnly', { adultsOnly: value });
            }
        }
    }
});

/***/ }),
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vuex__ = __webpack_require__(28);


/* harmony default export */ __webpack_exports__["a"] = ({
	computed: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_vuex__["mapGetters"])({
		paymentErrors: 'paymentErrors'
	})
});

/***/ }),
/* 96 */,
/* 97 */,
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

// there's 3 implementations written in increasing order of efficiency

// 1 - no Set type is defined
function uniqNoSet(arr) {
	var ret = [];

	for (var i = 0; i < arr.length; i++) {
		if (ret.indexOf(arr[i]) === -1) {
			ret.push(arr[i]);
		}
	}

	return ret;
}

// 2 - a simple Set type is defined
function uniqSet(arr) {
	var seen = new Set();
	return arr.filter(function (el) {
		if (!seen.has(el)) {
			seen.add(el);
			return true;
		}
	});
}

// 3 - a standard Set type is defined and it has a forEach method
function uniqSetWithForEach(arr) {
	var ret = [];

	(new Set(arr)).forEach(function (el) {
		ret.push(el);
	});

	return ret;
}

// V8 currently has a broken implementation
// https://github.com/joyent/node/issues/8449
function doesForEachActuallyWork() {
	var ret = false;

	(new Set([true])).forEach(function (el) {
		ret = el;
	});

	return ret === true;
}

if ('Set' in global) {
	if (typeof Set.prototype.forEach === 'function' && doesForEachActuallyWork()) {
		module.exports = uniqSetWithForEach;
	} else {
		module.exports = uniqSet;
	}
} else {
	module.exports = uniqNoSet;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

var asn1 = __webpack_require__(20);
var inherits = __webpack_require__(1);

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = __webpack_require__(193).runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

var Reporter = __webpack_require__(21).Reporter;
var EncoderBuffer = __webpack_require__(21).EncoderBuffer;
var DecoderBuffer = __webpack_require__(21).DecoderBuffer;
var assert = __webpack_require__(10);

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input, options);
    else
      result = this._decodeChoice(input, options);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
          ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
        ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be ommited only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(1);

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

var constants = __webpack_require__(58);

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

var decoders = exports;

decoders.der = __webpack_require__(59);
decoders.pem = __webpack_require__(104);


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(1);
var Buffer = __webpack_require__(0).Buffer;

var DERDecoder = __webpack_require__(59);

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

var encoders = exports;

encoders.der = __webpack_require__(60);
encoders.pem = __webpack_require__(106);


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(1);

var DEREncoder = __webpack_require__(60);

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};


/***/ }),
/* 107 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);


var auth = __WEBPACK_IMPORTED_MODULE_0_axios___default.a.create({
    baseURL: window.baseApiUrl
});

/* harmony default export */ __webpack_exports__["a"] = (auth);

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {


window._ = __webpack_require__(197);

/**
 * We'll load jQuery and the Bootstrap jQuery plugin which provides support
 * for JavaScript based Bootstrap features such as modals and tabs. This
 * code may be modified to fit the specific needs of your application.
 */

window.$ = window.jQuery = __webpack_require__(19);

window.moment = __webpack_require__(198);

/**
 * Vue is a modern JavaScript library for building interactive web interfaces
 * using reactive data binding and reusable components. Vue's API is clean
 * and simple, leaving you to focus on building your next great project.
 */

window.Vue = __webpack_require__(56);

/**
 * We'll load the axios HTTP library which allows us to easily issue requests
 * to our Laravel back-end. This library automatically handles sending the
 * CSRF token as a header based on the value of the "XSRF" token cookie.
 */

window.axios = __webpack_require__(53);

window.axios.defaults.headers.common = {
  'X-Requested-With': 'XMLHttpRequest'
};

/**
 * Echo exposes an expressive API for subscribing to channels and listening
 * for events that are broadcast by Laravel. Echo and event broadcasting
 * allows your team to easily build robust real-time web applications.
 */

// import Echo from "laravel-echo"

// window.Pusher = require('pusher-js');

// window.Echo = new Echo({
//     broadcaster: 'pusher',
//     key: 'your-pusher-key'
// });

/***/ }),
/* 109 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__store__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vuex__ = __webpack_require__(28);



/* harmony default export */ __webpack_exports__["a"] = ({
    beforeRouteEnter: function beforeRouteEnter(to, from, next) {
        __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].dispatch('loadMyDetails').then(function () {
            next();
        });
    },
    beforeRouteUpdate: function beforeRouteUpdate(to, from, next) {
        __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].dispatch('loadMyDetails').then(function () {
            next();
        });
    },

    computed: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_vuex__["mapGetters"])({
        myDetails: 'getMyDetails'
    })
});

/***/ }),
/* 110 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var validators = {
	required: function required(value) {
		if (typeof value == 'boolean') return value;
		return !(value == null || value.length == 0);
	},
	numeric: function numeric(value) {
		return (/^-?(?:0$0(?=\d*\.)|[1-9]|0)\d*(\.\d+)?$/.test(value)
		);
	},
	integer: function integer(value) {
		return (/^(-?[1-9]\d*|0)$/.test(value)
		);
	},
	digits: function digits(value) {
		return (/^[\d() \.\:\-\+#]+$/.test(value)
		);
	},
	alpha: function alpha(value) {
		return (/^[a-zA-Z]+$/.test(value)
		);
	},
	alphaNum: function alphaNum(value) {
		return !/\W/.test(value);
	},
	alphaNumSpaces: function alphaNumSpaces(value) {
		return !/\W/.test(value) || !/^[\w\-\s]+$/.test(value);
	},
	email: function email(value) {
		return (/^[-a-z0-9~!$%^&*_=+}{\'?]+(\.[-a-z0-9~!$%^&*_=+}{\'?]+)*@([a-z0-9_][-a-z0-9_]*(\.[-a-z0-9_]+)*\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|london|[a-z][a-z])|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(:[0-9]{1,5})?$/i.test(value)
		);
	},
	url: function url(value) {
		return (/^(https?|ftp|rmtp|mms):\/\/(([A-Z0-9][A-Z0-9_-]*)(\.[A-Z0-9][A-Z0-9_-]*)+)(:(\d+))?\/?/i.test(value)
		);
	},
	min: function min(value, arg) {
		if (typeof value === 'string') {
			value = value.length;
		}
		return value >= +arg;
	},
	max: function max(value, arg) {
		if (typeof value === 'string') {
			value = value.length;
		}
		return value <= +arg;
	},
	regex: function regex(value, arg) {
		var match = arg.match(new RegExp('^/(.*?)/([gimy]*)$'));
		var regex = new RegExp(match[1], match[2]);

		return regex.test(value);
	}
};

var replacers = {
	min: function min(message, attribute, rule, parameters) {
		return message.replace(':min', parameters[1]);
	},
	max: function max(message, attribute, rule, parameters) {
		return message.replace(':max', parameters[1]);
	}
};

var messages = {
	alpha: 'The :attribute may only contain letters.',
	alphaNum: 'The :attribute may only contain letters and numbers.',
	alphaNumSpaces: 'The :attribute needs to be filled in.',
	digits: 'The :attribute must be :digits digits.',
	email: 'The :attribute must be a valid email address.',
	integer: 'The :attribute must be an integer.',
	max: 'The :attribute may not be greater than :max.',
	min: 'The :attribute must be at least :min.',
	numeric: 'The :attribute must be a number.',
	regex: 'The :attribute format is invalid.',
	required: 'The :attribute field is required.',
	url: 'The :attribute format is invalid.',
	minResponsibleAdults: 'The :attribute must be at least :min.'
};

/* harmony default export */ __webpack_exports__["a"] = ({
	data: function data() {
		return {
			errors: {}
		};
	},
	mounted: function mounted() {
		var _this = this;

		_.forEach(this.rules, function (rule, model) {
			_this.$watch(model, function (value) {
				_this.validate(model, value, rule);
			});
		});
	},

	methods: {
		passes: function passes() {
			var _this2 = this;

			_.forEach(this.rules, function (rule, model) {
				_this2.validate(model, _.get(_this2, model), rule);
			});
		},
		hasError: function hasError(model) {
			return this.getError(model) !== null;
		},
		getError: function getError(model) {
			return _.get(this.errors, model, null);
		},
		validate: function validate(model, value, rule) {
			var _this3 = this;

			return _.every(rule, function (rule) {
				var ruleAndArgs = _.split(rule, ':');
				var args = ruleAndArgs.length > 1 ? _.split(ruleAndArgs[1], ',') : [];

				rule = ruleAndArgs[0];
				args.unshift(value);

				if (!_.has(validators, rule)) {
					throw new Error('Unknown validation rule "' + rule + '"');
				}

				var valid = validators[rule].apply(null, args);

				if (valid) {
					_this3.$set(_this3.errors, model, null);
				} else {
					var error = _.get(messages, rule).split(',')[0];

					error = error.replace(':attribute', model.replace('.value', '').replace(/([A-Z])/g, function (match, p1) {
						return ' ' + p1.toLowerCase();
					}).replace(/\./g, function (match) {
						return ' ';
					}));

					if (_.has(replacers, rule)) {
						error = replacers[rule].call(null, error, model, rule, args);
					}

					_this3.$set(_this3.errors, model, error);
				}

				return valid;
			});
		}
	}
});

/***/ }),
/* 111 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_randomstring__ = __webpack_require__(175);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_randomstring___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_randomstring__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__errors_AuthenticationError__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__auth__ = __webpack_require__(107);




var state = {
    accessToken: null,
    csrfToken: null,
    redirectTo: null
};

var actions = {
    authenticate: function authenticate(_ref, redirectTo, name) {
        var commit = _ref.commit,
            getters = _ref.getters;

        var redirectUri = encodeURIComponent(getters.getBaseURL + '/oauth/callback/' + getters.getBooking.id + '/' + (redirectTo.name ? redirectTo.name : 'mmb-home'));
        var csrfToken = __WEBPACK_IMPORTED_MODULE_0_randomstring___default.a.generate();
        commit('accessToken', { accessToken: null });
        commit('redirectTo', { redirectTo: redirectTo });
        commit('csrfToken', { csrfToken: csrfToken });

        window.location = __WEBPACK_IMPORTED_MODULE_2__auth__["a" /* default */].defaults.baseURL + 'auth/oauth/authorize' + '?client_id=public' + '&response_type=token' + '&redirect_uri=' + redirectUri + '&state=' + csrfToken;
    },
    authorize: function authorize(_ref2, fragment) {
        var commit = _ref2.commit,
            getters = _ref2.getters;

        if (fragment.length === 0 || fragment[0] !== '#') {
            throw new __WEBPACK_IMPORTED_MODULE_1__errors_AuthenticationError__["a" /* default */]('Invalid response fragment.');
        }

        var payload = _.fromPairs(_.map(fragment.substr(1).split('&'), function (keyValue) {
            return keyValue.split('=');
        }));

        var csrfToken = getters.csrfToken;
        var state = payload.state;
        var accessToken = payload.access_token;

        if (state !== csrfToken) {
            throw new __WEBPACK_IMPORTED_MODULE_1__errors_AuthenticationError__["a" /* default */]('Invalid CSRF token.');
        }

        commit('accessToken', { accessToken: accessToken });
    },
    logout: function logout(_ref3) {
        var commit = _ref3.commit;

        return new Promise(function (resolve, reject) {
            commit('accessToken', { accessToken: null });

            __WEBPACK_IMPORTED_MODULE_2__auth__["a" /* default */].post('auth/logout', {}, {
                withCredentials: true
            }).then(function (response) {
                resolve();
            }).catch(function (error) {
                reject(error);
            });
        });
    }
};

var mutations = {
    accessToken: function accessToken(state, payload) {
        state.accessToken = payload.accessToken;

        if (payload.accessToken === null) {
            sessionStorage.removeItem('mmb__accessToken');
        } else {
            sessionStorage.setItem('mmb__accessToken', payload.accessToken);
        }
    },
    csrfToken: function csrfToken(state, payload) {
        state.csrfToken = payload.csrfToken;

        if (payload.csrfToken === null) {
            sessionStorage.removeItem('mmb__csrfToken');
        } else {
            sessionStorage.setItem('mmb__csrfToken', payload.csrfToken);
        }
    },
    redirectTo: function redirectTo(state, payload) {
        state.redirectTo = payload.redirectTo;

        if (payload.redirectTo === null) {
            sessionStorage.removeItem('mmb__redirectTo');
        } else {
            sessionStorage.setItem('mmb__redirectTo', JSON.stringify(payload.redirectTo));
        }
    }
};

var getters = {
    isAuthenticated: function isAuthenticated(state, getters) {
        return getters.accessToken !== null;
    },
    accessToken: function accessToken() {
        if (state.accessToken !== null) {
            return state.accessToken;
        }

        return sessionStorage.getItem('mmb__accessToken');
    },
    csrfToken: function csrfToken() {
        if (state.csrfToken !== null) {
            return state.csrfToken;
        }

        return sessionStorage.getItem('mmb__csrfToken');
    },
    redirectTo: function redirectTo() {
        if (state.redirectTo !== null) {
            return state.redirectTo;
        }

        return JSON.parse(sessionStorage.getItem('mmb__redirectTo'));
    }
};

/* harmony default export */ __webpack_exports__["a"] = ({
    state: state,
    getters: getters,
    actions: actions,
    mutations: mutations
});

/***/ }),
/* 112 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__noty__ = __webpack_require__(61);
var _mutations;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





var state = {
	locations: {},
	promptForLocation: true,
	promptForSeason: true,
	availability: [],
	slotAvailability: [],
	availableExtras: [],
	availableInsurance: [],
	location: '',
	season: '',
	adults: 0,
	seniors: 0,
	children: 0,
	babies: 0,
	carers: 0,
	wheelchairs: 0,
	adultsOnly: false,
	day: null,
	slot: null,
	extras: [],
	transactionId: null,
	reservationId: null,
	reservationExpiry: null,
	order: null,
	checkout: null,
	paymentErrors: null,
	hash: null,
	referrers: [],
	referrer: null,
	premiumSearchEnabled: window.bookingPortalPremiumTickets ? window.bookingPortalPremiumTickets : false,
	premiumSearch: false
};

var actions = {
	loadReferrers: function loadReferrers(_ref) {
		var commit = _ref.commit;

		__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('portal/referrers').then(function (response) {
			commit('setReferrers', response.data);
		}).catch(function (error) {
			__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWS1');
			console.error(error);
		});
	},
	loadLocations: function loadLocations(_ref2) {
		var commit = _ref2.commit;

		__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('portal/locationSeasons').then(function (response) {
			commit('locations', response.data.content);

			if (response.data.onlyOneLocationOption) {
				commit('promptForLocation', false);
				commit('location', response.data.defaultLocation);
			}

			if (response.data.onlyOneLocationSeasonOption) {
				commit('promptForSeason', false);
				commit('season', response.data.defaultSeason);
			}
		}).catch(function (error) {
			__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWS2');
			console.error(error);
		});
	},
	reserveSlot: function reserveSlot(_ref3) {
		var commit = _ref3.commit,
		    state = _ref3.state;

		return __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].post('availabilities/reserve', {
			adults: state.adults,
			carers: state.carers,
			children: state.children,
			infants: state.babies,
			seniors: state.seniors,
			wheelchairs: state.wheelchairs,
			date: moment(state.day.date).format('YYYY-MM-DD'),
			time: state.slot.time,
			location: state.location,
			season: state.season,
			reservationId: state.slot.id
		});
	},
	startCountdown: function startCountdown(_ref4) {
		var commit = _ref4.commit;

		commit('resetReservationExpiry');
		commit('setReservationExpiry', moment().add(5, 'm'));
	},
	checkAvailability: function checkAvailability(_ref5) {
		var commit = _ref5.commit,
		    state = _ref5.state;

		__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('availabilities/locations/' + state.location + '/seasons/' + state.season, {
			params: {
				ad: state.adults,
				se: state.seniors,
				ch: state.children,
				ca: state.carers,
				wh: state.wheelchairs,
				in: state.babies,
				inf: state.premiumSearch ? "PREMIUM+" : ""
			}
		}).then(function (response) {
			var availability = _.map(response.data.summaryView.availability, function (day) {
				var info = [];
				if (day.informationTags) {
					info = day.informationTags;
				} else if (day.information) {
					info = day.information;

					if (info !== '') {
						info = _.map(_.filter(info.split(","), function (i, k) {
							return k === 0 || k === 1;
						}), function (item, i) {
							return item;
						});
					}
				}

				return {
					date: moment(day.date),
					availableSlots: day.availableSlots,
					nicePrice: day.formattedLowestPrice,
					information: info,
					totalSlots: day.totalSlots,
					isActive: day.availableSlots > 0,
					isSelected: false,
					lowestPrice: day.lowestPrice[1]
				};
			});

			commit('availability', availability);
		}).catch(function (error) {
			__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWS3');
			console.error(error);
		});
	},
	loadSlotAvailability: function loadSlotAvailability(_ref6) {
		var commit = _ref6.commit,
		    state = _ref6.state;

		__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('availabilities/locations/' + state.location + '/seasons/' + state.season + '/dates/' + state.day.date.format('YYYY-MM-DD'), {
			params: {
				ad: state.adults,
				se: state.seniors,
				ch: state.children,
				ca: state.carers,
				wh: state.wheelchairs,
				in: state.babies,
				inf: state.premiumSearch ? "PREMIUM+" : ""
			}
		}).then(function (response) {
			var slots = _.map(response.data.dateAvailabilityView.availability, function (slot) {
				var info = slot.information;

				if (info !== '') {
					info = _.map(_.filter(info.split(", "), function (i, k) {
						return k === 0 || k === 1;
					}), function (item, i) {
						return item;
					});
				}

				return {
					activeReservations: slot.activeReservations,
					allAdultSlotsAvailable: slot.allAdultSlotsAvailable,
					childrenSlotsAvailable: slot.childrenSlotsAvailable,
					groupsAvailable: slot.groupsAvailable,
					information: info,
					adultPrice: slot.prettyAdultPrice,
					childPrice: slot.prettyChildPrice,
					seniorPrice: slot.prettySeniorPrice,
					totalPrice: slot.prettyTotalPrice,
					time: slot.time,
					id: slot.id === '--unavailable--' ? false : slot.id
				};
			});

			commit('slotAvailability', slots);
		}).catch(function (error) {
			__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWS4');
			console.error(error);
		});
	},
	loadAvailableExtras: function loadAvailableExtras(_ref7) {
		var commit = _ref7.commit;

		return new Promise(function (resolve, reject) {
			__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('availabilities/extras').then(function (response) {
				var data = _.filter(response.data, function (extra) {
					return extra.type !== 'INSURANCE';
				});
				var insurance = _.filter(response.data, function (extra) {
					return extra.type === 'INSURANCE';
				});

				var extras = _.map(data, function (extra) {
					var steps = _.range(11);
					if (extra.multiple > 1) {
						steps = _.range(25, 205, extra.multiple);
						steps.splice(0, 0, 0);
					}
					return {
						id: extra.id,
						shortDescription: extra.shortDescription,
						description: extra.description,
						multiple: extra.multiple,
						name: extra.name,
						price: parseFloat(extra.prettyPrice).toFixed(2),
						type: extra.type,
						steps: steps,
						image: '//lluk-aurora.s3.amazonaws.com/images/extras/' + extra.type + '.png',
						images: extra.images,
						selectedValue: 0
					};
				});

				var insuranceExtras = _.map(insurance, function (extra) {

					return {
						id: extra.id,
						description: extra.description,
						multiple: extra.multiple,
						name: extra.name,
						price: parseFloat(extra.prettyPrice).toFixed(2),
						type: extra.type,
						selectedValue: 0
					};
				});

				commit('availableExtras', extras);
				commit('availableInsurance', insuranceExtras);

				resolve();
			}).catch(function (error) {
				__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWSQ');
				console.error(error);
				reject(error);
			});
		});
	},
	createCheckout: function createCheckout(_ref8) {
		var commit = _ref8.commit,
		    state = _ref8.state;

		var magicExtras = _.map(state.extras, function (extra) {
			return extra.selectedValue + '.' + extra.id;
		});

		return new Promise(function (resolve, reject) {
			__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('portal/checkout/' + state.slot.id, {
				params: {
					reservationId: state.slot.id,
					transactionId: state.transactionId,
					extras: magicExtras.join('-')
				}
			}).then(function (response) {
				var slot = _.cloneDeep(state.slot);
				slot.id = response.data.reservationView.id;

				commit('slot', slot);
				commit('setReservationId', slot.id);
				commit('setCheckout', response.data);
				commit('setHash', response.data.paymentRequestParameters.hash);
				commit('setTransactionId', response.data.paymentRequestParameters.transactionId);
				if (response.data.validUntil) {
					//response.data.validUntil
					commit('setReservationExpiry', moment().add(response.data.validUntil, 's'));
				}

				resolve(response);
			}).catch(function (error) {
				__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWSW');
				console.error(error);
				reject();
			});
		});
	},
	applyPromoCode: function applyPromoCode(_ref9, params) {
		var commit = _ref9.commit,
		    state = _ref9.state;

		var magicExtras = _.map(state.extras, function (extra) {
			return extra.selectedValue + '.' + extra.id;
		});

		return new Promise(function (resolve, reject) {
			__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('portal/promoCodes/' + params.promoCode + '/apply', {
				params: {
					reservationId: state.slot.id,
					transactionId: state.transactionId,
					extras: magicExtras.join('-')
				}
			}).then(function (response) {
				var slot = _.cloneDeep(state.slot);
				var extras = _.cloneDeep(state.extras);
				var promoCodeRules = response.data.promoCodeDto;

				// Total discount

				// TODO: Implement money off total
				if (slot.totalPrice > 0) {
					slot.totalPrice = parseFloat(slot.totalPrice) - parseFloat(slot.totalPrice) * promoCodeRules.percentOffTotal;
				}

				_.forEach(extras, function (extra) {
					if (extra.totalExtraPrice > 0) {
						extra.totalExtraPrice = parseFloat(extra.totalExtraPrice) - parseFloat(extra.totalExtraPrice) * promoCodeRules.percentOffTotal;
					}
				});

				// Ticket discount

				if (slot.totalPrice > 0) {
					slot.totalPrice = parseFloat(slot.totalPrice) - promoCodeRules.moneyOffTicket[1];
				}

				if (slot.totalPrice > 0) {
					slot.totalPrice = parseFloat(slot.totalPrice) - parseFloat(slot.totalPrice) * promoCodeRules.percentOffTicket;
				}

				// Extras discount

				// TODO: Implement money off extras
				_.forEach(extras, function (extra) {
					if (extra.totalExtraPrice > 0) {
						extra.totalExtraPrice = parseFloat(extra.totalExtraPrice) - parseFloat(extra.totalExtraPrice) * promoCodeRules.percentOffExtras;
					}
				});

				if (slot.totalPrice > 0 && promoCodeRules.moneyOffTotal && promoCodeRules.moneyOffTotal[1] > 0) {
					slot.totalPrice = parseFloat(slot.totalPrice) - promoCodeRules.moneyOffTotal[1];
				}

				commit('slot', slot);
				commit('setExtras', extras);
				commit('setReservationId', slot.id);
				commit('setHash', response.data.paymentRequestParameters.hash);

				var checkout = _.cloneDeep(state.checkout);
				checkout.grandTotal = response.data.prettyGrandTotal;
				checkout.paymentRequestParameters = response.data.paymentRequestParameters;

				commit('setCheckout', checkout);

				resolve(response);
			}).catch(function (error) {
				//noty.displayNoty(error.message ? error.message : '', error.stack, 'QAZWSE');
				console.error(error);
				reject(error);
			});
		});
	},
	createOrder: function createOrder(_ref10, params) {
		var commit = _ref10.commit,
		    state = _ref10.state;

		var magicExtras = _.map(state.extras, function (extra) {
			return extra.selectedValue + '.' + extra.id;
		});
		var children = _.map(params.children, function (child) {
			return child.name;
		});
		var totalExtras = _.reduce(state.extras, function (sum, extra) {
			return sum + parseFloat(extra.totalExtraPrice);
		}, 0.00);
		var body = {
			customerRef: '',
			largeBooking: false,
			magicExtras: magicExtras.join('-'),
			orderView: {
				addressLine1: params.billing.address1,
				addressLine2: params.billing.address2,
				amountPaid: ['GBP', parseFloat(parseFloat(state.slot.totalPrice) + parseFloat(totalExtras))],
				childDetails: children.join(','),
				adultDetails: '',
				seniorDetails: '',
				carerDetails: '',
				city: params.billing.city,
				country: params.billing.country.code,
				customerId: '',
				discountCode: params.code,
				emailAddress: params.customer.emailAddress,
				firstName: params.customer.firstName,
				lastName: params.customer.lastName,
				originalAmountPaid: parseFloat(parseFloat(state.slot.totalPrice) + parseFloat(totalExtras)).toFixed(2),
				paymentReference: state.checkout.paymentRequestParameters.transactionId,
				postCode: params.billing.postcode,
				referrerReasonId: params.referrer && params.referrer.id ? params.referrer.id : 0,
				telephone: params.customer.telephone
			},
			persisted: false
		};

		if (state.adultsOnly) {
			body.orderView.adultDetails = children.join(',');
			body = _.omit(body, 'orderView.childDetails');
		}

		return new Promise(function (resolve, reject) {
			__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].post('portal/orders/' + state.slot.id, body).then(function (response) {
				commit('setOrder', response.data);
				resolve(response);
			}).catch(function (error) {
				__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWSR');
				console.error(error);
				reject(error);
			});
		});
	},
	finaliseOrder: function finaliseOrder(_ref11, params) {
		var state = _ref11.state;

		return __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('portal/checkout/confirm/' + params.id, {
			params: {
				transactionId: params.transactionId,
				responseCode: params.responseCode,
				hash: params.hash
			}
		});
	},
	orderFailed: function orderFailed(_ref12, params) {
		var commit = _ref12.commit,
		    getters = _ref12.getters;

		var magicExtras = _.map(getters.extras, function (extra) {
			return extra.selectedValue + '.' + extra.id;
		});

		return new Promise(function (resolve, reject) {
			__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('portal/checkout/' + params.id, {
				params: {
					reservationId: params.id,
					transactionId: params.transactionId,
					extras: magicExtras.join('-')
				}
			}).then(function (response) {
				commit('setCheckout', response.data);
				commit('setHash', response.data.paymentRequestParameters.hash);
				commit('setTransactionId', response.data.paymentRequestParameters.transactionId);
				if (response.data.validUntil) {
					//response.data.validUntil
					commit('setReservationExpiry', moment().add(response.data.validUntil, 's'));
				}
				resolve(response);
			}).catch(function (error) {
				__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWST');
				console.error(error);
				reject(error);
			});
		});
	},
	recoverFromFailedPayment: function recoverFromFailedPayment(_ref13, params) {
		var commit = _ref13.commit,
		    state = _ref13.state;

		return new Promise(function (resolve, reject) {

			__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('availabilities/locations/' + state.location + '/seasons/' + state.season, {
				params: {
					ad: state.adults,
					se: state.seniors,
					ch: state.children,
					ca: state.carers,
					wh: state.wheelchairs,
					in: state.babies,
					inf: state.premiumSearch ? "PREMIUM+" : ""
				}
			}).then(function (response) {
				var availability = _.map(response.data.summaryView.availability, function (day) {
					if (moment(params.date).isSame(moment(day.date))) {
						commit('day', {
							date: moment(day.date),
							availableSlots: day.availableSlots,
							nicePrice: day.formattedLowestPrice,
							information: day.information,
							totalSlots: day.totalSlots,
							isActive: day.availableSlots > 0,
							isSelected: false
						});
					}
					return {
						date: moment(day.date),
						availableSlots: day.availableSlots,
						nicePrice: day.formattedLowestPrice,
						information: day.information,
						totalSlots: day.totalSlots,
						isActive: day.availableSlots > 0,
						isSelected: false
					};
				});
				commit('availability', availability);

				//load the slot
				__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('availabilities/locations/' + state.location + '/seasons/' + state.season + '/dates/' + state.day.date.format('YYYY-MM-DD'), {
					params: {
						ad: state.adults,
						se: state.seniors,
						ch: state.children,
						ca: state.carers,
						wh: state.wheelchairs,
						in: state.babies,
						inf: state.premiumSearch ? "PREMIUM+" : ""
					}
				}).then(function (response) {
					var slots = _.map(response.data.dateAvailabilityView.availability, function (slot) {
						if (slot.time === params.time) {
							commit('slot', {
								activeReservations: slot.activeReservations,
								allAdultSlotsAvailable: slot.allAdultSlotsAvailable,
								childrenSlotsAvailable: slot.childrenSlotsAvailable,
								groupsAvailable: slot.groupsAvailable,
								information: slot.information,
								adultPrice: slot.prettyAdultPrice,
								childPrice: slot.prettyChildPrice,
								seniorPrice: slot.prettySeniorPrice,
								totalPrice: slot.prettyTotalPrice,
								time: slot.time,
								id: params.id
							});
						}
						return {
							activeReservations: slot.activeReservations,
							allAdultSlotsAvailable: slot.allAdultSlotsAvailable,
							childrenSlotsAvailable: slot.childrenSlotsAvailable,
							groupsAvailable: slot.groupsAvailable,
							information: slot.information,
							adultPrice: slot.prettyAdultPrice,
							childPrice: slot.prettyChildPrice,
							seniorPrice: slot.prettySeniorPrice,
							totalPrice: slot.prettyTotalPrice,
							time: slot.time,
							id: slot.id === '--unavailable--' ? false : slot.id
						};
					});
					commit('slotAvailability', slots);

					//load the extras and map them
					__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('availabilities/extras').then(function (response) {
						var data = _.filter(response.data, function (extra) {
							return extra.type !== 'INSURANCE';
						});
						var insurance = _.filter(response.data, function (extra) {
							return extra.type === 'INSURANCE';
						});

						var extras = _.map(data, function (extra) {
							var steps = _.range(11);
							if (extra.multiple > 1) {
								steps = _.range(25, 205, extra.multiple);
								steps.splice(0, 0, 0);
							}

							if (params.extras) {
								var foundExtra = _.find(params.extras, { id: extra.id });
								if (foundExtra) {
									var extraToAdd = {
										id: extra.id,
										description: extra.description,
										multiple: extra.multiple,
										name: extra.name,
										price: parseFloat(parseFloat(extra.prettyPrice).toFixed(2) * 1).toFixed(2),
										type: extra.type,
										steps: steps,
										selectedValue: foundExtra.quantity
									};
									commit('addExtra', extraToAdd);
								}
							}

							return {
								id: extra.id,
								description: extra.description,
								multiple: extra.multiple,
								name: extra.name,
								price: parseFloat(parseFloat(extra.prettyPrice).toFixed(2) * 1).toFixed(2),
								type: extra.type,
								steps: steps,
								images: extra.images,
								selectedValue: 0
							};
						});

						var insuranceExtras = _.map(insurance, function (extra) {

							if (params.extras) {
								var foundExtra = _.find(params.extras, { id: extra.id });
								if (foundExtra) {
									var extraToAdd = {
										id: extra.id,
										description: extra.description,
										multiple: extra.multiple,
										name: extra.name,
										price: parseFloat(parseFloat(extra.prettyPrice).toFixed(2) * 1).toFixed(2),
										type: extra.type,
										selectedValue: foundExtra.quantity
									};
									commit('addExtra', extraToAdd);
								}
							}

							return {
								id: extra.id,
								description: extra.description,
								multiple: extra.multiple,
								name: extra.name,
								price: parseFloat(parseFloat(extra.prettyPrice).toFixed(2) * 1).toFixed(2),
								type: extra.type,
								selectedValue: 0
							};
						});

						commit('availableExtras', extras);
						commit('availableInsurance', insuranceExtras);

						resolve();
					}).catch(function (error) {
						__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWSY');
						console.error(error);
						reject();
					});
				}).catch(function (error) {
					__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWS5');
					console.error(error);
					reject();
				});
			}).catch(function (error) {
				__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWS6');
				console.error(error);
				reject();
			});
		});
	}
};

var mutations = (_mutations = {
	setAdultsOnly: function setAdultsOnly(state, payload) {
		state.adultsOnly = payload.adultsOnly;
	},
	setReferrers: function setReferrers(state, referrers) {
		state.referrers = referrers;
	},
	setReferrer: function setReferrer(state, referrer) {
		state.referrer = referrer;
	},
	locations: function locations(state, _locations) {
		state.locations = _locations;
	},
	promptForLocation: function promptForLocation(state, _promptForLocation) {
		state.promptForLocation = _promptForLocation;
	},
	promptForSeason: function promptForSeason(state, _promptForSeason) {
		state.promptForSeason = _promptForSeason;
	},
	availability: function availability(state, _availability) {
		state.availability = _availability;
	},
	resetAvailability: function resetAvailability(state) {
		state.availability = [];
	},
	slotAvailability: function slotAvailability(state, _slotAvailability) {
		state.slotAvailability = _slotAvailability;
	},
	resetSlotAvailability: function resetSlotAvailability(state) {
		state.slotAvailability = [];
	},
	availableExtras: function availableExtras(state, _availableExtras) {
		state.availableExtras = _availableExtras;
	},
	availableInsurance: function availableInsurance(state, insurance) {
		state.availableInsurance = insurance;
	}
}, _defineProperty(_mutations, 'locations', function locations(state, _locations2) {
	state.locations = _locations2;
}), _defineProperty(_mutations, 'location', function location(state, _location) {
	state.location = _location;
}), _defineProperty(_mutations, 'season', function season(state, _season) {
	state.season = _season;
}), _defineProperty(_mutations, 'party', function party(state, _party) {
	state.adults = _.get(_party, 'adults', 0);
	state.seniors = _.get(_party, 'seniors', 0);
	state.children = _.get(_party, 'children', 0);
	state.babies = _.get(_party, 'babies', 0);
	state.carers = _.get(_party, 'carers', 0);
	state.wheelchairs = _.get(_party, 'wheelchairs', 0);
}), _defineProperty(_mutations, 'day', function day(state, _day) {
	state.day = _day;
}), _defineProperty(_mutations, 'slot', function slot(state, _slot) {
	state.slot = _slot;
}), _defineProperty(_mutations, 'setExtras', function setExtras(state, extras) {
	state.extras = extras;

	if (extras === null) {
		window.Vue.localStorage.storage.removeItem('bp__extras');
	} else {
		var saveExtras = _.map(state.extras, function (extra) {
			return {
				selectedValue: extra.selectedValue,
				id: extra.id
			};
		});
		window.Vue.localStorage.storage.setItem('bp__extras', JSON.stringify(saveExtras));
	}
}), _defineProperty(_mutations, 'addExtra', function addExtra(state, extra) {
	var currentExtra = _.find(state.extras, { id: extra.id });
	var workedOutPrice = extra.price / extra.multiple * extra.selectedValue;

	if (currentExtra) {
		currentExtra.qty += extra.selectedValue;
		currentExtra.totalExtraPrice = parseFloat(parseFloat(currentExtra.totalExtraPrice) + workedOutPrice).toFixed(2);
	} else {
		var shallowExtra = _.cloneDeep(extra);
		shallowExtra.qty = extra.selectedValue;
		shallowExtra.totalExtraPrice = parseFloat(workedOutPrice).toFixed(2);
		state.extras.push(shallowExtra);
	}
	var saveExtras = _.map(state.extras, function (extra) {
		return {
			selectedValue: extra.selectedValue,
			id: extra.id
		};
	});
	window.Vue.localStorage.storage.setItem('bp__extras', JSON.stringify(saveExtras));
}), _defineProperty(_mutations, 'removeExtra', function removeExtra(state, id) {
	state.extras = _.reject(state.extras, { id: id });
}), _defineProperty(_mutations, 'removeInsuranceExtra', function removeInsuranceExtra(state) {
	state.extras = _.reject(state.extras, { type: 'INSURANCE' });
}), _defineProperty(_mutations, 'resetExtras', function resetExtras(state) {
	state.extras = [];
}), _defineProperty(_mutations, 'resetReservationExpiry', function resetReservationExpiry(state) {
	state.reservationExpiry = null;
}), _defineProperty(_mutations, 'setReservationExpiry', function setReservationExpiry(state, time) {
	state.reservationExpiry = time;
}), _defineProperty(_mutations, 'setTransactionId', function setTransactionId(state, id) {
	state.transactionId = id;
}), _defineProperty(_mutations, 'setReservationId', function setReservationId(state, id) {
	state.reservationId = id;

	if (id === null) {
		window.Vue.localStorage.storage.removeItem('mmb__reservationId');
	} else {
		window.Vue.localStorage.storage.setItem('mmb__reservationId', id);
	}
}), _defineProperty(_mutations, 'resetOrder', function resetOrder(state) {
	state.order = null;
}), _defineProperty(_mutations, 'resetCheckout', function resetCheckout(state) {
	state.checkout = null;
}), _defineProperty(_mutations, 'setOrder', function setOrder(state, order) {
	state.order = order;
}), _defineProperty(_mutations, 'setCheckout', function setCheckout(state, checkout) {
	state.checkout = checkout;
}), _defineProperty(_mutations, 'setFinalisedOrder', function setFinalisedOrder(state, order) {
	state.confirmedOrder = order;
}), _defineProperty(_mutations, 'resetPaymentErrors', function resetPaymentErrors(state) {
	state.paymentErrors = null;
}), _defineProperty(_mutations, 'setPaymentErrors', function setPaymentErrors(state, errors) {
	state.paymentErrors = errors;
}), _defineProperty(_mutations, 'setHash', function setHash(state, hash) {
	state.hash = hash;
}), _defineProperty(_mutations, 'clearDayAndSlot', function clearDayAndSlot(state) {
	state.day = null;
	state.slot = null;
}), _defineProperty(_mutations, 'setPremiumSearch', function setPremiumSearch(state, search) {
	state.premiumSearch = search;
}), _mutations);

var getters = {
	getAdultsOnly: function getAdultsOnly(state) {
		return state.adultsOnly;
	},

	referrers: function referrers(state) {
		return state.referrers;
	},
	referrer: function referrer(state) {
		return state.referrer;
	},
	locations: function locations(state) {
		return state.locations;
	},
	promptForLocation: function promptForLocation(state) {
		return state.promptForLocation;
	},
	promptForSeason: function promptForSeason(state) {
		return state.promptForSeason;
	},
	availability: function availability(state) {
		return state.availability;
	},
	slotAvailability: function slotAvailability(state) {
		return state.slotAvailability;
	},
	availableExtras: function availableExtras(state) {
		return state.availableExtras;
	},
	availableInsurance: function availableInsurance(state) {
		return state.availableInsurance;
	},
	party: function party(state) {
		return {
			adults: state.adults,
			seniors: state.seniors,
			children: state.children,
			babies: state.babies,
			carers: state.carers,
			wheelchairs: state.wheelchairs
		};
	},
	day: function day(state) {
		return state.day;
	},
	slot: function slot(state) {
		return state.slot;
	},
	extras: function extras(state) {
		if (state.extras !== null) {
			return state.extras;
		}

		return JSON.parse(window.Vue.localStorage.storage.getItem('bp__extras'));
	},
	location: function location(state) {
		return state.location;
	},
	season: function season(state) {
		return state.season;
	},
	reservationExpiry: function reservationExpiry(state) {
		return state.reservationExpiry;
	},
	getTransactionId: function getTransactionId(state) {
		return state.transactionId;
	},
	getReservationId: function getReservationId(state) {
		if (state.reservationId !== null) {
			return state.reservationId;
		}

		return window.Vue.localStorage.storage.getItem('mmb__reservationId');
	},
	checkout: function checkout(state) {
		return state.checkout;
	},
	order: function order(state) {
		return state.order;
	},
	paymentErrors: function paymentErrors(state) {
		return state.paymentErrors;
	},
	getHash: function getHash(state) {
		return state.hash;
	},
	premiumSearchEnabled: function premiumSearchEnabled(state) {
		return state.premiumSearchEnabled;
	},
	premiumSearch: function premiumSearch(state) {
		return state.premiumSearch;
	}
};

/* harmony default export */ __webpack_exports__["a"] = ({
	state: state,
	getters: getters,
	actions: actions,
	mutations: mutations
});

/***/ }),
/* 113 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__noty__ = __webpack_require__(61);




var state = {
	bookings: [],
	booking: {
		id: 0,
		bookingReference: '',
		reservationId: '',
		bookingName: null,
		booker: {
			id: 0
		},
		bookedDate: '',
		bookedTime: '',
		adultsTickets: 0,
		seniorsTickets: 0,
		childrenTickets: 0,
		infantsTickets: 0,
		carersTickets: 0,
		wheelchairsTickets: 0,
		adultAmount: [],
		seniorAmount: [],
		childAmount: [],
		infantAmount: [],
		carerAmount: [],
		wheelchairAmount: [],
		paidAmount: '0.00',
		stopSell: false,
		premiumSlot: false
	},
	tickets: [],
	childAttendees: [],
	adultAttendees: [],
	carerAttendees: [],
	seniorAttendees: [],
	adultPrice: '0.00',
	seniorPrice: '0.00',
	childPrice: '0.00',
	additionalTickets: {
		adults: 0,
		seniors: 0,
		children: 0,
		infants: 0,
		carers: 0,
		wheelchairs: 0
	},
	additionalExtras: []
};

var actions = {
	loadBookings: function loadBookings(_ref) {
		var commit = _ref.commit;

		return new Promise(function (resolve, reject) {
			__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('mmb/bookings').then(function (response) {
				var currencyProperties = ['adultAmount', 'seniorAmount', 'childAmount', 'infantAmount', 'carerAmount', 'wheelchairAmount', 'paidAmount'];

				var bookings = _.map(response.data, function (data) {
					var booking = data;

					currencyProperties.forEach(function (property) {
						if (booking[property] && booking[property].length > 1) {
							booking[property] = parseFloat(Math.round(booking[property][1] * 100) / 100).toFixed(2);
						}
					});

					return booking;
				});

				commit('setBookings', { bookings: _.orderBy(bookings, 'id', 'desc') });

				resolve();
			}).catch(function (error) {
				__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWSC');
				console.error(error);
				reject(error);
			});
		});
	},
	loadTickets: function loadTickets(_ref2, bookingId) {
		var commit = _ref2.commit;

		return new Promise(function (resolve, reject) {
			__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('mmb/bookings/' + bookingId + '/tickets').then(function (response) {
				commit('setTickets', { tickets: response.data });

				var attendees = _.map(response.data, function (ticket) {
					ticket.attendee.ticketId = ticket.id;

					if (ticket.attendee.answers) {
						if (ticket.attendee.answers.yearsOfAttendance) {
							ticket.attendee.answers.yearsOfAttendance = ticket.attendee.answers.yearsOfAttendance.split(',');
						} else {
							ticket.attendee.answers.yearsOfAttendance = [];
						}
					}

					return ticket.attendee;
				});

				var childAttendees = _.filter(attendees, function (ticket) {
					return ticket.type === 'CHILD';
				});
				childAttendees.forEach(function (child) {
					if (child.dob !== null) {
						child.dob = moment(child.dob, 'DD/MM/YYYY').toDate();
					}
				});
				commit('setChildAttendees', { childAttendees: childAttendees });

				var adultAttendees = _.filter(attendees, function (ticket) {
					return ticket.type === 'ADULT';
				});

				commit('setAdultAttendees', { adultAttendees: adultAttendees });

				var seniorAttendees = _.filter(attendees, function (ticket) {
					return ticket.type === 'SENIOR';
				});

				commit('setSeniorAttendees', { seniorAttendees: seniorAttendees });

				var carerAttendees = _.filter(attendees, function (ticket) {
					return ticket.type === 'CARER';
				});

				commit('setCarerAttendees', { carerAttendees: carerAttendees });

				resolve();
			}).catch(function (error) {
				__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWSB');
				console.error(error);
				reject(error);
			});
		});
	},
	loadTimeSlotPrices: function loadTimeSlotPrices(_ref3, _ref4) {
		var commit = _ref3.commit;
		var bookingId = _ref4.bookingId,
		    location = _ref4.location,
		    season = _ref4.season;

		return new Promise(function (resolve, reject) {
			__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('mmb/bookings/' + bookingId + '/price?location=' + location + '&season=' + season).then(function (response) {
				var currencyProperties = ['adultPrice', 'seniorPrice', 'childPrice'];

				var timeSlot = response.data;

				currencyProperties.forEach(function (property) {
					if (timeSlot[property] && timeSlot[property].length > 1) {
						timeSlot[property] = parseFloat(Math.round(timeSlot[property][1] * 100) / 100).toFixed(2);
					}
				});

				commit('setTimeSlotPrices', timeSlot);
				resolve();
			}).catch(function (error) {
				__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWSN');
				console.error(error);
				reject(error);
			});
		});
	},
	reserveAdditionalTickets: function reserveAdditionalTickets(_ref5, _ref6) {
		var commit = _ref5.commit;
		var bookingId = _ref6.bookingId,
		    adults = _ref6.adults,
		    seniors = _ref6.seniors,
		    children = _ref6.children,
		    infants = _ref6.infants,
		    carers = _ref6.carers,
		    wheelchairs = _ref6.wheelchairs,
		    extras = _ref6.extras;

		sessionStorage.setItem('mmb__reserveAdditionalTickets', JSON.stringify({ bookingId: bookingId, adults: adults, seniors: seniors, children: children, infants: infants, carers: carers, wheelchairs: wheelchairs, extras: extras }));

		commit('setAdditionalTickets', { adults: adults, seniors: seniors, children: children, infants: infants, carers: carers, wheelchairs: wheelchairs });
		if (extras && extras.length > 0) {
			extras.forEach(function (extra) {
				commit('setAdditionalExtras', extra);
			});
		}

		return new Promise(function (resolve, reject) {
			var tickets = 'adults.' + adults + '-seniors.' + seniors + '-children.' + children + '-infants.' + infants + '-carers.' + carers + '-wheelchairs.' + wheelchairs;

			__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('mmb/checkout/' + bookingId + '/additionalTickets', {
				params: {
					tickets: tickets,
					extras: _.map(extras, function (extra) {
						return extra.qty + '.' + extra.id;
					}).join('-')
				}
			}).then(function (response) {

				if (response.data.message && response.data.message === 'Skipped payment and completed booking with 0 cost') {
					return resolve('Skipped payment and completed booking with 0 cost');
				}

				response.data.reservationView = response.data.reservation;

				commit('setCheckout', response.data);
				commit('setReservationId', response.data.reservationView.id);
				commit('setReservationExpiry', response.data.reservationView.validUntil);

				resolve();
			}).catch(function (error) {
				__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty("Sorry, there are no tickets of this type available for this tour date.", false, false, 'alert', false);
				console.log(error);

				reject(error);
			});
		});
	},
	recoverAdditionalTickets: function recoverAdditionalTickets(_ref7) {
		var dispatch = _ref7.dispatch;

		var params = JSON.parse(sessionStorage.getItem('mmb__reserveAdditionalTickets'));
		sessionStorage.setItem('mmb__reserveAdditionalTickets', null);

		return dispatch('reserveAdditionalTickets', params);
	},
	orderAdditionalTickets: function orderAdditionalTickets(_ref8, _ref9) {
		var commit = _ref8.commit,
		    getters = _ref8.getters;
		var children = _ref9.children,
		    _ref9$isTransfer = _ref9.isTransfer,
		    isTransfer = _ref9$isTransfer === undefined ? false : _ref9$isTransfer;

		var checkout = getters.checkout;
		var customer = getters.getMyDetails;
		var extras = getters.getAdditionalExtras;

		children = _.map(children, function (child) {
			return child.name;
		});

		return new Promise(function (resolve, reject) {
			__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].post('mmb/orders', {
				reservationId: checkout.reservation.id,
				largeBooking: false,
				purchasedExtras: _.map(extras, function (extra) {
					return extra.qty + '.' + extra.id;
				}).join('-'),
				isAdditionalTicketCheckout: false,
				orderView: {
					paymentReference: checkout.paymentRequestParameters.transactionId,
					customerId: customer.id.toString(),
					firstName: customer.firstName,
					lastName: customer.lastName,
					emailAddress: customer.emailAddress,
					telephone: customer.telephone,
					childDetails: children.join(','),
					addressLine1: customer.address1,
					addressLine2: customer.address2,
					city: customer.city,
					postCode: customer.postCode,
					country: customer.country.countryCodeAlpha2,
					amountPaid: ['GBP', parseFloat(checkout.grandTotal)],
					originalAmountPaid: isTransfer ? null : parseFloat(checkout.grandTotal).toFixed(2),
					discountCode: '',
					referrerReasonId: 0
				}
			}).then(function (response) {
				commit('setOrder', response.data);
				resolve();
			}).catch(function (error) {
				__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWSM');
				console.error(error);
				reject(error);
			});
		});
	},
	confirmAdditionalTickets: function confirmAdditionalTickets(_ref10, _ref11) {
		var commit = _ref10.commit,
		    getters = _ref10.getters;
		var transactionId = _ref11.transactionId,
		    hash = _ref11.hash,
		    bookingId = _ref11.bookingId;

		var booking = getters.getBooking;
		if (bookingId) {
			booking = { id: bookingId };
		}
		var reservationId = getters.getReservationId;

		return new Promise(function (resolve, reject) {
			__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('mmb/checkout/' + booking.id + '/additionalTickets/confirm/' + reservationId, {
				params: {
					transactionId: transactionId,
					responseCode: 'OK',
					hash: hash
				}
			}).then(function (response) {
				commit('setReservationId', null);
				resolve();
			}).catch(function (error) {
				__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWSA');
				console.error(error);
				reject(error);
			});
		});
	},
	reserveAdditionalExtras: function reserveAdditionalExtras(_ref12, _ref13) {
		var commit = _ref12.commit;
		var bookingId = _ref13.bookingId,
		    extras = _ref13.extras;

		sessionStorage.setItem('mmb__reserveAdditionalExtras', JSON.stringify({ bookingId: bookingId, extras: extras }));

		return new Promise(function (resolve, reject) {
			__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('mmb/checkout/' + bookingId + '/additionalExtras', {
				params: {
					extras: _.map(extras, function (extra) {
						return extra.qty + '.' + extra.id;
					}).join('-')
				}
			}).then(function (response) {
				commit('setCheckout', response.data);
				commit('setReservationId', response.data.reserveReq);

				resolve(response);
			}).catch(function (error) {
				__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWSS');
				console.error(error);
				reject(error);
			});
		});
	},
	recoverAdditionalExtras: function recoverAdditionalExtras(_ref14) {
		var dispatch = _ref14.dispatch,
		    state = _ref14.state;

		var params = JSON.parse(sessionStorage.getItem('mmb__reserveAdditionalExtras'));
		sessionStorage.setItem('mmb__reserveAdditionalExtras', null);

		state.additionalExtras = params.extras;

		return dispatch('reserveAdditionalExtras', params);
	},
	orderAdditionalExtras: function orderAdditionalExtras(_ref15) {
		var commit = _ref15.commit,
		    getters = _ref15.getters;

		var reservationId = getters.getReservationId;
		var checkout = getters.checkout;
		var children = _.map(getters.getChildAttendees, function (child) {
			return child.firstName;
		});
		var customer = getters.getMyDetails;
		var extras = getters.getAdditionalExtras;

		return new Promise(function (resolve, reject) {
			__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].post('mmb/orders', {
				reservationId: reservationId,
				largeBooking: false,
				purchasedExtras: _.map(extras, function (extra) {
					return extra.qty + '.' + extra.id;
				}).join('-'),
				isAdditionalTicketCheckout: false,
				orderView: {
					paymentReference: checkout.paymentRequestParameters.transactionId,
					customerId: customer.id.toString(),
					firstName: customer.firstName,
					lastName: customer.lastName,
					emailAddress: customer.emailAddress,
					telephone: customer.telephone,
					childDetails: children.join(','),
					addressLine1: customer.address1,
					addressLine2: customer.address2,
					city: customer.city,
					postCode: customer.postCode,
					country: customer.country.countryCodeAlpha2,
					amountPaid: ['GBP', parseFloat(checkout.grandTotal)],
					originalAmountPaid: parseFloat(checkout.grandTotal).toFixed(2),
					discountCode: '',
					referrerReasonId: 0
				}
			}).then(function (response) {
				commit('setOrder', response.data);
				resolve();
			}).catch(function (error) {
				__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWSD');
				console.error(error);
				reject(error);
			});
		});
	},
	confirmAdditionalExtras: function confirmAdditionalExtras(_ref16, _ref17) {
		var commit = _ref16.commit,
		    getters = _ref16.getters;
		var transactionId = _ref17.transactionId,
		    hash = _ref17.hash,
		    bookingId = _ref17.bookingId;

		var booking = getters.getBooking;
		if (bookingId) {
			booking = { id: bookingId };
		}
		var reservationId = getters.getReservationId;

		return new Promise(function (resolve, reject) {
			__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('mmb/checkout/' + booking.id + '/additionalExtras/confirm/' + reservationId, {
				params: {
					transactionId: transactionId,
					responseCode: 'OK',
					hash: hash
				}
			}).then(function (response) {
				commit('setReservationId', null);
				resolve();
			}).catch(function (error) {
				__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWSF');
				console.error(error);
				reject(error);
			});
		});
	},
	reserveTransfer: function reserveTransfer(_ref18) {
		var commit = _ref18.commit,
		    dispatch = _ref18.dispatch,
		    getters = _ref18.getters;

		var booking = getters.getBooking;
		var location = getters.location;
		var season = getters.season;
		var transferDate = moment(getters.day.date).format('YYYY-MM-DD');
		var transferTime = getters.slot.time;
		var reservationId = getters.slot.id;

		sessionStorage.setItem('mmb__reserveTransfer', JSON.stringify({
			booking: booking,
			location: location,
			season: season,
			day: getters.day,
			slot: getters.slot
		}));

		return new Promise(function (resolve, reject) {
			__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('mmb/checkout/' + booking.id + '/transfer/' + location + '/' + season + '/' + transferDate + '/' + transferTime, {
				params: {
					reservationId: reservationId
				}
			}).then(function (response) {
				var paymentRequired = _.has(response.data, 'paymentGatewayUrl');

				response.data.reservationView = response.data.reservation;

				if (paymentRequired) {

					commit('setCheckout', response.data);
					commit('setReservationId', response.data.reservationView.id);
					commit('setReservationExpiry', response.data.reservationView.validUntil);
				} else {
					booking.bookedDate = response.data.reservationView.date;
					booking.bookedTime = response.data.reservationView.time;
					commit('setBooking', { booking: booking });

					var bookings = getters.getBookings;
					_.remove(bookings, { id: booking.id });
					bookings.push(booking);
					commit('setBookings', { bookings: bookings });

					setTimeout(function () {
						dispatch('loadBookings');
					}, 300);
				}

				resolve(paymentRequired);
			}).catch(function (error) {
				__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWSG');
				console.error(error);
				reject(error);
			});
		});
	},
	recoverTransfer: function recoverTransfer(_ref19) {
		var commit = _ref19.commit;

		var params = JSON.parse(sessionStorage.getItem('mmb__reserveTransfer'));
		sessionStorage.setItem('mmb__reserveTransfer', null);

		var booking = params.booking;
		var location = params.location;
		var season = params.season;
		var day = params.day;
		var slot = params.slot;
		var reservationId = slot.id;

		commit('setBooking', booking);
		commit('location', location);
		commit('season', season);
		commit('day', day);
		commit('slot', slot);

		return new Promise(function (resolve, reject) {
			__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('mmb/transfer/retry/' + reservationId).then(function (response) {
				response.data.reservationView = response.data.reservation;

				commit('setCheckout', response.data);
				commit('setReservationId', response.data.reservationView.id);
				commit('setReservationExpiry', response.data.reservationView.validUntil);

				resolve(response);
			}).catch(function (error) {
				__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWSH');
				console.error(error);
				reject(error);
			});
		});
	},
	confirmTransfer: function confirmTransfer(_ref20, _ref21) {
		var commit = _ref20.commit,
		    getters = _ref20.getters;
		var transactionId = _ref21.transactionId,
		    hash = _ref21.hash,
		    bookingId = _ref21.bookingId;

		var booking = getters.getBooking;
		if (bookingId) {
			booking = { id: bookingId };
		}
		var reservationId = getters.getReservationId;

		return new Promise(function (resolve, reject) {
			__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('mmb/checkout/' + booking.id + '/transfer/confirm/' + reservationId, {
				params: {
					transactionId: transactionId,
					responseCode: 'OK',
					hash: hash
				}
			}).then(function (response) {
				commit('setReservationId', null);
				resolve();
			}).catch(function (error) {
				__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWSJ');
				console.error(error);
				reject(error);
			});
		});
	},
	updateAttendee: function updateAttendee(_ref22, _ref23) {
		var dispatch = _ref22.dispatch;
		var bookingId = _ref23.bookingId,
		    attendee = _ref23.attendee,
		    booking = _ref23.booking;

		var ticketId = attendee.ticketId;

		attendee = _.omit(attendee, ['ticketId']);
		if (attendee.dob) {
			attendee.dob = moment(attendee.dob).format('DD/MM/Y');
		}
		if (attendee.answers) {
			attendee.answers.yearsOfAttendance = attendee.answers.yearsOfAttendance.join(',');
		}

		attendee.booking = booking;
		if (attendee.relationship && attendee.relationship.value) {
			attendee.relationship = attendee.relationship.value;
		}
		return new Promise(function (resolve, reject) {
			__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].post('mmb/bookings/' + bookingId + '/tickets/' + ticketId + '/attendee', attendee).then(function (response) {
				dispatch('loadTickets', bookingId);
				resolve();
			}).catch(function (error) {
				__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWSK');
				console.error(error);
				reject(error);
			});
		});
	},
	linkUnlinkPerson: function linkUnlinkPerson(_ref24, _ref25) {
		var dispatch = _ref24.dispatch;
		var bookingId = _ref25.bookingId,
		    ticketId = _ref25.ticketId,
		    link = _ref25.link;

		var endpoint = 'linkBookerDetails';
		if (link) {
			endpoint = 'unlinkBookerDetails';
		}
		return new Promise(function (resolve, reject) {
			__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].post('mmb/bookings/' + bookingId + '/tickets/' + ticketId + '/' + endpoint).then(function (response) {
				dispatch('loadTickets', bookingId);
				resolve();
			}).catch(function (error) {
				__WEBPACK_IMPORTED_MODULE_1__noty__["a" /* default */].displayNoty(error.message ? error.message : '', error.stack, 'QAZWSL');
				console.error(error);
				reject(error);
			});
		});
	}
};

var mutations = {
	setBookings: function setBookings(state, _ref26) {
		var bookings = _ref26.bookings;

		state.bookings = bookings;
	},
	setBooking: function setBooking(state, _ref27) {
		var booking = _ref27.booking;

		state.booking = booking;
		sessionStorage.setItem('mmb__bookingId', state.booking.id);
	},
	setTickets: function setTickets(state, _ref28) {
		var tickets = _ref28.tickets;

		state.tickets = tickets;
	},
	setChildAttendees: function setChildAttendees(state, _ref29) {
		var childAttendees = _ref29.childAttendees;

		state.childAttendees = childAttendees;
	},
	setAdultAttendees: function setAdultAttendees(state, _ref30) {
		var adultAttendees = _ref30.adultAttendees;

		state.adultAttendees = adultAttendees;
	},
	setCarerAttendees: function setCarerAttendees(state, _ref31) {
		var carerAttendees = _ref31.carerAttendees;

		state.carerAttendees = carerAttendees;
	},
	setSeniorAttendees: function setSeniorAttendees(state, _ref32) {
		var seniorAttendees = _ref32.seniorAttendees;

		state.seniorAttendees = seniorAttendees;
	},
	setTimeSlotPrices: function setTimeSlotPrices(state, _ref33) {
		var adultPrice = _ref33.adultPrice,
		    seniorPrice = _ref33.seniorPrice,
		    childPrice = _ref33.childPrice;

		state.adultPrice = adultPrice;
		state.seniorPrice = seniorPrice;
		state.childPrice = childPrice;
	},
	setAdditionalTickets: function setAdditionalTickets(state, _ref34) {
		var adults = _ref34.adults,
		    seniors = _ref34.seniors,
		    children = _ref34.children,
		    infants = _ref34.infants,
		    carers = _ref34.carers,
		    wheelchairs = _ref34.wheelchairs;

		state.additionalTickets = { adults: adults, seniors: seniors, children: children, infants: infants, carers: carers, wheelchairs: wheelchairs };
	},
	setAdditionalExtras: function setAdditionalExtras(state, extra) {
		var currentExtra = _.find(state.additionalExtras, { id: extra.id });
		var workedOutPrice = extra.price / extra.multiple * extra.selectedValue;

		if (currentExtra) {
			currentExtra.qty += extra.selectedValue;
			currentExtra.totalExtraPrice = parseFloat(parseFloat(currentExtra.totalExtraPrice) + workedOutPrice).toFixed(2);
		} else {
			var shallowExtra = _.cloneDeep(extra);
			shallowExtra.qty = extra.selectedValue;
			shallowExtra.totalExtraPrice = parseFloat(workedOutPrice).toFixed(2);
			state.additionalExtras.push(shallowExtra);
		}
	},
	removeAdditionalExtra: function removeAdditionalExtra(state, id) {
		state.additionalExtras = _.reject(state.additionalExtras, { id: id });
	},
	clearAdditionalTickets: function clearAdditionalTickets(state) {
		state.additionalTickets = [];
	},
	clearAdditionalExtras: function clearAdditionalExtras(state) {
		state.additionalExtras = [];
	},
	markAdultAsChanged: function markAdultAsChanged(state, id) {
		var adult = _.find(state.adultAttendees, { id: id });
		if (adult) {
			adult.changed = true;
		}
	},
	resetAdultsAsChanged: function resetAdultsAsChanged(state) {
		state.adultAttendees.forEach(function (adult) {
			adult.changed = false;
		});
	}
};

var getters = {
	getBookings: function getBookings(state) {
		return state.bookings;
	},
	getBooking: function getBooking(state) {
		if (state.booking.id === 0) {
			var bookingId = sessionStorage.getItem('mmb__bookingId');
			var booking = _.find(state.bookings, { id: parseInt(bookingId) });

			if (booking) {
				state.booking = booking;
			}
		}

		return state.booking;
	},
	getChildAttendees: function getChildAttendees(state) {
		return state.childAttendees;
	},
	getAdultAttendees: function getAdultAttendees(state) {
		return state.adultAttendees;
	},
	getSeniorAttendees: function getSeniorAttendees(state) {
		return state.seniorAttendees;
	},
	getCarerAttendees: function getCarerAttendees(state) {
		return state.carerAttendees;
	},
	getAdultPrice: function getAdultPrice(state) {
		return state.adultPrice;
	},
	getSeniorPrice: function getSeniorPrice(state) {
		return state.seniorPrice;
	},
	getChildPrice: function getChildPrice(state) {
		return state.childPrice;
	},
	getAdditionalTickets: function getAdditionalTickets(state) {
		return state.additionalTickets;
	},
	getAdditionalExtras: function getAdditionalExtras(state) {
		return state.additionalExtras;
	}
};

/* harmony default export */ __webpack_exports__["a"] = ({
	state: state,
	getters: getters,
	actions: actions,
	mutations: mutations
});

/***/ }),
/* 114 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var state = {
    errorCode: '',
    errorMessage: '',
    validationErrors: ''
};

var actions = {};

var mutations = {
    setError: function setError(state, error) {
        state.errorCode = error.errorCode;
        state.errorMessage = error.errorMessage;
        state.validationErrors = error.validationErrors;
    }
};

var getters = {
    getError: function getError(state) {
        return {
            errorCode: state.errorCode,
            errorMessage: state.errorMessage,
            validationErrors: state.validationErrors,
            exists: function exists() {
                return this.errorCode !== '';
            }
        };
    }
};

/* harmony default export */ __webpack_exports__["a"] = ({
    state: state,
    getters: getters,
    actions: actions,
    mutations: mutations
});

/***/ }),
/* 115 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(38);


var state = {
    id: 0,
    title: '',
    firstName: '',
    lastName: '',
    emailAddress: '',
    telephone: '',
    address1: '',
    address2: '',
    city: '',
    postCode: '',
    information: '',
    country: {
        id: 0,
        name: '',
        countryCodeAlpha2: '',
        countryCodeAlpha3: '',
        countryCodeNumeric: null,
        sortOrder: 0
    }
};

var actions = {
    loadMyDetails: function loadMyDetails(_ref) {
        var commit = _ref.commit;

        return new Promise(function (resolve, reject) {
            __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].get('my-details/me').then(function (response) {
                commit('setMyDetails', response.data);

                resolve(response);
            }).catch(function (error) {
                console.error(error);
                reject(error);
            });
        });
    },
    updateMyDetails: function updateMyDetails(_ref2, myDetails) {
        var dispatch = _ref2.dispatch;

        return new Promise(function (resolve, reject) {
            __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].put('my-details/me', myDetails).then(function (response) {
                dispatch('loadMyDetails');
                resolve();
            }).catch(function (error) {
                console.error(error);
                reject(error);
            });
        });
    },
    changePassword: function changePassword(_ref3, _ref4) {
        var dispatch = _ref3.dispatch;
        var currentPassword = _ref4.currentPassword,
            newPassword = _ref4.newPassword,
            confirmPassword = _ref4.confirmPassword;

        return new Promise(function (resolve, reject) {
            __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].put('my-details/password/change', {
                password: currentPassword,
                newPassword: newPassword,
                confirmPassword: confirmPassword
            }).then(function (response) {
                resolve();
            }).catch(function (error) {
                console.error(error);
                reject(error);
            });
        });
    }
};

var mutations = {
    setMyDetails: function setMyDetails(state, details) {
        state.id = details.id;
        state.title = details.title;
        state.firstName = details.firstName;
        state.lastName = details.lastName;
        state.emailAddress = details.emailAddress;
        state.telephone = details.telephone;
        state.address1 = details.address1;
        state.address2 = details.address2;
        state.city = details.city;
        state.postCode = details.postCode;
        state.information = details.information;
        state.country = details.country;
    }
};

var getters = {
    getMyDetails: function getMyDetails(state) {
        return {
            id: state.id,
            title: state.title,
            firstName: state.firstName,
            lastName: state.lastName,
            emailAddress: state.emailAddress,
            telephone: state.telephone,
            address1: state.address1,
            address2: state.address2,
            city: state.city,
            postCode: state.postCode,
            information: state.information,
            country: state.country,
            exists: function exists() {
                return this.id !== 0;
            }
        };
    }
};

/* harmony default export */ __webpack_exports__["a"] = ({
    state: state,
    getters: getters,
    actions: actions,
    mutations: mutations
});

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, j, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr(len * 3 / 4 - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(30)
var Transform = __webpack_require__(12)
var inherits = __webpack_require__(1)
var modes = __webpack_require__(31)
var StreamCipher = __webpack_require__(70)
var AuthCipher = __webpack_require__(63)
var ebtk = __webpack_require__(34)

inherits(Decipher, Transform)
function Decipher (mode, key, iv) {
  if (!(this instanceof Decipher)) {
    return new Decipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}
Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}
function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }
  return null
}
Splitter.prototype.flush = function () {
  if (this.cache.length) {
    return this.cache
  }
}
function unpad (last) {
  var padded = last[15]
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) {
    return
  }
  return last.slice(0, 16 - padded)
}

var modelist = {
  ECB: __webpack_require__(68),
  CBC: __webpack_require__(64),
  CFB: __webpack_require__(65),
  CFB8: __webpack_require__(67),
  CFB1: __webpack_require__(66),
  OFB: __webpack_require__(69),
  CTR: __webpack_require__(32),
  GCM: __webpack_require__(32)
}

function createDecipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv, true)
  }
  return new Decipher(modelist[config.mode], password, iv)
}

function createDecipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}
exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(30)
var Transform = __webpack_require__(12)
var inherits = __webpack_require__(1)
var modes = __webpack_require__(31)
var ebtk = __webpack_require__(34)
var StreamCipher = __webpack_require__(70)
var AuthCipher = __webpack_require__(63)
inherits(Cipher, Transform)
function Cipher (mode, key, iv) {
  if (!(this instanceof Cipher)) {
    return new Cipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}
Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}
Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = new Buffer(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }
  var out = Buffer.concat([this.cache, padBuff])
  return out
}
var modelist = {
  ECB: __webpack_require__(68),
  CBC: __webpack_require__(64),
  CFB: __webpack_require__(65),
  CFB8: __webpack_require__(67),
  CFB1: __webpack_require__(66),
  OFB: __webpack_require__(69),
  CTR: __webpack_require__(32),
  GCM: __webpack_require__(32)
}

function createCipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv)
  }
  return new Cipher(modelist[config.mode], password, iv)
}
function createCipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var zeros = new Buffer(16)
zeros.fill(0)
module.exports = GHASH
function GHASH (key) {
  this.h = key
  this.state = new Buffer(16)
  this.state.fill(0)
  this.cache = new Buffer('')
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsb_Vi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - i % 8))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi = xor(Zi, Vi)
    }

    // Store the value of LSB(V_i)
    lsb_Vi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsb_Vi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}
GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}
GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, zeros], 16))
  }
  this.ghash(fromArray([
    0, abl,
    0, bl
  ]))
  return this.state
}

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}
function fromArray (out) {
  out = out.map(fixup_uint32)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}
var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function xor (a, b) {
  return [
    a[0] ^ b[0],
    a[1] ^ b[1],
    a[2] ^ b[2],
    a[3] ^ b[3]
  ]
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

var ebtk = __webpack_require__(34)
var aes = __webpack_require__(42)
var DES = __webpack_require__(121)
var desModes = __webpack_require__(122)
var aesModes = __webpack_require__(31)
function createCipher (suite, password) {
  var keyLen, ivLen
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}
function createDecipher (suite, password) {
  var keyLen, ivLen
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    return aes.createCipheriv(suite, key, iv)
  } else if (desModes[suite]) {
    return new DES({
      key: key,
      iv: iv,
      mode: suite
    })
  } else {
    throw new TypeError('invalid suite type')
  }
}
function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    return aes.createDecipheriv(suite, key, iv)
  } else if (desModes[suite]) {
    return new DES({
      key: key,
      iv: iv,
      mode: suite,
      decrypt: true
    })
  } else {
    throw new TypeError('invalid suite type')
  }
}
exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var CipherBase = __webpack_require__(12)
var des = __webpack_require__(46)
var inherits = __webpack_require__(1)

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return new Buffer(this._des.update(data))
}
DES.prototype._final = function () {
  return new Buffer(this._des.final())
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 122 */
/***/ (function(module, exports) {

exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(71)


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(13)
var stream = __webpack_require__(51)
var inherits = __webpack_require__(1)
var sign = __webpack_require__(125)
var verify = __webpack_require__(126)

var algorithms = __webpack_require__(71)
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = new Buffer(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = __webpack_require__(45)
var crt = __webpack_require__(43)
var EC = __webpack_require__(4).ec
var BN = __webpack_require__(3)
var parseKeys = __webpack_require__(35)
var curves = __webpack_require__(72)

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return new Buffer(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [ 0 ].concat(r)
  if (s[0] & 0x80) s = [ 0 ].concat(s)

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}

function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([ zeros, x ])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k).update(v).update(new Buffer([ 0 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(new Buffer([ 1 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([ zeros, out ])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = new Buffer(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([ t, kv.v ])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([ 0 ])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var BN = __webpack_require__(3)
var EC = __webpack_require__(4).ec
var parseKeys = __webpack_require__(35)
var curves = __webpack_require__(72)

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = new Buffer(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 127 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var elliptic = __webpack_require__(4);
var BN = __webpack_require__(3);

module.exports = function createECDH(curve) {
	return new ECDH(curve);
};

var aliases = {
	secp256k1: {
		name: 'secp256k1',
		byteLength: 32
	},
	secp224r1: {
		name: 'p224',
		byteLength: 28
	},
	prime256v1: {
		name: 'p256',
		byteLength: 32
	},
	prime192v1: {
		name: 'p192',
		byteLength: 24
	},
	ed25519: {
		name: 'ed25519',
		byteLength: 32
	},
	secp384r1: {
		name: 'p384',
		byteLength: 48
	},
	secp521r1: {
		name: 'p521',
		byteLength: 66
	}
};

aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
aliases.p384 = aliases.secp384r1;
aliases.p521 = aliases.secp521r1;

function ECDH(curve) {
	this.curveType = aliases[curve];
	if (!this.curveType ) {
		this.curveType = {
			name: curve
		};
	}
	this.curve = new elliptic.ec(this.curveType.name);
	this.keys = void 0;
}

ECDH.prototype.generateKeys = function (enc, format) {
	this.keys = this.curve.genKeyPair();
	return this.getPublicKey(enc, format);
};

ECDH.prototype.computeSecret = function (other, inenc, enc) {
	inenc = inenc || 'utf8';
	if (!Buffer.isBuffer(other)) {
		other = new Buffer(other, inenc);
	}
	var otherPub = this.curve.keyFromPublic(other).getPublic();
	var out = otherPub.mul(this.keys.getPrivate()).getX();
	return formatReturnValue(out, enc, this.curveType.byteLength);
};

ECDH.prototype.getPublicKey = function (enc, format) {
	var key = this.keys.getPublic(format === 'compressed', true);
	if (format === 'hybrid') {
		if (key[key.length - 1] % 2) {
			key[0] = 7;
		} else {
			key [0] = 6;
		}
	}
	return formatReturnValue(key, enc);
};

ECDH.prototype.getPrivateKey = function (enc) {
	return formatReturnValue(this.keys.getPrivate(), enc);
};

ECDH.prototype.setPublicKey = function (pub, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(pub)) {
		pub = new Buffer(pub, enc);
	}
	this.keys._importPublic(pub);
	return this;
};

ECDH.prototype.setPrivateKey = function (priv, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(priv)) {
		priv = new Buffer(priv, enc);
	}
	var _priv = new BN(priv);
	_priv = _priv.toString(16);
	this.keys._importPrivate(_priv);
	return this;
};

function formatReturnValue(bn, enc, len) {
	if (!Array.isArray(bn)) {
		bn = bn.toArray();
	}
	var buf = new Buffer(bn);
	if (len && buf.length < len) {
		var zeros = new Buffer(len - buf.length);
		zeros.fill(0);
		buf = Buffer.concat([zeros, buf]);
	}
	if (!enc) {
		return buf;
	} else {
		return buf.toString(enc);
	}
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var intSize = 4;
var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
var chrsz = 8;

function toArray(buf, bigEndian) {
  if ((buf.length % intSize) !== 0) {
    var len = buf.length + (intSize - (buf.length % intSize));
    buf = Buffer.concat([buf, zeroBuffer], len);
  }

  var arr = [];
  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
  for (var i = 0; i < buf.length; i += intSize) {
    arr.push(fn.call(buf, i));
  }
  return arr;
}

function toBuffer(arr, size, bigEndian) {
  var buf = new Buffer(size);
  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
  for (var i = 0; i < arr.length; i++) {
    fn.call(buf, arr[i], i * 4, true);
  }
  return buf;
}

function hash(buf, fn, hashSize, bigEndian) {
  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
  return toBuffer(arr, hashSize, bigEndian);
}
exports.hash = hash;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = __webpack_require__(26)
exports.createHash = exports.Hash = __webpack_require__(13)
exports.createHmac = exports.Hmac = __webpack_require__(45)

var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(__webpack_require__(123)))
exports.getHashes = function () {
  return hashes
}

var p = __webpack_require__(77)
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = __webpack_require__(120)
;[
  'Cipher',
  'createCipher',
  'Cipheriv',
  'createCipheriv',
  'Decipher',
  'createDecipher',
  'Decipheriv',
  'createDecipheriv',
  'getCiphers',
  'listCiphers'
].forEach(function (key) {
  exports[key] = aes[key]
})

var dh = __webpack_require__(136)
;[
  'DiffieHellmanGroup',
  'createDiffieHellmanGroup',
  'getDiffieHellman',
  'createDiffieHellman',
  'DiffieHellman'
].forEach(function (key) {
  exports[key] = dh[key]
})

var sign = __webpack_require__(124)
;[
  'createSign',
  'Sign',
  'createVerify',
  'Verify'
].forEach(function (key) {
  exports[key] = sign[key]
})

exports.createECDH = __webpack_require__(128)

var publicEncrypt = __webpack_require__(172)

;[
  'publicEncrypt',
  'privateEncrypt',
  'publicDecrypt',
  'privateDecrypt'
].forEach(function (key) {
  exports[key] = publicEncrypt[key]
})

// the least I can do is make error messages for the rest of the node.js/crypto api.
;[
  'createCredentials'
].forEach(function (name) {
  exports[name] = function () {
    throw new Error([
      'sorry, ' + name + ' is not implemented yet',
      'we accept pull requests',
      'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'))
  }
})


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(10);
var inherits = __webpack_require__(1);

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(10);

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(10);
var inherits = __webpack_require__(1);

var des = __webpack_require__(46);
var utils = des.utils;
var Cipher = des.Cipher;

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(10);
var inherits = __webpack_require__(1);

var des = __webpack_require__(46);
var Cipher = des.Cipher;
var DES = des.DES;

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var generatePrime = __webpack_require__(74)
var primes = __webpack_require__(138)

var DH = __webpack_require__(137)

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var BN = __webpack_require__(3);
var MillerRabin = __webpack_require__(75);
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = __webpack_require__(74);
var randomBytes = __webpack_require__(26);
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 138 */
/***/ (function(module, exports) {

module.exports = {
	"modp1": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
	},
	"modp2": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
	},
	"modp5": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
	},
	"modp14": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
	},
	"modp15": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
	},
	"modp16": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
	},
	"modp17": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
	},
	"modp18": {
		"gen": "02",
		"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
	}
};

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(3);
var elliptic = __webpack_require__(4);
var utils = elliptic.utils;
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(33);
var elliptic = __webpack_require__(4);
var BN = __webpack_require__(3);
var inherits = __webpack_require__(1);
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - 1) / (d y^2 + 1)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.one);
  var rhs = y2.redMul(this.d).redAdd(this.one);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
         this.y.cmp(this.z) === 0;
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
  return false;
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(33);
var BN = __webpack_require__(3);
var inherits = __webpack_require__(1);
var Base = curve.base;

var elliptic = __webpack_require__(4);
var utils = elliptic.utils;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(33);
var elliptic = __webpack_require__(4);
var BN = __webpack_require__(3);
var inherits = __webpack_require__(1);
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);

  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
  return false;
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curves = exports;

var hash = __webpack_require__(9);
var elliptic = __webpack_require__(4);

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new elliptic.curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new elliptic.curve.edwards(options);
  else
    this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = __webpack_require__(150);
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(3);
var HmacDRBG = __webpack_require__(158);
var elliptic = __webpack_require__(4);
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = __webpack_require__(145);
var Signature = __webpack_require__(146);

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(3);
var elliptic = __webpack_require__(4);
var utils = elliptic.utils;
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(3);

var elliptic = __webpack_require__(4);
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(9);
var elliptic = __webpack_require__(4);
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = __webpack_require__(148);
var Signature = __webpack_require__(149);

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = elliptic.curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = __webpack_require__(4);
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(3);
var elliptic = __webpack_require__(4);
var utils = elliptic.utils;
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;


/***/ }),
/* 150 */
/***/ (function(module, exports) {

module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;
var BN = __webpack_require__(3);
var minAssert = __webpack_require__(10);
var minUtils = __webpack_require__(76);

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.iushrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;



/***/ }),
/* 152 */
/***/ (function(module, exports) {

module.exports = {
	"name": "elliptic",
	"version": "6.4.0",
	"description": "EC cryptography",
	"main": "lib/elliptic.js",
	"files": [
		"lib"
	],
	"scripts": {
		"jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
		"jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
		"lint": "npm run jscs && npm run jshint",
		"unit": "istanbul test _mocha --reporter=spec test/index.js",
		"test": "npm run lint && npm run unit",
		"version": "grunt dist && git add dist/"
	},
	"repository": {
		"type": "git",
		"url": "git@github.com:indutny/elliptic"
	},
	"keywords": [
		"EC",
		"Elliptic",
		"curve",
		"Cryptography"
	],
	"author": "Fedor Indutny <fedor@indutny.com>",
	"license": "MIT",
	"bugs": {
		"url": "https://github.com/indutny/elliptic/issues"
	},
	"homepage": "https://github.com/indutny/elliptic",
	"devDependencies": {
		"brfs": "^1.4.3",
		"coveralls": "^2.11.3",
		"grunt": "^0.4.5",
		"grunt-browserify": "^5.0.0",
		"grunt-cli": "^1.2.0",
		"grunt-contrib-connect": "^1.0.0",
		"grunt-contrib-copy": "^1.0.0",
		"grunt-contrib-uglify": "^1.0.1",
		"grunt-mocha-istanbul": "^3.0.1",
		"grunt-saucelabs": "^8.6.2",
		"istanbul": "^0.4.2",
		"jscs": "^2.9.0",
		"jshint": "^2.6.0",
		"mocha": "^2.1.0"
	},
	"dependencies": {
		"bn.js": "^4.4.0",
		"brorand": "^1.0.1",
		"hash.js": "^1.0.0",
		"hmac-drbg": "^1.0.0",
		"inherits": "^2.0.1",
		"minimalistic-assert": "^1.0.0",
		"minimalistic-crypto-utils": "^1.0.0"
	}
};

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

var hash = __webpack_require__(9);
var utils = hash.utils;
var assert = utils.assert;

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

var hmac = exports;

var hash = __webpack_require__(9);
var utils = hash.utils;
var assert = utils.assert;

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

var hash = __webpack_require__(9);
var utils = hash.utils;

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = hash.common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

var hash = __webpack_require__(9);
var utils = hash.utils;
var assert = utils.assert;

var rotr32 = utils.rotr32;
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = hash.common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
exports.sha256 = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
             0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
exports.sha224 = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xf3bcc908,
             0xbb67ae85, 0x84caa73b,
             0x3c6ef372, 0xfe94f82b,
             0xa54ff53a, 0x5f1d36f1,
             0x510e527f, 0xade682d1,
             0x9b05688c, 0x2b3e6c1f,
             0x1f83d9ab, 0xfb41bd6b,
             0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
exports.sha512 = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(c0_hi, c0_lo,
                      c1_hi, c1_lo,
                      c2_hi, c2_lo,
                      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(c0_hi, c0_lo,
                          c1_hi, c1_lo,
                          c2_hi, c2_lo,
                          c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);

    var c0_hi = s0_512_hi(ah, al);
    var c0_lo = s0_512_lo(ah, al);
    var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [ 0xcbbb9d5d, 0xc1059ed8,
             0x629a292a, 0x367cd507,
             0x9159015a, 0x3070dd17,
             0x152fecd8, 0xf70e5939,
             0x67332667, 0xffc00b31,
             0x8eb44a87, 0x68581511,
             0xdb0c2e0d, 0x64f98fa7,
             0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
exports.sha384 = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,
             0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
exports.sha1 = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (var i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}

function p32(x, y, z) {
  return x ^ y ^ z;
}

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}

function ch64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

var utils = exports;
var inherits = __webpack_require__(1);

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
utils.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
utils.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
utils.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
utils.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
utils.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
utils.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
utils.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
utils.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
utils.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
utils.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
utils.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
utils.sum32_5 = sum32_5;

function assert(cond, msg) {
  if (!cond)
    throw new Error(msg || 'Assertion failed');
}
utils.assert = assert;

utils.inherits = inherits;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
};
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
};
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
};
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
};
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
};
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
};
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
};
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
};
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.shr64_lo = shr64_lo;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(9);
var utils = __webpack_require__(76);
var assert = __webpack_require__(10);

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};


/***/ }),
/* 159 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 160 */
/***/ (function(module, exports) {


var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

/* 
  @package NOTY - Dependency-free notification library 
  @version version: 3.1.3 
  @contributors https://github.com/needim/noty/graphs/contributors 
  @documentation Examples and Documentation - http://needim.github.com/noty 
  @license Licensed under the MIT licenses: http://www.opensource.org/licenses/mit-license.php 
*/

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Noty", [], factory);
	else if(typeof exports === 'object')
		exports["Noty"] = factory();
	else
		root["Noty"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.css = exports.deepExtend = exports.animationEndEvents = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.inArray = inArray;
exports.stopPropagation = stopPropagation;
exports.generateID = generateID;
exports.outerHeight = outerHeight;
exports.addListener = addListener;
exports.hasClass = hasClass;
exports.addClass = addClass;
exports.removeClass = removeClass;
exports.remove = remove;
exports.classList = classList;
exports.visibilityChangeFlow = visibilityChangeFlow;
exports.createAudioElements = createAudioElements;

var _api = __webpack_require__(1);

var API = _interopRequireWildcard(_api);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var animationEndEvents = exports.animationEndEvents = 'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend';

function inArray(needle, haystack, argStrict) {
  var key = void 0;
  var strict = !!argStrict;

  if (strict) {
    for (key in haystack) {
      if (haystack.hasOwnProperty(key) && haystack[key] === needle) {
        return true;
      }
    }
  } else {
    for (key in haystack) {
      if (haystack.hasOwnProperty(key) && haystack[key] === needle) {
        return true;
      }
    }
  }
  return false;
}

function stopPropagation(evt) {
  evt = evt || window.event;

  if (typeof evt.stopPropagation !== 'undefined') {
    evt.stopPropagation();
  } else {
    evt.cancelBubble = true;
  }
}

var deepExtend = exports.deepExtend = function deepExtend(out) {
  out = out || {};

  for (var i = 1; i < arguments.length; i++) {
    var obj = arguments[i];

    if (!obj) continue;

    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        if (Array.isArray(obj[key])) {
          out[key] = obj[key];
        } else if (_typeof(obj[key]) === 'object' && obj[key] !== null) {
          out[key] = deepExtend(out[key], obj[key]);
        } else {
          out[key] = obj[key];
        }
      }
    }
  }

  return out;
};

function generateID() {
  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  var id = 'noty_' + prefix + '_';

  id += 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var r = Math.random() * 16 | 0;
    var v = c === 'x' ? r : r & 0x3 | 0x8;
    return v.toString(16);
  });

  return id;
}

function outerHeight(el) {
  var height = el.offsetHeight;
  var style = window.getComputedStyle(el);

  height += parseInt(style.marginTop) + parseInt(style.marginBottom);
  return height;
}

var css = exports.css = function () {
  var cssPrefixes = ['Webkit', 'O', 'Moz', 'ms'];
  var cssProps = {};

  function camelCase(string) {
    return string.replace(/^-ms-/, 'ms-').replace(/-([\da-z])/gi, function (match, letter) {
      return letter.toUpperCase();
    });
  }

  function getVendorProp(name) {
    var style = document.body.style;
    if (name in style) return name;

    var i = cssPrefixes.length;
    var capName = name.charAt(0).toUpperCase() + name.slice(1);
    var vendorName = void 0;

    while (i--) {
      vendorName = cssPrefixes[i] + capName;
      if (vendorName in style) return vendorName;
    }

    return name;
  }

  function getStyleProp(name) {
    name = camelCase(name);
    return cssProps[name] || (cssProps[name] = getVendorProp(name));
  }

  function applyCss(element, prop, value) {
    prop = getStyleProp(prop);
    element.style[prop] = value;
  }

  return function (element, properties) {
    var args = arguments;
    var prop = void 0;
    var value = void 0;

    if (args.length === 2) {
      for (prop in properties) {
        if (properties.hasOwnProperty(prop)) {
          value = properties[prop];
          if (value !== undefined && properties.hasOwnProperty(prop)) {
            applyCss(element, prop, value);
          }
        }
      }
    } else {
      applyCss(element, args[1], args[2]);
    }
  };
}();

function addListener(el, events, cb) {
  var useCapture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  events = events.split(' ');
  for (var i = 0; i < events.length; i++) {
    if (document.addEventListener) {
      el.addEventListener(events[i], cb, useCapture);
    } else if (document.attachEvent) {
      el.attachEvent('on' + events[i], cb);
    }
  }
}

function hasClass(element, name) {
  var list = typeof element === 'string' ? element : classList(element);
  return list.indexOf(' ' + name + ' ') >= 0;
}

function addClass(element, name) {
  var oldList = classList(element);
  var newList = oldList + name;

  if (hasClass(oldList, name)) return;

  // Trim the opening space.
  element.className = newList.substring(1);
}

function removeClass(element, name) {
  var oldList = classList(element);
  var newList = void 0;

  if (!hasClass(element, name)) return;

  // Replace the class name.
  newList = oldList.replace(' ' + name + ' ', ' ');

  // Trim the opening and closing spaces.
  element.className = newList.substring(1, newList.length - 1);
}

function remove(element) {
  if (element.parentNode) {
    element.parentNode.removeChild(element);
  }
}

function classList(element) {
  return (' ' + (element && element.className || '') + ' ').replace(/\s+/gi, ' ');
}

function visibilityChangeFlow() {
  var hidden = void 0;
  var visibilityChange = void 0;
  if (typeof document.hidden !== 'undefined') {
    // Opera 12.10 and Firefox 18 and later support
    hidden = 'hidden';
    visibilityChange = 'visibilitychange';
  } else if (typeof document.msHidden !== 'undefined') {
    hidden = 'msHidden';
    visibilityChange = 'msvisibilitychange';
  } else if (typeof document.webkitHidden !== 'undefined') {
    hidden = 'webkitHidden';
    visibilityChange = 'webkitvisibilitychange';
  }

  function onVisibilityChange() {
    API.PageHidden = document[hidden];
    handleVisibilityChange();
  }

  function onBlur() {
    API.PageHidden = true;
    handleVisibilityChange();
  }

  function onFocus() {
    API.PageHidden = false;
    handleVisibilityChange();
  }

  function handleVisibilityChange() {
    if (API.PageHidden) stopAll();else resumeAll();
  }

  function stopAll() {
    setTimeout(function () {
      Object.keys(API.Store).forEach(function (id) {
        if (API.Store.hasOwnProperty(id)) {
          if (API.Store[id].options.visibilityControl) {
            API.Store[id].stop();
          }
        }
      });
    }, 100);
  }

  function resumeAll() {
    setTimeout(function () {
      Object.keys(API.Store).forEach(function (id) {
        if (API.Store.hasOwnProperty(id)) {
          if (API.Store[id].options.visibilityControl) {
            API.Store[id].resume();
          }
        }
      });
      API.queueRenderAll();
    }, 100);
  }

  addListener(document, visibilityChange, onVisibilityChange);
  addListener(window, 'blur', onBlur);
  addListener(window, 'focus', onFocus);
}

function createAudioElements(ref) {
  if (ref.hasSound) {
    var audioElement = document.createElement('audio');

    ref.options.sounds.sources.forEach(function (s) {
      var source = document.createElement('source');
      source.src = s;
      source.type = 'audio/' + getExtension(s);
      audioElement.appendChild(source);
    });

    if (ref.barDom) {
      ref.barDom.appendChild(audioElement);
    } else {
      document.querySelector('body').appendChild(audioElement);
    }

    audioElement.volume = ref.options.sounds.volume;

    if (!ref.soundPlayed) {
      audioElement.play();
      ref.soundPlayed = true;
    }

    audioElement.onended = function () {
      remove(audioElement);
    };
  }
}

function getExtension(fileName) {
  return fileName.match(/\.([^.]+)$/)[1];
}

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Defaults = exports.Store = exports.Queues = exports.DefaultMaxVisible = exports.docTitle = exports.DocModalCount = exports.PageHidden = undefined;
exports.getQueueCounts = getQueueCounts;
exports.addToQueue = addToQueue;
exports.removeFromQueue = removeFromQueue;
exports.queueRender = queueRender;
exports.queueRenderAll = queueRenderAll;
exports.ghostFix = ghostFix;
exports.build = build;
exports.hasButtons = hasButtons;
exports.handleModal = handleModal;
exports.handleModalClose = handleModalClose;
exports.queueClose = queueClose;
exports.dequeueClose = dequeueClose;
exports.fire = fire;
exports.openFlow = openFlow;
exports.closeFlow = closeFlow;

var _utils = __webpack_require__(0);

var Utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var PageHidden = exports.PageHidden = false;
var DocModalCount = exports.DocModalCount = 0;

var DocTitleProps = {
  originalTitle: null,
  count: 0,
  changed: false,
  timer: -1
};

var docTitle = exports.docTitle = {
  increment: function increment() {
    DocTitleProps.count++;

    docTitle._update();
  },

  decrement: function decrement() {
    DocTitleProps.count--;

    if (DocTitleProps.count <= 0) {
      docTitle._clear();
      return;
    }

    docTitle._update();
  },

  _update: function _update() {
    var title = document.title;

    if (!DocTitleProps.changed) {
      DocTitleProps.originalTitle = title;
      document.title = '(' + DocTitleProps.count + ') ' + title;
      DocTitleProps.changed = true;
    } else {
      document.title = '(' + DocTitleProps.count + ') ' + DocTitleProps.originalTitle;
    }
  },

  _clear: function _clear() {
    if (DocTitleProps.changed) {
      DocTitleProps.count = 0;
      document.title = DocTitleProps.originalTitle;
      DocTitleProps.changed = false;
    }
  }
};

var DefaultMaxVisible = exports.DefaultMaxVisible = 5;

var Queues = exports.Queues = {
  global: {
    maxVisible: DefaultMaxVisible,
    queue: []
  }
};

var Store = exports.Store = {};

var Defaults = exports.Defaults = {
  type: 'alert',
  layout: 'topRight',
  theme: 'mint',
  text: '',
  timeout: false,
  progressBar: true,
  closeWith: ['click'],
  animation: {
    open: 'noty_effects_open',
    close: 'noty_effects_close'
  },
  id: false,
  force: false,
  killer: false,
  queue: 'global',
  container: false,
  buttons: [],
  callbacks: {
    beforeShow: null,
    onShow: null,
    afterShow: null,
    onClose: null,
    afterClose: null,
    onClick: null,
    onHover: null,
    onTemplate: null
  },
  sounds: {
    sources: [],
    volume: 1,
    conditions: []
  },
  titleCount: {
    conditions: []
  },
  modal: false,
  visibilityControl: false

  /**
   * @param {string} queueName
   * @return {object}
   */
};function getQueueCounts() {
  var queueName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'global';

  var count = 0;
  var max = DefaultMaxVisible;

  if (Queues.hasOwnProperty(queueName)) {
    max = Queues[queueName].maxVisible;
    Object.keys(Store).forEach(function (i) {
      if (Store[i].options.queue === queueName && !Store[i].closed) count++;
    });
  }

  return {
    current: count,
    maxVisible: max
  };
}

/**
 * @param {Noty} ref
 * @return {void}
 */
function addToQueue(ref) {
  if (!Queues.hasOwnProperty(ref.options.queue)) {
    Queues[ref.options.queue] = { maxVisible: DefaultMaxVisible, queue: [] };
  }

  Queues[ref.options.queue].queue.push(ref);
}

/**
 * @param {Noty} ref
 * @return {void}
 */
function removeFromQueue(ref) {
  if (Queues.hasOwnProperty(ref.options.queue)) {
    var queue = [];
    Object.keys(Queues[ref.options.queue].queue).forEach(function (i) {
      if (Queues[ref.options.queue].queue[i].id !== ref.id) {
        queue.push(Queues[ref.options.queue].queue[i]);
      }
    });
    Queues[ref.options.queue].queue = queue;
  }
}

/**
 * @param {string} queueName
 * @return {void}
 */
function queueRender() {
  var queueName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'global';

  if (Queues.hasOwnProperty(queueName)) {
    var noty = Queues[queueName].queue.shift();

    if (noty) noty.show();
  }
}

/**
 * @return {void}
 */
function queueRenderAll() {
  Object.keys(Queues).forEach(function (queueName) {
    queueRender(queueName);
  });
}

/**
 * @param {Noty} ref
 * @return {void}
 */
function ghostFix(ref) {
  var ghostID = Utils.generateID('ghost');
  var ghost = document.createElement('div');
  ghost.setAttribute('id', ghostID);
  Utils.css(ghost, {
    height: Utils.outerHeight(ref.barDom) + 'px'
  });

  ref.barDom.insertAdjacentHTML('afterend', ghost.outerHTML);

  Utils.remove(ref.barDom);
  ghost = document.getElementById(ghostID);
  Utils.addClass(ghost, 'noty_fix_effects_height');
  Utils.addListener(ghost, Utils.animationEndEvents, function () {
    Utils.remove(ghost);
  });
}

/**
 * @param {Noty} ref
 * @return {void}
 */
function build(ref) {
  findOrCreateContainer(ref);

  var markup = '<div class="noty_body">' + ref.options.text + '</div>' + buildButtons(ref) + '<div class="noty_progressbar"></div>';

  ref.barDom = document.createElement('div');
  ref.barDom.setAttribute('id', ref.id);
  Utils.addClass(ref.barDom, 'noty_bar noty_type__' + ref.options.type + ' noty_theme__' + ref.options.theme);

  ref.barDom.innerHTML = markup;

  fire(ref, 'onTemplate');
}

/**
 * @param {Noty} ref
 * @return {boolean}
 */
function hasButtons(ref) {
  return !!(ref.options.buttons && Object.keys(ref.options.buttons).length);
}

/**
 * @param {Noty} ref
 * @return {string}
 */
function buildButtons(ref) {
  if (hasButtons(ref)) {
    var buttons = document.createElement('div');
    Utils.addClass(buttons, 'noty_buttons');

    Object.keys(ref.options.buttons).forEach(function (key) {
      buttons.appendChild(ref.options.buttons[key].dom);
    });

    ref.options.buttons.forEach(function (btn) {
      buttons.appendChild(btn.dom);
    });
    return buttons.outerHTML;
  }
  return '';
}

/**
 * @param {Noty} ref
 * @return {void}
 */
function handleModal(ref) {
  if (ref.options.modal) {
    if (DocModalCount === 0) {
      createModal(ref);
    }

    exports.DocModalCount = DocModalCount += 1;
  }
}

/**
 * @param {Noty} ref
 * @return {void}
 */
function handleModalClose(ref) {
  if (ref.options.modal && DocModalCount > 0) {
    exports.DocModalCount = DocModalCount -= 1;

    if (DocModalCount <= 0) {
      var modal = document.querySelector('.noty_modal');

      if (modal) {
        Utils.removeClass(modal, 'noty_modal_open');
        Utils.addClass(modal, 'noty_modal_close');
        Utils.addListener(modal, Utils.animationEndEvents, function () {
          Utils.remove(modal);
        });
      }
    }
  }
}

/**
 * @return {void}
 */
function createModal() {
  var body = document.querySelector('body');
  var modal = document.createElement('div');
  Utils.addClass(modal, 'noty_modal');
  body.insertBefore(modal, body.firstChild);
  Utils.addClass(modal, 'noty_modal_open');

  Utils.addListener(modal, Utils.animationEndEvents, function () {
    Utils.removeClass(modal, 'noty_modal_open');
  });
}

/**
 * @param {Noty} ref
 * @return {void}
 */
function findOrCreateContainer(ref) {
  if (ref.options.container) {
    ref.layoutDom = document.querySelector(ref.options.container);
    return;
  }

  var layoutID = 'noty_layout__' + ref.options.layout;
  ref.layoutDom = document.querySelector('div#' + layoutID);

  if (!ref.layoutDom) {
    ref.layoutDom = document.createElement('div');
    ref.layoutDom.setAttribute('id', layoutID);
    Utils.addClass(ref.layoutDom, 'noty_layout');
    document.querySelector('body').appendChild(ref.layoutDom);
  }
}

/**
 * @param {Noty} ref
 * @return {void}
 */
function queueClose(ref) {
  if (ref.options.timeout) {
    if (ref.options.progressBar && ref.progressDom) {
      Utils.css(ref.progressDom, {
        transition: 'width ' + ref.options.timeout + 'ms linear',
        width: '0%'
      });
    }

    clearTimeout(ref.closeTimer);

    ref.closeTimer = setTimeout(function () {
      ref.close();
    }, ref.options.timeout);
  }
}

/**
 * @param {Noty} ref
 * @return {void}
 */
function dequeueClose(ref) {
  if (ref.options.timeout && ref.closeTimer) {
    clearTimeout(ref.closeTimer);
    ref.closeTimer = -1;

    if (ref.options.progressBar && ref.progressDom) {
      Utils.css(ref.progressDom, {
        transition: 'width 0ms linear',
        width: '100%'
      });
    }
  }
}

/**
 * @param {Noty} ref
 * @param {string} eventName
 * @return {void}
 */
function fire(ref, eventName) {
  if (ref.listeners.hasOwnProperty(eventName)) {
    ref.listeners[eventName].forEach(function (cb) {
      if (typeof cb === 'function') {
        cb.apply(ref);
      }
    });
  }
}

/**
 * @param {Noty} ref
 * @return {void}
 */
function openFlow(ref) {
  fire(ref, 'afterShow');
  queueClose(ref);

  Utils.addListener(ref.barDom, 'mouseenter', function () {
    dequeueClose(ref);
  });

  Utils.addListener(ref.barDom, 'mouseleave', function () {
    queueClose(ref);
  });
}

/**
 * @param {Noty} ref
 * @return {void}
 */
function closeFlow(ref) {
  delete Store[ref.id];
  ref.closing = false;
  fire(ref, 'afterClose');

  Utils.remove(ref.barDom);

  if (ref.layoutDom.querySelectorAll('.noty_bar').length === 0 && !ref.options.container) {
    Utils.remove(ref.layoutDom);
  }

  if (Utils.inArray('docVisible', ref.options.titleCount.conditions) || Utils.inArray('docHidden', ref.options.titleCount.conditions)) {
    docTitle.decrement();
  }

  queueRender(ref.options.queue);
}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NotyButton = undefined;

var _utils = __webpack_require__(0);

var Utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NotyButton = exports.NotyButton = function NotyButton(html, classes, cb) {
  var _this = this;

  var attributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

  _classCallCheck(this, NotyButton);

  this.dom = document.createElement('button');
  this.dom.innerHTML = html;
  this.id = attributes.id = attributes.id || Utils.generateID('button');
  this.cb = cb;
  Object.keys(attributes).forEach(function (propertyName) {
    _this.dom.setAttribute(propertyName, attributes[propertyName]);
  });
  Utils.addClass(this.dom, classes || 'noty_btn');

  return this;
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Push = exports.Push = function () {
  function Push() {
    var workerPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/service-worker.js';

    _classCallCheck(this, Push);

    this.subData = {};
    this.workerPath = workerPath;
    this.listeners = {
      onPermissionGranted: [],
      onPermissionDenied: [],
      onSubscriptionSuccess: [],
      onSubscriptionCancel: [],
      onWorkerError: [],
      onWorkerSuccess: [],
      onWorkerNotSupported: []
    };
    return this;
  }

  /**
   * @param {string} eventName
   * @param {function} cb
   * @return {Push}
   */


  _createClass(Push, [{
    key: 'on',
    value: function on(eventName) {
      var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};

      if (typeof cb === 'function' && this.listeners.hasOwnProperty(eventName)) {
        this.listeners[eventName].push(cb);
      }

      return this;
    }
  }, {
    key: 'fire',
    value: function fire(eventName) {
      var _this = this;

      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      if (this.listeners.hasOwnProperty(eventName)) {
        this.listeners[eventName].forEach(function (cb) {
          if (typeof cb === 'function') {
            cb.apply(_this, params);
          }
        });
      }
    }
  }, {
    key: 'create',
    value: function create() {
      console.log('NOT IMPLEMENTED YET');
    }

    /**
     * @return {boolean}
     */

  }, {
    key: 'isSupported',
    value: function isSupported() {
      var result = false;

      try {
        result = window.Notification || window.webkitNotifications || navigator.mozNotification || window.external && window.external.msIsSiteMode() !== undefined;
      } catch (e) {}

      return result;
    }

    /**
     * @return {string}
     */

  }, {
    key: 'getPermissionStatus',
    value: function getPermissionStatus() {
      var perm = 'default';

      if (window.Notification && window.Notification.permissionLevel) {
        perm = window.Notification.permissionLevel;
      } else if (window.webkitNotifications && window.webkitNotifications.checkPermission) {
        switch (window.webkitNotifications.checkPermission()) {
          case 1:
            perm = 'default';
            break;
          case 0:
            perm = 'granted';
            break;
          default:
            perm = 'denied';
        }
      } else if (window.Notification && window.Notification.permission) {
        perm = window.Notification.permission;
      } else if (navigator.mozNotification) {
        perm = 'granted';
      } else if (window.external && window.external.msIsSiteMode() !== undefined) {
        perm = window.external.msIsSiteMode() ? 'granted' : 'default';
      }

      return perm.toString().toLowerCase();
    }

    /**
     * @return {string}
     */

  }, {
    key: 'getEndpoint',
    value: function getEndpoint(subscription) {
      var endpoint = subscription.endpoint;
      var subscriptionId = subscription.subscriptionId;

      // fix for Chrome < 45
      if (subscriptionId && endpoint.indexOf(subscriptionId) === -1) {
        endpoint += '/' + subscriptionId;
      }

      return endpoint;
    }

    /**
     * @return {boolean}
     */

  }, {
    key: 'isSWRegistered',
    value: function isSWRegistered() {
      try {
        return navigator.serviceWorker.controller.state === 'activated';
      } catch (e) {
        return false;
      }
    }

    /**
     * @return {void}
     */

  }, {
    key: 'unregisterWorker',
    value: function unregisterWorker() {
      var self = this;
      if ('serviceWorker' in navigator) {
        navigator.serviceWorker.getRegistrations().then(function (registrations) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = registrations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var registration = _step.value;

              registration.unregister();
              self.fire('onSubscriptionCancel');
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        });
      }
    }

    /**
     * @return {void}
     */

  }, {
    key: 'requestSubscription',
    value: function requestSubscription() {
      var _this2 = this;

      var userVisibleOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      var self = this;
      var current = this.getPermissionStatus();
      var cb = function cb(result) {
        if (result === 'granted') {
          _this2.fire('onPermissionGranted');

          if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register(_this2.workerPath).then(function () {
              navigator.serviceWorker.ready.then(function (serviceWorkerRegistration) {
                self.fire('onWorkerSuccess');
                serviceWorkerRegistration.pushManager.subscribe({
                  userVisibleOnly: userVisibleOnly
                }).then(function (subscription) {
                  var key = subscription.getKey('p256dh');
                  var token = subscription.getKey('auth');

                  self.subData = {
                    endpoint: self.getEndpoint(subscription),
                    p256dh: key ? window.btoa(String.fromCharCode.apply(null, new Uint8Array(key))) : null,
                    auth: token ? window.btoa(String.fromCharCode.apply(null, new Uint8Array(token))) : null
                  };

                  self.fire('onSubscriptionSuccess', [self.subData]);
                }).catch(function (err) {
                  self.fire('onWorkerError', [err]);
                });
              });
            });
          } else {
            self.fire('onWorkerNotSupported');
          }
        } else if (result === 'denied') {
          _this2.fire('onPermissionDenied');
          _this2.unregisterWorker();
        }
      };

      if (current === 'default') {
        if (window.Notification && window.Notification.requestPermission) {
          window.Notification.requestPermission(cb);
        } else if (window.webkitNotifications && window.webkitNotifications.checkPermission) {
          window.webkitNotifications.requestPermission(cb);
        }
      } else {
        cb(current);
      }
    }
  }]);

  return Push;
}();

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {var require;/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   4.1.0
 */

(function (global, factory) {
     true ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.ES6Promise = factory());
}(this, (function () { 'use strict';

function objectOrFunction(x) {
  return typeof x === 'function' || typeof x === 'object' && x !== null;
}

function isFunction(x) {
  return typeof x === 'function';
}

var _isArray = undefined;
if (!Array.isArray) {
  _isArray = function (x) {
    return Object.prototype.toString.call(x) === '[object Array]';
  };
} else {
  _isArray = Array.isArray;
}

var isArray = _isArray;

var len = 0;
var vertxNext = undefined;
var customSchedulerFn = undefined;

var asap = function asap(callback, arg) {
  queue[len] = callback;
  queue[len + 1] = arg;
  len += 2;
  if (len === 2) {
    // If len is 2, that means that we need to schedule an async flush.
    // If additional callbacks are queued before the queue is flushed, they
    // will be processed by this flush that we are scheduling.
    if (customSchedulerFn) {
      customSchedulerFn(flush);
    } else {
      scheduleFlush();
    }
  }
};

function setScheduler(scheduleFn) {
  customSchedulerFn = scheduleFn;
}

function setAsap(asapFn) {
  asap = asapFn;
}

var browserWindow = typeof window !== 'undefined' ? window : undefined;
var browserGlobal = browserWindow || {};
var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';

// test for web worker but not in IE10
var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

// node
function useNextTick() {
  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
  // see https://github.com/cujojs/when/issues/410 for details
  return function () {
    return process.nextTick(flush);
  };
}

// vertx
function useVertxTimer() {
  if (typeof vertxNext !== 'undefined') {
    return function () {
      vertxNext(flush);
    };
  }

  return useSetTimeout();
}

function useMutationObserver() {
  var iterations = 0;
  var observer = new BrowserMutationObserver(flush);
  var node = document.createTextNode('');
  observer.observe(node, { characterData: true });

  return function () {
    node.data = iterations = ++iterations % 2;
  };
}

// web worker
function useMessageChannel() {
  var channel = new MessageChannel();
  channel.port1.onmessage = flush;
  return function () {
    return channel.port2.postMessage(0);
  };
}

function useSetTimeout() {
  // Store setTimeout reference so es6-promise will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var globalSetTimeout = setTimeout;
  return function () {
    return globalSetTimeout(flush, 1);
  };
}

var queue = new Array(1000);
function flush() {
  for (var i = 0; i < len; i += 2) {
    var callback = queue[i];
    var arg = queue[i + 1];

    callback(arg);

    queue[i] = undefined;
    queue[i + 1] = undefined;
  }

  len = 0;
}

function attemptVertx() {
  try {
    var r = require;
    var vertx = __webpack_require__(9);
    vertxNext = vertx.runOnLoop || vertx.runOnContext;
    return useVertxTimer();
  } catch (e) {
    return useSetTimeout();
  }
}

var scheduleFlush = undefined;
// Decide what async method to use to triggering processing of queued callbacks:
if (isNode) {
  scheduleFlush = useNextTick();
} else if (BrowserMutationObserver) {
  scheduleFlush = useMutationObserver();
} else if (isWorker) {
  scheduleFlush = useMessageChannel();
} else if (browserWindow === undefined && "function" === 'function') {
  scheduleFlush = attemptVertx();
} else {
  scheduleFlush = useSetTimeout();
}

function then(onFulfillment, onRejection) {
  var _arguments = arguments;

  var parent = this;

  var child = new this.constructor(noop);

  if (child[PROMISE_ID] === undefined) {
    makePromise(child);
  }

  var _state = parent._state;

  if (_state) {
    (function () {
      var callback = _arguments[_state - 1];
      asap(function () {
        return invokeCallback(_state, child, callback, parent._result);
      });
    })();
  } else {
    subscribe(parent, child, onFulfillment, onRejection);
  }

  return child;
}

/**
  `Promise.resolve` returns a promise that will become resolved with the
  passed `value`. It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    resolve(1);
  });

  promise.then(function(value){
    // value === 1
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.resolve(1);

  promise.then(function(value){
    // value === 1
  });
  ```

  @method resolve
  @static
  @param {Any} value value that the returned promise will be resolved with
  Useful for tooling.
  @return {Promise} a promise that will become fulfilled with the given
  `value`
*/
function resolve(object) {
  /*jshint validthis:true */
  var Constructor = this;

  if (object && typeof object === 'object' && object.constructor === Constructor) {
    return object;
  }

  var promise = new Constructor(noop);
  _resolve(promise, object);
  return promise;
}

var PROMISE_ID = Math.random().toString(36).substring(16);

function noop() {}

var PENDING = void 0;
var FULFILLED = 1;
var REJECTED = 2;

var GET_THEN_ERROR = new ErrorObject();

function selfFulfillment() {
  return new TypeError("You cannot resolve a promise with itself");
}

function cannotReturnOwn() {
  return new TypeError('A promises callback cannot return that same promise.');
}

function getThen(promise) {
  try {
    return promise.then;
  } catch (error) {
    GET_THEN_ERROR.error = error;
    return GET_THEN_ERROR;
  }
}

function tryThen(then, value, fulfillmentHandler, rejectionHandler) {
  try {
    then.call(value, fulfillmentHandler, rejectionHandler);
  } catch (e) {
    return e;
  }
}

function handleForeignThenable(promise, thenable, then) {
  asap(function (promise) {
    var sealed = false;
    var error = tryThen(then, thenable, function (value) {
      if (sealed) {
        return;
      }
      sealed = true;
      if (thenable !== value) {
        _resolve(promise, value);
      } else {
        fulfill(promise, value);
      }
    }, function (reason) {
      if (sealed) {
        return;
      }
      sealed = true;

      _reject(promise, reason);
    }, 'Settle: ' + (promise._label || ' unknown promise'));

    if (!sealed && error) {
      sealed = true;
      _reject(promise, error);
    }
  }, promise);
}

function handleOwnThenable(promise, thenable) {
  if (thenable._state === FULFILLED) {
    fulfill(promise, thenable._result);
  } else if (thenable._state === REJECTED) {
    _reject(promise, thenable._result);
  } else {
    subscribe(thenable, undefined, function (value) {
      return _resolve(promise, value);
    }, function (reason) {
      return _reject(promise, reason);
    });
  }
}

function handleMaybeThenable(promise, maybeThenable, then$$) {
  if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {
    handleOwnThenable(promise, maybeThenable);
  } else {
    if (then$$ === GET_THEN_ERROR) {
      _reject(promise, GET_THEN_ERROR.error);
      GET_THEN_ERROR.error = null;
    } else if (then$$ === undefined) {
      fulfill(promise, maybeThenable);
    } else if (isFunction(then$$)) {
      handleForeignThenable(promise, maybeThenable, then$$);
    } else {
      fulfill(promise, maybeThenable);
    }
  }
}

function _resolve(promise, value) {
  if (promise === value) {
    _reject(promise, selfFulfillment());
  } else if (objectOrFunction(value)) {
    handleMaybeThenable(promise, value, getThen(value));
  } else {
    fulfill(promise, value);
  }
}

function publishRejection(promise) {
  if (promise._onerror) {
    promise._onerror(promise._result);
  }

  publish(promise);
}

function fulfill(promise, value) {
  if (promise._state !== PENDING) {
    return;
  }

  promise._result = value;
  promise._state = FULFILLED;

  if (promise._subscribers.length !== 0) {
    asap(publish, promise);
  }
}

function _reject(promise, reason) {
  if (promise._state !== PENDING) {
    return;
  }
  promise._state = REJECTED;
  promise._result = reason;

  asap(publishRejection, promise);
}

function subscribe(parent, child, onFulfillment, onRejection) {
  var _subscribers = parent._subscribers;
  var length = _subscribers.length;

  parent._onerror = null;

  _subscribers[length] = child;
  _subscribers[length + FULFILLED] = onFulfillment;
  _subscribers[length + REJECTED] = onRejection;

  if (length === 0 && parent._state) {
    asap(publish, parent);
  }
}

function publish(promise) {
  var subscribers = promise._subscribers;
  var settled = promise._state;

  if (subscribers.length === 0) {
    return;
  }

  var child = undefined,
      callback = undefined,
      detail = promise._result;

  for (var i = 0; i < subscribers.length; i += 3) {
    child = subscribers[i];
    callback = subscribers[i + settled];

    if (child) {
      invokeCallback(settled, child, callback, detail);
    } else {
      callback(detail);
    }
  }

  promise._subscribers.length = 0;
}

function ErrorObject() {
  this.error = null;
}

var TRY_CATCH_ERROR = new ErrorObject();

function tryCatch(callback, detail) {
  try {
    return callback(detail);
  } catch (e) {
    TRY_CATCH_ERROR.error = e;
    return TRY_CATCH_ERROR;
  }
}

function invokeCallback(settled, promise, callback, detail) {
  var hasCallback = isFunction(callback),
      value = undefined,
      error = undefined,
      succeeded = undefined,
      failed = undefined;

  if (hasCallback) {
    value = tryCatch(callback, detail);

    if (value === TRY_CATCH_ERROR) {
      failed = true;
      error = value.error;
      value.error = null;
    } else {
      succeeded = true;
    }

    if (promise === value) {
      _reject(promise, cannotReturnOwn());
      return;
    }
  } else {
    value = detail;
    succeeded = true;
  }

  if (promise._state !== PENDING) {
    // noop
  } else if (hasCallback && succeeded) {
      _resolve(promise, value);
    } else if (failed) {
      _reject(promise, error);
    } else if (settled === FULFILLED) {
      fulfill(promise, value);
    } else if (settled === REJECTED) {
      _reject(promise, value);
    }
}

function initializePromise(promise, resolver) {
  try {
    resolver(function resolvePromise(value) {
      _resolve(promise, value);
    }, function rejectPromise(reason) {
      _reject(promise, reason);
    });
  } catch (e) {
    _reject(promise, e);
  }
}

var id = 0;
function nextId() {
  return id++;
}

function makePromise(promise) {
  promise[PROMISE_ID] = id++;
  promise._state = undefined;
  promise._result = undefined;
  promise._subscribers = [];
}

function Enumerator(Constructor, input) {
  this._instanceConstructor = Constructor;
  this.promise = new Constructor(noop);

  if (!this.promise[PROMISE_ID]) {
    makePromise(this.promise);
  }

  if (isArray(input)) {
    this._input = input;
    this.length = input.length;
    this._remaining = input.length;

    this._result = new Array(this.length);

    if (this.length === 0) {
      fulfill(this.promise, this._result);
    } else {
      this.length = this.length || 0;
      this._enumerate();
      if (this._remaining === 0) {
        fulfill(this.promise, this._result);
      }
    }
  } else {
    _reject(this.promise, validationError());
  }
}

function validationError() {
  return new Error('Array Methods must be provided an Array');
};

Enumerator.prototype._enumerate = function () {
  var length = this.length;
  var _input = this._input;

  for (var i = 0; this._state === PENDING && i < length; i++) {
    this._eachEntry(_input[i], i);
  }
};

Enumerator.prototype._eachEntry = function (entry, i) {
  var c = this._instanceConstructor;
  var resolve$$ = c.resolve;

  if (resolve$$ === resolve) {
    var _then = getThen(entry);

    if (_then === then && entry._state !== PENDING) {
      this._settledAt(entry._state, i, entry._result);
    } else if (typeof _then !== 'function') {
      this._remaining--;
      this._result[i] = entry;
    } else if (c === Promise) {
      var promise = new c(noop);
      handleMaybeThenable(promise, entry, _then);
      this._willSettleAt(promise, i);
    } else {
      this._willSettleAt(new c(function (resolve$$) {
        return resolve$$(entry);
      }), i);
    }
  } else {
    this._willSettleAt(resolve$$(entry), i);
  }
};

Enumerator.prototype._settledAt = function (state, i, value) {
  var promise = this.promise;

  if (promise._state === PENDING) {
    this._remaining--;

    if (state === REJECTED) {
      _reject(promise, value);
    } else {
      this._result[i] = value;
    }
  }

  if (this._remaining === 0) {
    fulfill(promise, this._result);
  }
};

Enumerator.prototype._willSettleAt = function (promise, i) {
  var enumerator = this;

  subscribe(promise, undefined, function (value) {
    return enumerator._settledAt(FULFILLED, i, value);
  }, function (reason) {
    return enumerator._settledAt(REJECTED, i, reason);
  });
};

/**
  `Promise.all` accepts an array of promises, and returns a new promise which
  is fulfilled with an array of fulfillment values for the passed promises, or
  rejected with the reason of the first passed promise to be rejected. It casts all
  elements of the passed iterable to promises as it runs this algorithm.

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = resolve(2);
  let promise3 = resolve(3);
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // The array here would be [ 1, 2, 3 ];
  });
  ```

  If any of the `promises` given to `all` are rejected, the first promise
  that is rejected will be given as an argument to the returned promises's
  rejection handler. For example:

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = reject(new Error("2"));
  let promise3 = reject(new Error("3"));
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(error) {
    // error.message === "2"
  });
  ```

  @method all
  @static
  @param {Array} entries array of promises
  @param {String} label optional string for labeling the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled when all `promises` have been
  fulfilled, or rejected if any of them become rejected.
  @static
*/
function all(entries) {
  return new Enumerator(this, entries).promise;
}

/**
  `Promise.race` returns a new promise which is settled in the same way as the
  first passed promise to settle.

  Example:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 2');
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // result === 'promise 2' because it was resolved before promise1
    // was resolved.
  });
  ```

  `Promise.race` is deterministic in that only the state of the first
  settled promise matters. For example, even if other promises given to the
  `promises` array argument are resolved, but the first settled promise has
  become rejected before the other promises became fulfilled, the returned
  promise will become rejected:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      reject(new Error('promise 2'));
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // Code here never runs
  }, function(reason){
    // reason.message === 'promise 2' because promise 2 became rejected before
    // promise 1 became fulfilled
  });
  ```

  An example real-world use case is implementing timeouts:

  ```javascript
  Promise.race([ajax('foo.json'), timeout(5000)])
  ```

  @method race
  @static
  @param {Array} promises array of promises to observe
  Useful for tooling.
  @return {Promise} a promise which settles in the same way as the first passed
  promise to settle.
*/
function race(entries) {
  /*jshint validthis:true */
  var Constructor = this;

  if (!isArray(entries)) {
    return new Constructor(function (_, reject) {
      return reject(new TypeError('You must pass an array to race.'));
    });
  } else {
    return new Constructor(function (resolve, reject) {
      var length = entries.length;
      for (var i = 0; i < length; i++) {
        Constructor.resolve(entries[i]).then(resolve, reject);
      }
    });
  }
}

/**
  `Promise.reject` returns a promise rejected with the passed `reason`.
  It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    reject(new Error('WHOOPS'));
  });

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.reject(new Error('WHOOPS'));

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  @method reject
  @static
  @param {Any} reason value that the returned promise will be rejected with.
  Useful for tooling.
  @return {Promise} a promise rejected with the given `reason`.
*/
function reject(reason) {
  /*jshint validthis:true */
  var Constructor = this;
  var promise = new Constructor(noop);
  _reject(promise, reason);
  return promise;
}

function needsResolver() {
  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
}

function needsNew() {
  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
}

/**
  Promise objects represent the eventual result of an asynchronous operation. The
  primary way of interacting with a promise is through its `then` method, which
  registers callbacks to receive either a promise's eventual value or the reason
  why the promise cannot be fulfilled.

  Terminology
  -----------

  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
  - `thenable` is an object or function that defines a `then` method.
  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
  - `exception` is a value that is thrown using the throw statement.
  - `reason` is a value that indicates why a promise was rejected.
  - `settled` the final resting state of a promise, fulfilled or rejected.

  A promise can be in one of three states: pending, fulfilled, or rejected.

  Promises that are fulfilled have a fulfillment value and are in the fulfilled
  state.  Promises that are rejected have a rejection reason and are in the
  rejected state.  A fulfillment value is never a thenable.

  Promises can also be said to *resolve* a value.  If this value is also a
  promise, then the original promise's settled state will match the value's
  settled state.  So a promise that *resolves* a promise that rejects will
  itself reject, and a promise that *resolves* a promise that fulfills will
  itself fulfill.


  Basic Usage:
  ------------

  ```js
  let promise = new Promise(function(resolve, reject) {
    // on success
    resolve(value);

    // on failure
    reject(reason);
  });

  promise.then(function(value) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Advanced Usage:
  ---------------

  Promises shine when abstracting away asynchronous interactions such as
  `XMLHttpRequest`s.

  ```js
  function getJSON(url) {
    return new Promise(function(resolve, reject){
      let xhr = new XMLHttpRequest();

      xhr.open('GET', url);
      xhr.onreadystatechange = handler;
      xhr.responseType = 'json';
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.send();

      function handler() {
        if (this.readyState === this.DONE) {
          if (this.status === 200) {
            resolve(this.response);
          } else {
            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
          }
        }
      };
    });
  }

  getJSON('/posts.json').then(function(json) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Unlike callbacks, promises are great composable primitives.

  ```js
  Promise.all([
    getJSON('/posts'),
    getJSON('/comments')
  ]).then(function(values){
    values[0] // => postsJSON
    values[1] // => commentsJSON

    return values;
  });
  ```

  @class Promise
  @param {function} resolver
  Useful for tooling.
  @constructor
*/
function Promise(resolver) {
  this[PROMISE_ID] = nextId();
  this._result = this._state = undefined;
  this._subscribers = [];

  if (noop !== resolver) {
    typeof resolver !== 'function' && needsResolver();
    this instanceof Promise ? initializePromise(this, resolver) : needsNew();
  }
}

Promise.all = all;
Promise.race = race;
Promise.resolve = resolve;
Promise.reject = reject;
Promise._setScheduler = setScheduler;
Promise._setAsap = setAsap;
Promise._asap = asap;

Promise.prototype = {
  constructor: Promise,

  /**
    The primary way of interacting with a promise is through its `then` method,
    which registers callbacks to receive either a promise's eventual value or the
    reason why the promise cannot be fulfilled.
  
    ```js
    findUser().then(function(user){
      // user is available
    }, function(reason){
      // user is unavailable, and you are given the reason why
    });
    ```
  
    Chaining
    --------
  
    The return value of `then` is itself a promise.  This second, 'downstream'
    promise is resolved with the return value of the first promise's fulfillment
    or rejection handler, or rejected if the handler throws an exception.
  
    ```js
    findUser().then(function (user) {
      return user.name;
    }, function (reason) {
      return 'default name';
    }).then(function (userName) {
      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
      // will be `'default name'`
    });
  
    findUser().then(function (user) {
      throw new Error('Found user, but still unhappy');
    }, function (reason) {
      throw new Error('`findUser` rejected and we're unhappy');
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
    });
    ```
    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
  
    ```js
    findUser().then(function (user) {
      throw new PedagogicalException('Upstream error');
    }).then(function (value) {
      // never reached
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // The `PedgagocialException` is propagated all the way down to here
    });
    ```
  
    Assimilation
    ------------
  
    Sometimes the value you want to propagate to a downstream promise can only be
    retrieved asynchronously. This can be achieved by returning a promise in the
    fulfillment or rejection handler. The downstream promise will then be pending
    until the returned promise is settled. This is called *assimilation*.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // The user's comments are now available
    });
    ```
  
    If the assimliated promise rejects, then the downstream promise will also reject.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // If `findCommentsByAuthor` fulfills, we'll have the value here
    }, function (reason) {
      // If `findCommentsByAuthor` rejects, we'll have the reason here
    });
    ```
  
    Simple Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let result;
  
    try {
      result = findResult();
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
    findResult(function(result, err){
      if (err) {
        // failure
      } else {
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findResult().then(function(result){
      // success
    }, function(reason){
      // failure
    });
    ```
  
    Advanced Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let author, books;
  
    try {
      author = findAuthor();
      books  = findBooksByAuthor(author);
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
  
    function foundBooks(books) {
  
    }
  
    function failure(reason) {
  
    }
  
    findAuthor(function(author, err){
      if (err) {
        failure(err);
        // failure
      } else {
        try {
          findBoooksByAuthor(author, function(books, err) {
            if (err) {
              failure(err);
            } else {
              try {
                foundBooks(books);
              } catch(reason) {
                failure(reason);
              }
            }
          });
        } catch(error) {
          failure(err);
        }
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findAuthor().
      then(findBooksByAuthor).
      then(function(books){
        // found books
    }).catch(function(reason){
      // something went wrong
    });
    ```
  
    @method then
    @param {Function} onFulfilled
    @param {Function} onRejected
    Useful for tooling.
    @return {Promise}
  */
  then: then,

  /**
    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
    as the catch block of a try/catch statement.
  
    ```js
    function findAuthor(){
      throw new Error('couldn't find that author');
    }
  
    // synchronous
    try {
      findAuthor();
    } catch(reason) {
      // something went wrong
    }
  
    // async with promises
    findAuthor().catch(function(reason){
      // something went wrong
    });
    ```
  
    @method catch
    @param {Function} onRejection
    Useful for tooling.
    @return {Promise}
  */
  'catch': function _catch(onRejection) {
    return this.then(null, onRejection);
  }
};

function polyfill() {
    var local = undefined;

    if (typeof global !== 'undefined') {
        local = global;
    } else if (typeof self !== 'undefined') {
        local = self;
    } else {
        try {
            local = Function('return this')();
        } catch (e) {
            throw new Error('polyfill failed because global object is unavailable in this environment');
        }
    }

    var P = local.Promise;

    if (P) {
        var promiseToString = null;
        try {
            promiseToString = Object.prototype.toString.call(P.resolve());
        } catch (e) {
            // silently ignored
        }

        if (promiseToString === '[object Promise]' && !P.cast) {
            return;
        }
    }

    local.Promise = Promise;
}

// Strange compat..
Promise.polyfill = polyfill;
Promise.Promise = Promise;

return Promise;

})));
//# sourceMappingURL=es6-promise.map

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7), __webpack_require__(8)))

/***/ }),
/* 5 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global VERSION */

__webpack_require__(5);

var _es6Promise = __webpack_require__(4);

var _es6Promise2 = _interopRequireDefault(_es6Promise);

var _utils = __webpack_require__(0);

var Utils = _interopRequireWildcard(_utils);

var _api = __webpack_require__(1);

var API = _interopRequireWildcard(_api);

var _button = __webpack_require__(2);

var _push = __webpack_require__(3);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Noty = function () {
  /**
   * @param {object} options
   * @return {Noty}
   */
  function Noty() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Noty);

    this.options = Utils.deepExtend({}, API.Defaults, options);
    this.id = this.options.id || Utils.generateID('bar');
    this.closeTimer = -1;
    this.barDom = null;
    this.layoutDom = null;
    this.progressDom = null;
    this.showing = false;
    this.shown = false;
    this.closed = false;
    this.closing = false;
    this.killable = this.options.timeout || this.options.closeWith.length > 0;
    this.hasSound = this.options.sounds.sources.length > 0;
    this.soundPlayed = false;
    this.listeners = {
      beforeShow: [],
      onShow: [],
      afterShow: [],
      onClose: [],
      afterClose: [],
      onClick: [],
      onHover: [],
      onTemplate: []
    };
    this.promises = {
      show: null,
      close: null
    };
    this.on('beforeShow', this.options.callbacks.beforeShow);
    this.on('onShow', this.options.callbacks.onShow);
    this.on('afterShow', this.options.callbacks.afterShow);
    this.on('onClose', this.options.callbacks.onClose);
    this.on('afterClose', this.options.callbacks.afterClose);
    this.on('onClick', this.options.callbacks.onClick);
    this.on('onHover', this.options.callbacks.onHover);
    this.on('onTemplate', this.options.callbacks.onTemplate);

    return this;
  }

  /**
   * @param {string} eventName
   * @param {function} cb
   * @return {Noty}
   */


  _createClass(Noty, [{
    key: 'on',
    value: function on(eventName) {
      var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};

      if (typeof cb === 'function' && this.listeners.hasOwnProperty(eventName)) {
        this.listeners[eventName].push(cb);
      }

      return this;
    }

    /**
     * @return {Noty}
     */

  }, {
    key: 'show',
    value: function show() {
      var _this = this;

      if (this.options.killer === true) {
        Noty.closeAll();
      } else if (typeof this.options.killer === 'string') {
        Noty.closeAll(this.options.killer);
      }

      var queueCounts = API.getQueueCounts(this.options.queue);

      if (queueCounts.current >= queueCounts.maxVisible || API.PageHidden && this.options.visibilityControl) {
        API.addToQueue(this);

        if (API.PageHidden && this.hasSound && Utils.inArray('docHidden', this.options.sounds.conditions)) {
          Utils.createAudioElements(this);
        }

        if (API.PageHidden && Utils.inArray('docHidden', this.options.titleCount.conditions)) {
          API.docTitle.increment();
        }

        return this;
      }

      API.Store[this.id] = this;

      API.fire(this, 'beforeShow');

      this.showing = true;

      if (this.closing) {
        this.showing = false;
        return this;
      }

      API.build(this);
      API.handleModal(this);

      if (this.options.force) {
        this.layoutDom.insertBefore(this.barDom, this.layoutDom.firstChild);
      } else {
        this.layoutDom.appendChild(this.barDom);
      }

      if (this.hasSound && !this.soundPlayed && Utils.inArray('docVisible', this.options.sounds.conditions)) {
        Utils.createAudioElements(this);
      }

      if (Utils.inArray('docVisible', this.options.titleCount.conditions)) {
        API.docTitle.increment();
      }

      this.shown = true;
      this.closed = false;

      // bind button events if any
      if (API.hasButtons(this)) {
        Object.keys(this.options.buttons).forEach(function (key) {
          var btn = _this.barDom.querySelector('#' + _this.options.buttons[key].id);
          Utils.addListener(btn, 'click', function (e) {
            Utils.stopPropagation(e);
            _this.options.buttons[key].cb();
          });
        });
      }

      this.progressDom = this.barDom.querySelector('.noty_progressbar');

      if (Utils.inArray('click', this.options.closeWith)) {
        Utils.addClass(this.barDom, 'noty_close_with_click');
        Utils.addListener(this.barDom, 'click', function (e) {
          Utils.stopPropagation(e);
          API.fire(_this, 'onClick');
          _this.close();
        }, false);
      }

      Utils.addListener(this.barDom, 'mouseenter', function () {
        API.fire(_this, 'onHover');
      }, false);

      if (this.options.timeout) Utils.addClass(this.barDom, 'noty_has_timeout');
      if (this.options.progressBar) {
        Utils.addClass(this.barDom, 'noty_has_progressbar');
      }

      if (Utils.inArray('button', this.options.closeWith)) {
        Utils.addClass(this.barDom, 'noty_close_with_button');

        var closeButton = document.createElement('div');
        Utils.addClass(closeButton, 'noty_close_button');
        closeButton.innerHTML = '×';
        this.barDom.appendChild(closeButton);

        Utils.addListener(closeButton, 'click', function (e) {
          Utils.stopPropagation(e);
          _this.close();
        }, false);
      }

      API.fire(this, 'onShow');

      if (this.options.animation.open === null) {
        this.promises.show = new _es6Promise2.default(function (resolve) {
          resolve();
        });
      } else if (typeof this.options.animation.open === 'function') {
        this.promises.show = new _es6Promise2.default(this.options.animation.open.bind(this));
      } else {
        Utils.addClass(this.barDom, this.options.animation.open);
        this.promises.show = new _es6Promise2.default(function (resolve) {
          Utils.addListener(_this.barDom, Utils.animationEndEvents, function () {
            Utils.removeClass(_this.barDom, _this.options.animation.open);
            resolve();
          });
        });
      }

      this.promises.show.then(function () {
        var _t = _this;
        setTimeout(function () {
          API.openFlow(_t);
        }, 100);
      });

      return this;
    }

    /**
     * @return {Noty}
     */

  }, {
    key: 'stop',
    value: function stop() {
      API.dequeueClose(this);
      return this;
    }

    /**
     * @return {Noty}
     */

  }, {
    key: 'resume',
    value: function resume() {
      API.queueClose(this);
      return this;
    }

    /**
     * @param {int|boolean} ms
     * @return {Noty}
     */

  }, {
    key: 'setTimeout',
    value: function (_setTimeout) {
      function setTimeout(_x) {
        return _setTimeout.apply(this, arguments);
      }

      setTimeout.toString = function () {
        return _setTimeout.toString();
      };

      return setTimeout;
    }(function (ms) {
      this.stop();
      this.options.timeout = ms;

      if (this.barDom) {
        if (this.options.timeout) {
          Utils.addClass(this.barDom, 'noty_has_timeout');
        } else {
          Utils.removeClass(this.barDom, 'noty_has_timeout');
        }

        var _t = this;
        setTimeout(function () {
          // ugly fix for progressbar display bug
          _t.resume();
        }, 100);
      }

      return this;
    })

    /**
     * @param {string} html
     * @param {boolean} optionsOverride
     * @return {Noty}
     */

  }, {
    key: 'setText',
    value: function setText(html) {
      var optionsOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (this.barDom) {
        this.barDom.querySelector('.noty_body').innerHTML = html;
      }

      if (optionsOverride) this.options.text = html;

      return this;
    }

    /**
     * @param {string} type
     * @param {boolean} optionsOverride
     * @return {Noty}
     */

  }, {
    key: 'setType',
    value: function setType(type) {
      var _this2 = this;

      var optionsOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (this.barDom) {
        var classList = Utils.classList(this.barDom).split(' ');

        classList.forEach(function (c) {
          if (c.substring(0, 11) === 'noty_type__') {
            Utils.removeClass(_this2.barDom, c);
          }
        });

        Utils.addClass(this.barDom, 'noty_type__' + type);
      }

      if (optionsOverride) this.options.type = type;

      return this;
    }

    /**
     * @param {string} theme
     * @param {boolean} optionsOverride
     * @return {Noty}
     */

  }, {
    key: 'setTheme',
    value: function setTheme(theme) {
      var _this3 = this;

      var optionsOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (this.barDom) {
        var classList = Utils.classList(this.barDom).split(' ');

        classList.forEach(function (c) {
          if (c.substring(0, 12) === 'noty_theme__') {
            Utils.removeClass(_this3.barDom, c);
          }
        });

        Utils.addClass(this.barDom, 'noty_theme__' + theme);
      }

      if (optionsOverride) this.options.theme = theme;

      return this;
    }

    /**
     * @return {Noty}
     */

  }, {
    key: 'close',
    value: function close() {
      var _this4 = this;

      if (this.closed) return this;

      if (!this.shown) {
        // it's in the queue
        API.removeFromQueue(this);
        return this;
      }

      API.fire(this, 'onClose');

      this.closing = true;

      if (this.options.animation.close === null) {
        this.promises.close = new _es6Promise2.default(function (resolve) {
          resolve();
        });
      } else if (typeof this.options.animation.close === 'function') {
        this.promises.close = new _es6Promise2.default(this.options.animation.close.bind(this));
      } else {
        Utils.addClass(this.barDom, this.options.animation.close);
        this.promises.close = new _es6Promise2.default(function (resolve) {
          Utils.addListener(_this4.barDom, Utils.animationEndEvents, function () {
            if (_this4.options.force) {
              Utils.remove(_this4.barDom);
            } else {
              API.ghostFix(_this4);
            }
            resolve();
          });
        });
      }

      this.promises.close.then(function () {
        API.closeFlow(_this4);
        API.handleModalClose(_this4);
      });

      this.closed = true;

      return this;
    }

    // API functions

    /**
     * @param {boolean|string} queueName
     * @return {Noty}
     */

  }], [{
    key: 'closeAll',
    value: function closeAll() {
      var queueName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      Object.keys(API.Store).forEach(function (id) {
        if (queueName) {
          if (API.Store[id].options.queue === queueName && API.Store[id].killable) {
            API.Store[id].close();
          }
        } else if (API.Store[id].killable) {
          API.Store[id].close();
        }
      });
      return this;
    }

    /**
     * @param {Object} obj
     * @return {Noty}
     */

  }, {
    key: 'overrideDefaults',
    value: function overrideDefaults(obj) {
      API.Defaults = Utils.deepExtend({}, API.Defaults, obj);
      return this;
    }

    /**
     * @param {int} amount
     * @param {string} queueName
     * @return {Noty}
     */

  }, {
    key: 'setMaxVisible',
    value: function setMaxVisible() {
      var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : API.DefaultMaxVisible;
      var queueName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'global';

      if (!API.Queues.hasOwnProperty(queueName)) {
        API.Queues[queueName] = { maxVisible: amount, queue: [] };
      }

      API.Queues[queueName].maxVisible = amount;
      return this;
    }

    /**
     * @param {string} innerHtml
     * @param {String} classes
     * @param {Function} cb
     * @param {Object} attributes
     * @return {NotyButton}
     */

  }, {
    key: 'button',
    value: function button(innerHtml) {
      var classes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var cb = arguments[2];
      var attributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      return new _button.NotyButton(innerHtml, classes, cb, attributes);
    }

    /**
     * @return {string}
     */

  }, {
    key: 'version',
    value: function version() {
      return "3.1.3";
    }

    /**
     * @param {String} workerPath
     * @return {Push}
     */

  }, {
    key: 'Push',
    value: function Push(workerPath) {
      return new _push.Push(workerPath);
    }
  }]);

  return Noty;
}();

// Document visibility change controller


exports.default = Noty;
Utils.visibilityChangeFlow();
module.exports = exports['default'];

/***/ }),
/* 7 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 8 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 9 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })
/******/ ]);
});
//# sourceMappingURL=noty.js.map

/***/ }),
/* 162 */
/***/ (function(module, exports) {

module.exports = {
	"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
	"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
	"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
	"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
	"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
	"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
	"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
	"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
	"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
	"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
	"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
	"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
};

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.


var asn1 = __webpack_require__(20)

exports.certificate = __webpack_require__(164)

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen



var asn = __webpack_require__(20)

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED\n\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\n\r?\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?/m
var startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----\n/m
var fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?-----END \1-----$/m
var evp = __webpack_require__(34)
var ciphers = __webpack_require__(42)
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = new Buffer(match[2], 'hex')
    var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 166 */
/***/ (function(module, exports) {

var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
module.exports = function (iterations, keylen) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}


/***/ }),
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

exports.publicEncrypt = __webpack_require__(174);
exports.privateDecrypt = __webpack_require__(173);

exports.privateEncrypt = function privateEncrypt(key, buf) {
  return exports.publicEncrypt(key, buf, true);
};

exports.publicDecrypt = function publicDecrypt(key, buf) {
  return exports.privateDecrypt(key, buf, true);
};

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var parseKeys = __webpack_require__(35);
var mgf = __webpack_require__(78);
var xor = __webpack_require__(80);
var bn = __webpack_require__(3);
var crt = __webpack_require__(43);
var createHash = __webpack_require__(13);
var withPublic = __webpack_require__(79);
module.exports = function privateDecrypt(private_key, enc, reverse) {
  var padding;
  if (private_key.padding) {
    padding = private_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  
  var key = parseKeys(private_key);
  var k = key.modulus.byteLength();
  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error');
  }
  var msg;
  if (reverse) {
    msg = withPublic(new bn(enc), key);
  } else {
    msg = crt(enc, key);
  }
  var zBuffer = new Buffer(k - msg.length);
  zBuffer.fill(0);
  msg = Buffer.concat([zBuffer, msg], k);
  if (padding === 4) {
    return oaep(key, msg);
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    return msg;
  } else {
    throw new Error('unknown padding');
  }
};

function oaep(key, msg){
  var n = key.modulus;
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (msg[0] !== 0) {
    throw new Error('decryption error');
  }
  var maskedSeed = msg.slice(1, hLen + 1);
  var maskedDb =  msg.slice(hLen + 1);
  var seed = xor(maskedSeed, mgf(maskedDb, hLen));
  var db = xor(maskedDb, mgf(seed, k - hLen - 1));
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error');
  }
  var i = hLen;
  while (db[i] === 0) {
    i++;
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error');
  }
  return db.slice(i);
}

function pkcs1(key, msg, reverse){
  var p1 = msg.slice(0, 2);
  var i = 2;
  var status = 0;
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++;
      break;
    }
  }
  var ps = msg.slice(2, i - 1);
  var p2 = msg.slice(i - 1, i);

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)){
    status++;
  }
  if (ps.length < 8) {
    status++;
  }
  if (status) {
    throw new Error('decryption error');
  }
  return  msg.slice(i);
}
function compare(a, b){
  a = new Buffer(a);
  b = new Buffer(b);
  var dif = 0;
  var len = a.length;
  if (a.length !== b.length) {
    dif++;
    len = Math.min(a.length, b.length);
  }
  var i = -1;
  while (++i < len) {
    dif += (a[i] ^ b[i]);
  }
  return dif;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var parseKeys = __webpack_require__(35);
var randomBytes = __webpack_require__(26);
var createHash = __webpack_require__(13);
var mgf = __webpack_require__(78);
var xor = __webpack_require__(80);
var bn = __webpack_require__(3);
var withPublic = __webpack_require__(79);
var crt = __webpack_require__(43);

var constants = {
  RSA_PKCS1_OAEP_PADDING: 4,
  RSA_PKCS1_PADDIN: 1,
  RSA_NO_PADDING: 3
};

module.exports = function publicEncrypt(public_key, msg, reverse) {
  var padding;
  if (public_key.padding) {
    padding = public_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  var key = parseKeys(public_key);
  var paddedMsg;
  if (padding === 4) {
    paddedMsg = oaep(key, msg);
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    paddedMsg = new bn(msg);
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus');
    }
  } else {
    throw new Error('unknown padding');
  }
  if (reverse) {
    return crt(paddedMsg, key);
  } else {
    return withPublic(paddedMsg, key);
  }
};

function oaep(key, msg){
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long');
  }
  var ps = new Buffer(k - mLen - hLen2 - 2);
  ps.fill(0);
  var dblen = k - hLen - 1;
  var seed = randomBytes(hLen);
  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
  var maskedSeed = xor(seed, mgf(maskedDb, hLen));
  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
}
function pkcs1(key, msg, reverse){
  var mLen = msg.length;
  var k = key.modulus.byteLength();
  if (mLen > k - 11) {
    throw new Error('message too long');
  }
  var ps;
  if (reverse) {
    ps = new Buffer(k - mLen - 3);
    ps.fill(0xff);
  } else {
    ps = nonZero(k - mLen - 3);
  }
  return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));
}
function nonZero(len, crypto) {
  var out = new Buffer(len);
  var i = 0;
  var cache = randomBytes(len*2);
  var cur = 0;
  var num;
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len*2);
      cur = 0;
    }
    num = cache[cur++];
    if (num) {
      out[i++] = num;
    }
  }
  return out;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(177);

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

var arrayUniq = __webpack_require__(98);

function Charset() {
  this.chars = '';
}

Charset.prototype.setType = function(type) {
  var chars;
  
  var numbers    = '0123456789';
  var charsLower = 'abcdefghijklmnopqrstuvwxyz';
  var charsUpper = charsLower.toUpperCase();
  var hexChars   = 'abcdef';
  
  if (type === 'alphanumeric') {
    chars = numbers + charsLower + charsUpper;
  }
  else if (type === 'numeric') {
    chars = numbers;
  }
  else if (type === 'alphabetic') {
    chars = charsLower + charsUpper;
  }
  else if (type === 'hex') {
    chars = numbers + hexChars;
  }
  else {
    chars = type;
  }
  
  this.chars = chars;
}

Charset.prototype.removeUnreadable = function() {
  var unreadableChars = /[0OIl]/g;
  this.chars = this.chars.replace(unreadableChars, '');
}

Charset.prototype.setcapitalization = function(capitalization) {
  if (capitalization === 'uppercase') {
    this.chars = this.chars.toUpperCase();
  }
  else if (capitalization === 'lowercase') {
    this.chars = this.chars.toLowerCase();
  }
}

Charset.prototype.removeDuplicates = function() {
  var charMap = this.chars.split('');
  charMap = arrayUniq(charMap);
  this.chars = charMap.join('');
}

module.exports = exports = Charset;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var crypto  = __webpack_require__(130);
var Charset = __webpack_require__(176);

function safeRandomBytes(length) {
  while (true) {
    try {
      return crypto.randomBytes(length);
    } catch(e) {
      continue;
    }
  }
}

exports.generate = function(options) {
  
  var charset = new Charset();
  
  var length, chars, capitalization, string = '';
  
  // Handle options
  if (typeof options === 'object') {
    length = options.length || 32;
    
    if (options.charset) {
      charset.setType(options.charset);
    }
    else {
      charset.setType('alphanumeric');
    }
    
    if (options.capitalization) {
      charset.setcapitalization(options.capitalization);
    }
    
    if (options.readable) {
      charset.removeUnreadable();
    }
    
    charset.removeDuplicates();
  }
  else if (typeof options === 'number') {
    length = options;
    charset.setType('alphanumeric');
  }
  else {
    length = 32;
    charset.setType('alphanumeric');
  }
  
  // Generate the string
  var charsLen = charset.chars.length;
  var maxByte = 256 - (256 % charsLen);
  while (length > 0) {
    var buf = safeRandomBytes(Math.ceil(length * 256 / maxByte));
    for (var i = 0; i < buf.length && length > 0; i++) {
      var randomByte = buf.readUInt8(i);
      if (randomByte < maxByte) {
        string += charset.chars.charAt(randomByte % charsLen);
        length--;
      }
    }
  }

  return string;
};


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(11);


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(82);

/*<replacement>*/
var util = __webpack_require__(24);
util.inherits = __webpack_require__(1);
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(0).Buffer;
/*<replacement>*/
var bufferShim = __webpack_require__(44);
/*</replacement>*/

module.exports = BufferList;

function BufferList() {
  this.head = null;
  this.tail = null;
  this.length = 0;
}

BufferList.prototype.push = function (v) {
  var entry = { data: v, next: null };
  if (this.length > 0) this.tail.next = entry;else this.head = entry;
  this.tail = entry;
  ++this.length;
};

BufferList.prototype.unshift = function (v) {
  var entry = { data: v, next: this.head };
  if (this.length === 0) this.tail = entry;
  this.head = entry;
  ++this.length;
};

BufferList.prototype.shift = function () {
  if (this.length === 0) return;
  var ret = this.head.data;
  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
  --this.length;
  return ret;
};

BufferList.prototype.clear = function () {
  this.head = this.tail = null;
  this.length = 0;
};

BufferList.prototype.join = function (s) {
  if (this.length === 0) return '';
  var p = this.head;
  var ret = '' + p.data;
  while (p = p.next) {
    ret += s + p.data;
  }return ret;
};

BufferList.prototype.concat = function (n) {
  if (this.length === 0) return bufferShim.alloc(0);
  if (this.length === 1) return this.head.data;
  var ret = bufferShim.allocUnsafe(n >>> 0);
  var p = this.head;
  var i = 0;
  while (p) {
    p.data.copy(ret, i);
    i += p.data.length;
    p = p.next;
  }
  return ret;
};

/***/ }),
/* 181 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(50).PassThrough


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(50).Transform


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(49);


/***/ }),
/* 185 */,
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
/** @preserve
(c) 2012 by Cédric Mesnil. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// constants table
var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]
var hr = [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]

function bytesToWords (bytes) {
  var words = []
  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
    words[b >>> 5] |= bytes[i] << (24 - b % 32)
  }
  return words
}

function wordsToBytes (words) {
  var bytes = []
  for (var b = 0; b < words.length * 32; b += 8) {
    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)
  }
  return bytes
}

function processBlock (H, M, offset) {
  // swap endian
  for (var i = 0; i < 16; i++) {
    var offset_i = offset + i
    var M_offset_i = M[offset_i]

    // Swap
    M[offset_i] = (
      (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
      (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)
    )
  }

  // Working variables
  var al, bl, cl, dl, el
  var ar, br, cr, dr, er

  ar = al = H[0]
  br = bl = H[1]
  cr = cl = H[2]
  dr = dl = H[3]
  er = el = H[4]

  // computation
  var t
  for (i = 0; i < 80; i += 1) {
    t = (al + M[offset + zl[i]]) | 0
    if (i < 16) {
      t += f1(bl, cl, dl) + hl[0]
    } else if (i < 32) {
      t += f2(bl, cl, dl) + hl[1]
    } else if (i < 48) {
      t += f3(bl, cl, dl) + hl[2]
    } else if (i < 64) {
      t += f4(bl, cl, dl) + hl[3]
    } else {// if (i<80) {
      t += f5(bl, cl, dl) + hl[4]
    }
    t = t | 0
    t = rotl(t, sl[i])
    t = (t + el) | 0
    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = t

    t = (ar + M[offset + zr[i]]) | 0
    if (i < 16) {
      t += f5(br, cr, dr) + hr[0]
    } else if (i < 32) {
      t += f4(br, cr, dr) + hr[1]
    } else if (i < 48) {
      t += f3(br, cr, dr) + hr[2]
    } else if (i < 64) {
      t += f2(br, cr, dr) + hr[3]
    } else {// if (i<80) {
      t += f1(br, cr, dr) + hr[4]
    }

    t = t | 0
    t = rotl(t, sr[i])
    t = (t + er) | 0
    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = t
  }

  // intermediate hash value
  t = (H[1] + cl + dr) | 0
  H[1] = (H[2] + dl + er) | 0
  H[2] = (H[3] + el + ar) | 0
  H[3] = (H[4] + al + br) | 0
  H[4] = (H[0] + bl + cr) | 0
  H[0] = t
}

function f1 (x, y, z) {
  return ((x) ^ (y) ^ (z))
}

function f2 (x, y, z) {
  return (((x) & (y)) | ((~x) & (z)))
}

function f3 (x, y, z) {
  return (((x) | (~(y))) ^ (z))
}

function f4 (x, y, z) {
  return (((x) & (z)) | ((y) & (~(z))))
}

function f5 (x, y, z) {
  return ((x) ^ ((y) | (~(z))))
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function ripemd160 (message) {
  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]

  if (typeof message === 'string') {
    message = new Buffer(message, 'utf8')
  }

  var m = bytesToWords(message)

  var nBitsLeft = message.length * 8
  var nBitsTotal = message.length * 8

  // Add padding
  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32)
  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
    (((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |
    (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00)
  )

  for (var i = 0; i < m.length; i += 16) {
    processBlock(H, m, i)
  }

  // swap endian
  for (i = 0; i < 5; i++) {
    // shortcut
    var H_i = H[i]

    // Swap
    H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
      (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00)
  }

  var digestbytes = wordsToBytes(H)
  return new Buffer(digestbytes)
}

module.exports = ripemd160

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = __webpack_require__(188)
exports.sha1 = __webpack_require__(189)
exports.sha224 = __webpack_require__(190)
exports.sha256 = __webpack_require__(84)
exports.sha384 = __webpack_require__(191)
exports.sha512 = __webpack_require__(85)


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = __webpack_require__(1)
var Hash = __webpack_require__(14)

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = __webpack_require__(1)
var Hash = __webpack_require__(14)

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(1)
var Sha256 = __webpack_require__(84)
var Hash = __webpack_require__(14)

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = new Buffer(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var inherits = __webpack_require__(1)
var SHA512 = __webpack_require__(85)
var Hash = __webpack_require__(14)

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = new Buffer(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

var indexOf = __webpack_require__(160);

var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    forEach(Object_keys(ctx), function (key) {
        context[key] = ctx[key];
    });

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(220),
  /* template */
  __webpack_require__(266),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/BookingDetails.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] BookingDetails.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-525e4776", Component.options)
  } else {
    hotAPI.reload("data-v-525e4776", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 195 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 196 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 197 */,
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vuex__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__store__ = __webpack_require__(39);



/* harmony default export */ __webpack_exports__["a"] = ({
    beforeRouteEnter: function beforeRouteEnter(to, from, next) {
        __WEBPACK_IMPORTED_MODULE_1__store__["a" /* default */].dispatch('loadTickets', __WEBPACK_IMPORTED_MODULE_1__store__["a" /* default */].getters.getBooking.id).then(function () {
            next();
        });
    },
    beforeRouteUpdate: function beforeRouteUpdate(to, from, next) {
        __WEBPACK_IMPORTED_MODULE_1__store__["a" /* default */].dispatch('loadTickets', __WEBPACK_IMPORTED_MODULE_1__store__["a" /* default */].getters.getBooking.id).then(function () {
            next();
        });
    },

    computed: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_vuex__["mapGetters"])({
        children: 'getChildAttendees',
        adults: 'getAdultAttendees',
        seniors: 'getSeniorAttendees',
        carers: 'getCarerAttendees'
    })
});

/***/ }),
/* 204 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vuex__ = __webpack_require__(28);


/* harmony default export */ __webpack_exports__["a"] = ({
    beforeRouteEnter: function beforeRouteEnter(to, from, next) {
        next(function (vm) {
            vm.$store.dispatch('loadTimeSlotPrices', {
                bookingId: vm.$store.getters.getBooking.id,
                location: 'Windsor',
                season: '2017'
            }).then(function () {
                next();
            });
        });
    },
    beforeRouteUpdate: function beforeRouteUpdate(to, from, next) {
        this.$store.dispatch('loadTimeSlotPrices', {
            bookingId: this.$store.getters.getBooking.id,
            location: 'Windsor',
            season: '2017'
        }).then(function () {
            next();
        });
    },

    computed: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_vuex__["mapGetters"])({
        adultPrice: 'getAdultPrice',
        seniorPrice: 'getSeniorPrice',
        childPrice: 'getChildPrice'
    })
});

/***/ }),
/* 205 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__store__ = __webpack_require__(39);


var hour = 17;
var minute = 0;

function _mustStopSelling() {
    var hasBookings = __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].getters.getBookings.length > 0;

    if (hasBookings) {
        var booking = __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].getters.getBooking;
        var tourDate = moment(booking.bookedDate + ' ' + booking.bookedTime, 'YYYY-MM-DD HH:mm');
        var tourDateDeadline = tourDate.clone().subtract(1, 'day').hour(hour).minute(minute);

        if (moment().isSameOrAfter(tourDateDeadline)) {
            return true;
        }
    }

    return false;
}

/* harmony default export */ __webpack_exports__["a"] = ({
    beforeRouteEnter: function beforeRouteEnter(to, from, next) {
        if ((to.name === 'my-party' || to.name === 'magical-extras') && _mustStopSelling()) {
            return next({ name: 'my-experience' });
        }

        return next();
    },
    data: function data() {
        return {
            stopSellingDeadlineFormat: 'HH:mm'
        };
    },

    computed: {
        stopSellingDeadline: function stopSellingDeadline() {
            return moment().hour(hour).minute(minute).format(this.stopSellingDeadlineFormat);
        },
        mustStopSelling: function mustStopSelling() {
            return _mustStopSelling();
        }
    }
});

/***/ }),
/* 206 */,
/* 207 */,
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var data = __webpack_require__(239)

/**
 * Precompute name and code lookups.
 */
var nameMap = {}
var codeMap = {}
data.forEach(function (country) {
  nameMap[country.name.toLowerCase()] = country.code
  codeMap[country.code.toLowerCase()] = country.name
})

module.exports = CountryList
function CountryList () {
  if (!(this instanceof CountryList)) return new CountryList()
};

CountryList.prototype.getCode = function getCode (name) {
  return nameMap[name.toLowerCase()]
}

CountryList.prototype.getName = function getName (code) {
  return codeMap[code.toLowerCase()]
}

CountryList.prototype.getNames = function getNames () {
  return data.map(function (country) {
    return country.name
  })
}

CountryList.prototype.getCodes = function getCodes () {
  return data.map(function (country) {
    return country.code
  })
}

CountryList.prototype.getCodeList = function () {
  return codeMap
}

CountryList.prototype.getNameList = function () {
  return nameMap
}

CountryList.prototype.getData = function getData () {
  return data
}


/***/ }),
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(229),
  /* template */
  __webpack_require__(265),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/booking-portal-pages/PaymentErrorsContainer.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] PaymentErrorsContainer.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-448bfcab", Component.options)
  } else {
    hotAPI.reload("data-v-448bfcab", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue_multiselect__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue_multiselect___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue_multiselect__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mixins_Validation__ = __webpack_require__(110);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__booking_portal_pages_GatewayForm_vue__ = __webpack_require__(262);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__booking_portal_pages_GatewayForm_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__booking_portal_pages_GatewayForm_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__mixins_Order__ = __webpack_require__(235);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mixins_AdultsOnly__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__MonthPicker_vue__ = __webpack_require__(259);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__MonthPicker_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__MonthPicker_vue__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//







var countries = __webpack_require__(208)();

/* harmony default export */ __webpack_exports__["default"] = ({
    components: {
        'multiselect': __WEBPACK_IMPORTED_MODULE_0_vue_multiselect___default.a,
        'gateway-form': __WEBPACK_IMPORTED_MODULE_2__booking_portal_pages_GatewayForm_vue___default.a,
        'month-picker': __WEBPACK_IMPORTED_MODULE_5__MonthPicker_vue___default.a
    },
    mixins: [__WEBPACK_IMPORTED_MODULE_4__mixins_AdultsOnly__["a" /* default */], __WEBPACK_IMPORTED_MODULE_3__mixins_Order__["a" /* default */], __WEBPACK_IMPORTED_MODULE_1__mixins_Validation__["a" /* default */]],
    props: {
        showChildren: {
            type: Boolean,
            default: true
        },
        promoCodeApplied: {
            type: Number,
            default: 0
        },
        existingChildren: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        successUrl: String,
        failureUrl: String,
        existingCustomerDetails: Object,
        cardFormat: {
            type: RegExp,
            default: function _default() {
                return (/(\d{1,4})/g
                );
            }
        },
        cards: {
            type: Array,
            default: function _default() {
                return [{
                    label: 'Maestro',
                    type: 'MAESTRO',
                    patterns: [5018, 502, 503, 506, 56, 58, 639, 6220, 67],
                    format: this.defaultFormat,
                    length: _.range(12, 19),
                    cvcLength: [3],
                    luhn: true
                },
                // Credit cards
                {
                    label: 'Visa',
                    type: 'VISA',
                    patterns: [4],
                    format: this.defaultFormat,
                    length: [13, 16],
                    cvcLength: [3],
                    luhn: true
                }, {
                    label: 'Mastercard',
                    type: 'MC',
                    patterns: [51, 52, 53, 54, 55, 22, 23, 24, 25, 26, 27],
                    format: this.defaultFormat,
                    length: [16],
                    cvcLength: [3],
                    luhn: true
                }, {
                    label: 'Diners Club',
                    type: 'DINERS',
                    patterns: [30, 36, 38, 39],
                    format: /(\d{1,4})(\d{1,6})?(\d{1,4})?/,
                    length: [14],
                    cvcLength: [3],
                    luhn: true
                }];
            }
        },
        countries: {
            type: Array,
            default: function _default() {
                return countries.getData();
            }
        },
        reasons: {
            type: Array,
            default: function _default() {
                return ['Recommended by a friend', 'Other', 'Email from LaplandUK', 'Heart Radio Promotion', 'We’ve visited before', 'Social Media (Facebook, Instagram etc)'];
            }
        },
        numberOfAdults: {
            type: Number,
            default: 0
        },
        numberOfChildren: {
            type: Number,
            default: 0
        }
    },
    data: function data() {
        return {
            rules: {
                'customer.firstName': ['required'],
                'customer.lastName': ['required'],
                'customer.telephone': ['required'],
                'customer.emailAddress': ['required', 'email'],
                'customer.emailAddressConfirmation': ['required', 'email'],
                'billing.address1': ['required'],
                'billing.city': ['required'],
                'billing.postcode': ['required'],
                'billing.country.name': ['required']
            },
            hasValidCardNumber: true,
            hasValidCardExpiry: true,
            hasValidCardName: true,
            hasValidCardType: true,
            hasValidCV2: true,
            existingCustomer: false,
            customer: {
                firstName: '',
                lastName: '',
                telephone: '',
                emailAddress: '',
                emailAddressConfirmation: ''
            },
            guests: [],
            card: {
                name: '',
                type: '',
                number: '',
                expiry: '',
                cv2: '',
                issueNumber: ''
            },
            promoCode: '',
            billing: {
                address1: '',
                address2: '',
                city: '',
                postcode: '',
                country: {
                    code: 'GB',
                    name: 'United Kingdom'
                }
            },
            referrerReason: '',
            hasAcceptedTerms: false,
            guestErrors: [],
            showGateway: false,
            hideButton: false,
            showDayView: false
        };
    },
    created: function created() {
        if (this.existingCustomerDetails) {
            this.existingCustomer = true;
            this.customer.firstName = this.existingCustomerDetails.firstName;
            this.customer.lastName = this.existingCustomerDetails.lastName;
            this.customer.emailAddress = this.existingCustomerDetails.emailAddress;
            this.customer.emailAddressConfirmation = this.existingCustomerDetails.emailAddress;
            this.customer.telephone = this.existingCustomerDetails.telephone;
            if (this.existingChildren && this.existingChildren.length > 0) {
                this.guests = _.map(this.existingChildren, function (child) {
                    return { name: child.firstName };
                });
            }
            if (this.numberOfGuests && this.numberOfGuests > 0) {
                this.guests = _.times(this.numberOfGuests, function (index) {
                    return { name: '' };
                });
            }
        } else {
            if (this.order && this.order.orderView) {
                var ov = this.order.orderView;
                this.customer.firstName = ov.firstName;
                this.customer.lastName = ov.lastName;
                this.customer.emailAddress = ov.emailAddress;
                this.customer.emailAddressConfirmation = ov.emailAddress;
                this.customer.telephone = ov.telephone;
                this.billing.address1 = ov.addressLine1;
                this.billing.address2 = ov.addressLine2;
                this.billing.city = ov.city;
                this.billing.postcode = ov.postCode;
                this.billing.country = { code: ov.country, name: 'United Kingdom' };
            }
            this.guests = _.times(this.numberOfGuests, function (index) {
                return { name: '' };
            });
        }

        if (this.numberOfGuests > this.guests.length) {
            var children = _.fill(new Array(this.numberOfGuests - this.guests.length), { name: '' });
            this.guests = _.concat(this.guests, children);
        }
    },

    computed: {
        numberOfGuests: function numberOfGuests() {
            return this.adultsOnly ? this.numberOfAdults : this.numberOfChildren;
        },
        canShowChildren: function canShowChildren() {
            return this.showChildren ? !this.adultsOnly : false;
        },
        pickerDisabled: function pickerDisabled() {
            var d = new Date();
            d.setMonth(d.getMonth());
            return {
                to: d
            };
        },
        reservationId: function reservationId() {
            return this.$store.getters.getReservationId;
        },
        canMakePayment: function canMakePayment() {
            if (this.existingCustomerDetails) {
                return this.existingCustomerDetails || this.hasAcceptedTerms;
            }

            return (this.existingCustomerDetails || this.hasAcceptedTerms) && this.referrerReason !== '';
        },
        guestFirstName: function guestFirstName() {
            return _.map(this.guests, function (child) {
                return child.name;
            }).join(',');
        },
        cardNumber: function cardNumber() {
            return this.card.number.split(' ').join('');
        },

        cardType: {
            get: function get() {
                return _.find(this.cards, { type: this.card.type });
            },
            set: function set(card) {
                var selectedCard = _.find(this.cards, { type: card.type });
                this.card.type = selectedCard.type;
            }
        },
        expiryDate: function expiryDate() {
            return _.map(this.card.expiry.split('/'), function (segment) {
                return segment.trim();
            }).reverse().join('-');
        },
        GBP: function GBP() {
            return "GBP";
        },
        formattedCardExpiry: function formattedCardExpiry() {
            var momentExpiry = moment(this.card.expiry);
            return momentExpiry.format('YYYY-MM');
        }
    },
    methods: {
        applyPromoCode: function applyPromoCode() {
            this.$emit('applyPromoCode', this.promoCode);
        },
        validateDetails: function validateDetails() {
            this.areChildrenValid();
            this.isBillingValid();
            this.isCardDetailsValid();
            return this.isCustomerValid() && this.areChildrenValid() && this.isBillingValid() && this.isCardDetailsValid();
        },
        createOrder: function createOrder() {
            this.passes();
            if (this.validateDetails()) {
                this.disableButton();
                this.processPayment();
            }
        },
        fakeCall: function fakeCall() {
            //do nothing
        },
        processPayment: function processPayment() {
            this.$emit('pay', {
                customer: this.customer,
                billing: this.billing,
                children: this.guests,
                referrer: this.referrerReason,
                code: this.promoCodeApplied > 0 ? this.promoCode : ''
            });
        },
        disableButton: function disableButton() {
            var _this = this;

            this.hideButton = true;

            setTimeout(function () {
                _this.hideButton = false;
            }, 3000);
        },
        isCustomerValid: function isCustomerValid() {
            this.customer.firstName = this.customer.firstName.trim();
            this.customer.lastName = this.customer.lastName.trim();
            this.customer.telephone = this.customer.telephone.trim();
            this.customer.emailAddress = this.customer.emailAddress.trim();
            this.customer.emailAddressConfirmation = this.customer.emailAddressConfirmation.trim();
            return !this.hasError('customer.firstName') && !this.hasError('customer.lastName') && !this.hasError('customer.telephone') && !this.hasError('customer.emailAddress') && !this.hasError('customer.emailAddressConfirmation') && this.emailAddressConfirmation === this.emailAddress;
        },
        areChildrenValid: function areChildrenValid() {
            var _this2 = this;

            var valid = true;
            if (this.showChildren === false) {
                return valid;
            }
            this.guestErrors = [];
            this.guests.forEach(function (child, index) {
                child.name = child.name.trim();
                if (_.isEmpty(child.name) || child.name.includes(",")) {
                    _this2.guestErrors[index] = "Please enter your childs first name (without commas).";
                    valid = false;
                }
            });
            return valid;
        },
        isBillingValid: function isBillingValid() {
            this.billing.address1 = this.billing.address1.trim();
            this.billing.city = this.billing.city.trim();
            this.billing.postcode = this.billing.postcode.trim();
            return !this.hasError('billing.address1') && !this.hasError('billing.city') && !this.hasError('billing.postcode') && !this.hasError('billing.country');
        },
        isCardDetailsValid: function isCardDetailsValid() {
            if (this.promoCodeApplied === 2) {
                return true;
            }

            var valid = true;
            this.hasValidCardName = true;
            this.hasValidCardNumber = true;
            this.hasValidCV2 = true;
            this.hasValidCardExpiry = true;

            if (this.card.name.length < 1) {
                this.hasValidCardName = false;
                valid = false;
            }
            if (typeof this.cardType === 'undefined') {
                valid = false;
            }

            this.validateCard(this.card.number);
            if (!this.hasValidCardNumber) {
                valid = false;
            }

            if (this.card.cv2.length < 1) {
                this.hasValidCV2 = false;
                valid = false;
            }
            if (this.card.expiry.length < 1) {
                this.hasValidCardExpiry = false;
                valid = false;
            }

            return valid && this.hasValidCardNumber && this.hasValidCardExpiry;
        },
        validateExpiry: function validateExpiry(date) {
            var ref = date.split('/');
            if (ref.length !== 2) {
                this.hasValidCardExpiry = false;
            }
            var month = ref[0];
            var year = ref[1];
            if (!(month && year)) {
                this.hasValidCardExpiry = false;
            }
            month = $.trim(month);
            year = $.trim(year);
            if (!/^\d+$/.test(month)) {
                this.hasValidCardExpiry = false;
            }
            if (!/^\d+$/.test(year)) {
                this.hasValidCardExpiry = false;
            }
            if (!(1 <= month && month <= 12)) {
                this.hasValidCardExpiry = false;
            }
            if (year.length === 2) {
                if (year < 70) {
                    year = "20" + year;
                } else {
                    year = "19" + year;
                }
            }
            if (year.length !== 4) {
                this.hasValidCardExpiry = false;
            }
            var expiry = new Date(year, month);
            var currentTime = new Date();
            expiry.setMonth(expiry.getMonth() - 1);
            expiry.setMonth(expiry.getMonth() + 1, 1);
            this.hasValidCardExpiry = expiry > currentTime;
        },
        validateCard: function validateCard(number) {
            var card = void 0,
                ref = void 0;
            number = (number + '').replace(/\s+|-/g, '');

            if (!/^\d+$/.test(number)) {
                this.hasValidCardNumber = false;
                return;
            }

            card = this.cardFromNumber(number);
            if (typeof card === 'undefined') {
                this.hasValidCardNumber = false;
                return;
            }
            ref = number ? number.length : 0;
            this.hasValidCardNumber = _.indexOf(card.length, ref) >= 0 && (card.luhn === false || this.luhnCheck(number));
        },
        luhnCheck: function luhnCheck(number) {
            var digit = void 0,
                digits = void 0,
                i = void 0,
                len = void 0,
                odd = void 0,
                sum = void 0;
            odd = true;
            sum = 0;
            digits = (number + '').split('').reverse();
            for (i = 0, len = digits.length; i < len; i++) {
                digit = digits[i];
                digit = parseInt(digit, 10);
                if (odd = !odd) {
                    digit *= 2;
                }
                if (digit > 9) {
                    digit -= 9;
                }
                sum += digit;
            }
            return sum % 10 === 0;
        },
        maskCardNumber: function maskCardNumber(event) {
            if (this.restrictNumeric(event) === false) {
                event.preventDefault();
                return false;
            }

            if (this.restrictCardNumber(event) === false) {
                event.preventDefault();
                return false;
            }

            if (this.formatCardNumber(event) === false) {
                event.preventDefault();
                return false;
            }

            if (this.formatBackCardNumber(event) === false) {
                event.preventDefault();
                return false;
            }

            return true;
        },
        maskExpiryDate: function maskExpiryDate() {
            if (this.restrictNumeric(event) === false) {
                event.preventDefault();
                return false;
            }

            if (this.restrictExpiry(event) === false) {
                event.preventDefault();
                return false;
            }

            if (this.formatExpiry(event) === false) {
                event.preventDefault();
                return false;
            }

            if (this.formatForwardSlashAndSpace(event) === false) {
                event.preventDefault();
                return false;
            }

            if (this.formatForwardExpiry(event) === false) {
                event.preventDefault();
                return false;
            }

            return true;
        },
        maskCV2: function maskCV2() {
            if (this.restrictNumeric(event) === false) {
                event.preventDefault();
                return false;
            }

            if (this.restrictCV2(event) === false) {
                event.preventDefault();
                return false;
            }

            return true;
        },
        setCardType: function setCardType(event) {
            var card = this.cardFromNumber(this.card.number);

            if (card) {
                this.cardType = card;
            }
        },
        restrictNumeric: function restrictNumeric(event) {
            var input = void 0;
            if (event.metaKey || event.ctrlKey) {
                return true;
            }
            if (event.which === 32) {
                return false;
            }
            if (event.which === 0) {
                return true;
            }
            if (event.which < 33) {
                return true;
            }
            input = String.fromCharCode(event.which);
            return !!/[\d\s]/.test(input);
        },
        restrictCardNumber: function restrictCardNumber(event) {
            var $target = void 0,
                card = void 0,
                digit = void 0,
                value = void 0;
            $target = $(event.currentTarget);
            digit = String.fromCharCode(event.which);
            if (!/^\d+$/.test(digit)) {
                return;
            }
            if (this.hasTextSelected($target)) {
                return;
            }
            value = ($target.val() + digit).replace(/\D/g, '');
            card = this.cardFromNumber(value);
            if (card) {
                return value.length <= card.length[card.length.length - 1];
            } else {
                return value.length <= 16;
            }
        },
        formatCardNumber: function formatCardNumber(event) {
            // Only format if input is a number
            var digit = String.fromCharCode(event.which);
            if (!/^\d+$/.test(digit)) {
                return;
            }

            var $target = $(event.currentTarget);
            var value = $target.val();
            var card = this.cardFromNumber(value + digit);
            var length = (value.replace(/\D/g, '') + digit).length;

            var upperLength = 16;
            if (card) {
                upperLength = card.length[card.length.length - 1];
            }

            if (length >= upperLength) {
                return;
            }

            // Return if focus isn't at the end of the text
            if ($target.prop('selectionStart') && $target.prop('selectionStart') !== value.length) {
                return;
            }

            var re = void 0;

            if (card && card.type === 'amex') {
                // AMEX cards are formatted differently
                re = /^(\d{4}|\d{4}\s\d{6})$/;
            } else {
                re = /(?:^|\s)(\d{4})$/;
            }

            // If '4242' + 4
            if (re.test(value)) {
                event.preventDefault();
                setTimeout(function () {
                    return $target.val(value + ' ' + digit);
                });
                // If '424' + 2
            } else if (re.test(value + digit)) {
                event.preventDefault();
                setTimeout(function () {
                    return $target.val(value + digit + ' ');
                });
            }
        },
        formatBackCardNumber: function formatBackCardNumber(event) {
            var $target = void 0,
                value = void 0;
            $target = $(event.currentTarget);
            value = $target.val();
            if (event.which !== 8) {
                return;
            }
            if ($target.prop('selectionStart') !== null && $target.prop('selectionStart') !== value.length) {
                return;
            }
            if (/\d\s$/.test(value)) {
                event.preventDefault();
                return setTimeout(function () {
                    return $target.val(value.replace(/\d\s$/, ''));
                });
            } else if (/\s\d?$/.test(value)) {
                event.preventDefault();
                return setTimeout(function () {
                    return $target.val(value.replace(/\d$/, ''));
                });
            }
        },
        restrictExpiry: function restrictExpiry(event) {
            var $target = void 0,
                digit = void 0,
                value = void 0;
            $target = $(event.currentTarget);
            digit = String.fromCharCode(event.which);
            if (!/^\d+$/.test(digit)) {
                return;
            }
            if (this.hasTextSelected($target)) {
                return;
            }
            value = $target.val() + digit;
            value = value.replace(/\D/g, '');
            if (value.length > 6) {
                return false;
            }
        },
        formatExpiry: function formatExpiry(event) {
            var $target = void 0,
                digit = void 0,
                val = void 0;
            digit = String.fromCharCode(event.which);
            if (!/^\d+$/.test(digit)) {
                return;
            }
            $target = $(event.currentTarget);
            val = $target.val() + digit;
            if (/^\d$/.test(val) && val !== '0' && val !== '1') {
                event.preventDefault();
                return setTimeout(function () {
                    return $target.val("0" + val + " / ");
                });
            } else if (/^\d\d$/.test(val)) {
                event.preventDefault();
                return setTimeout(function () {
                    var m1 = void 0,
                        m2 = void 0;
                    m1 = parseInt(val[0], 10);
                    m2 = parseInt(val[1], 10);
                    if (m2 > 2 && m1 !== 0) {
                        return $target.val("0" + m1 + " / " + m2);
                    } else {
                        return $target.val(val + " / ");
                    }
                });
            }
        },
        formatForwardSlashAndSpace: function formatForwardSlashAndSpace(event) {
            var $target = void 0,
                val = void 0,
                which = void 0;
            which = String.fromCharCode(event.which);
            if (!(which === '/' || which === ' ')) {
                return;
            }
            $target = $(event.currentTarget);
            val = $target.val();
            if (/^\d$/.test(val) && val !== '0') {
                return $target.val("0" + val + " / ");
            }
        },
        formatForwardExpiry: function formatForwardExpiry(event) {
            var $target = void 0,
                digit = void 0,
                val = void 0;
            digit = String.fromCharCode(event.which);
            if (!/^\d+$/.test(digit)) {
                return;
            }
            $target = $(event.currentTarget);
            val = $target.val();
            if (/^\d\d$/.test(val)) {
                return $target.val(val + " / ");
            }
        },
        formatBackExpiry: function formatBackExpiry(event) {
            var $target = void 0,
                value = void 0;
            $target = $(event.currentTarget);
            value = $target.val();
            if (event.which !== 8) {
                return;
            }
            if ($target.prop('selectionStart') != null && $target.prop('selectionStart') !== value.length) {
                return;
            }
            if (/\d\s\/\s$/.test(value)) {
                event.preventDefault();
                return setTimeout(function () {
                    return $target.val(value.replace(/\d\s\/\s$/, ''));
                });
            }
        },
        restrictCV2: function restrictCV2(event) {
            var $target = void 0,
                digit = void 0,
                val = void 0;
            $target = $(event.currentTarget);
            digit = String.fromCharCode(event.which);
            if (!/^\d+$/.test(digit)) {
                return;
            }
            if (this.hasTextSelected($target)) {
                return;
            }
            val = $target.val() + digit;
            return val.length <= 4;
        },
        cardFromNumber: function cardFromNumber(number) {
            var c = void 0,
                p = void 0;
            number = (number + '').replace(/\D/g, '');

            _.forEach(this.cards, function (card) {
                _.forEach(card.patterns, function (pattern) {
                    p = pattern + '';

                    if (number.substr(0, p.length) === p) {
                        c = card;
                    }
                });
            });

            return c;
        },
        hasTextSelected: function hasTextSelected($target) {
            var ref = void 0;
            if ($target.prop('selectionStart') != null && $target.prop('selectionStart') !== $target.prop('selectionEnd')) {
                return true;
            }
            if ((typeof document !== "undefined" && document !== null ? (ref = document.selection) != null ? ref.createRange : void 0 : void 0) != null) {
                if (document.selection.createRange().text) {
                    return true;
                }
            }
            return false;
        }
    }
});

/***/ }),
/* 221 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
	props: {
		promoCodeDescription: String,
		day: Object,
		time: Object,
		booking: Object,
		extras: Array,
		prices: Object,
		showInfoBox: {
			type: Boolean,
			default: false
		},
		canRemoveExtras: {
			type: Boolean,
			default: true
		},
		transfer: {
			type: Boolean,
			default: false
		},
		emitToRemove: {
			type: Boolean,
			default: false
		},
		showCards: {
			type: Boolean,
			default: false
		},
		isSuperStar: {
			type: Boolean,
			default: false
		},
		isPremiumBooking: {
			type: Boolean,
			default: false
		}
	},
	computed: {
		totalPriceDifference: function totalPriceDifference() {
			var difference = parseFloat(parseFloat(this.totalPrice) - parseFloat(this.paidAmount)).toFixed(2);

			return difference >= 0 ? difference : 0;
		},
		currentTotalPrice: function currentTotalPrice() {
			var booking = this.$store.getters.getBooking;

			if (booking) {
				return parseFloat(parseFloat(booking.adultsTickets) + parseFloat(booking.seniorAmount) + parseFloat(booking.childAmount) + parseFloat(booking.infantAmount) + parseFloat(booking.carerAmount)).toFixed(2);
			}

			return 0;
		},
		totalAdultsPrice: function totalAdultsPrice() {
			return _.has(this.prices, 'adultPrice') ? parseFloat(this.prices.adultPrice).toFixed(2) : 0;
		},
		totalSeniorsPrice: function totalSeniorsPrice() {
			return _.has(this.prices, 'seniorPrice') ? parseFloat(this.prices.seniorPrice).toFixed(2) : 0;
		},
		totalChildrenPrice: function totalChildrenPrice() {
			return _.has(this.prices, 'childPrice') ? parseFloat(this.prices.childPrice).toFixed(2) : 0;
		},
		totalSlotPrice: function totalSlotPrice() {
			return _.has(this.prices, 'totalPrice') ? parseFloat(this.prices.totalPrice).toFixed(2) : 0;
		},
		totalPrice: function totalPrice() {
			var extras = _.reduce(this.extras, function (total, extra) {
				return total += parseFloat(extra.totalExtraPrice);
			}, 0.00);

			return parseFloat(parseFloat(this.totalSlotPrice) + parseFloat(extras)).toFixed(2);
		},
		showAdults: function showAdults() {
			return this.booking && this.booking.adults > 0;
		},
		showSeniors: function showSeniors() {
			return this.booking.seniors > 0;
		},
		showChildren: function showChildren() {
			return this.booking.children > 0;
		},
		showInfants: function showInfants() {
			return this.booking.babies > 0;
		},
		showCarers: function showCarers() {
			return this.booking.carers > 0;
		},
		showWheelchairs: function showWheelchairs() {
			return this.booking.wheelchairs > 0;
		},
		showExtras: function showExtras() {
			return this.extras && this.extras.length > 0;
		},
		showTotalPrice: function showTotalPrice() {
			return this.totalPrice > 0;
		},
		adultsLabel: function adultsLabel() {
			return this.booking.adults > 1 ? 'Adults' : 'Adult';
		},
		seniorsLabel: function seniorsLabel() {
			return this.booking.seniors > 1 ? 'Seniors' : 'Senior';
		},
		childrenLabel: function childrenLabel() {
			return this.booking.children > 1 ? 'Children' : 'Child';
		},
		infantsLabel: function infantsLabel() {
			return this.booking.babies > 1 ? 'Infants' : 'Infant';
		},
		carersLabel: function carersLabel() {
			return this.booking.carers > 1 ? 'Carers' : 'Carer';
		},
		wheelchairsLabel: function wheelchairsLabel() {
			return this.booking.wheelchairs > 1 ? 'Wheelchairs' : 'Wheelchair';
		},
		paidAmount: function paidAmount() {
			return this.$store.getters.getBooking.paidAmount;
		}
	},
	methods: {
		removeExtra: function removeExtra(id) {
			if (this.emitToRemove) {
				this.$emit('removeExtra', id);
			} else {
				this.$store.commit('removeExtra', id);
			}
		}
	}
});

/***/ }),
/* 222 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
	props: {
		value: Object,
		options: Array,
		locale: {
			type: String,
			default: 'en'
		},
		daysOfTheWeekFormat: {
			type: String,
			default: 'ddd'
		},
		weekdayAdjustment: {
			type: Number,
			default: 0
		},
		booking: Object,
		displayBackToParty: {
			type: Boolean,
			default: true
		},
		isSuperStar: {
			type: Boolean,
			default: false
		}
	},
	data: function data() {
		return {
			startDate: null,
			endDate: null,
			partsOfTheDay: [{
				label: 'Morning',
				start: '08:00',
				end: '11:30'
			}, {
				label: 'Midday',
				start: '11:30',
				end: '14:00'
			}, {
				label: 'Afternoon',
				start: '14:00',
				end: '16:30'
			}, {
				label: 'Twilight',
				start: '16:30',
				end: '18:00'
			}]
		};
	},
	beforeMount: function beforeMount() {
		this.startDate = _.head(this.options).date.clone().locale(this.locale);
		this.endDate = _.last(this.options).date.clone().locale(this.locale);
	},
	mounted: function mounted() {
		var _this = this;

		$(document).on('click', '.small-v-tooltip', function () {
			_this.$emit('continueBooking');
		});
	},
	beforeDestroy: function beforeDestroy() {
		$(document).off('click', '.small-v-tooltip');
	},

	computed: {
		mediumTooltipOptions: function mediumTooltipOptions() {
			return {
				trigger: 'click',
				placement: 'top',
				classes: 'day-selector__selected-wrapper -medium-day-selector-wrapper show-for-medium-only',
				content: '\n                    <div class="day-selector__responsive-selected">\n                        <div class="day-selector-resposive-close image-misc__image--cross"></div>\n                        <h1>You\'ve selected...</h1>\n                        <h2 class="day-selector__responsive-selected--date">\n                            ' + (this.value !== null && this.value.date ? this.value.date.format('dddd Do MMMM') : '') + '\n                        </h2>\n                        <div>\n                            ' + (this.showAdults ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.adults ? this.booking.adults : '') + 'x ' + this.adultsLabel + '\n                                    ' + (this.totalAdultsPrice ? '\xA3' + this.totalAdultsPrice : '') + '\n                                </h3>' : '') + '\n                            ' + (this.showSeniors ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.seniors ? this.booking.seniors : '') + 'x ' + this.seniorsLabel + '\n                                    ' + (this.totalSeniorsPrice ? '\xA3' + this.totalSeniorsPrice : '') + '\n                                </h3>\n                            ' : '') + '\n                            ' + (this.showChildren ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.children ? this.booking.children : '') + 'x ' + this.childrenLabel + '\n                                    ' + (this.totalChildrenPrice ? '\xA3' + this.totalChildrenPrice : '') + '\n                                </h3>\n                            ' : '') + '\n                           ' + (this.showInfants ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.babies ? this.booking.babies : '') + 'x ' + this.infantsLabel + '\n                                </h3>\n                            ' : '') + '\n                           ' + (this.showCarers ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.carers ? this.booking.carers : '') + 'x ' + this.carersLabel + '\n                                </h3>\n                            ' : '') + '\n                           ' + (this.showWheelchairs ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.wheelchairs ? this.booking.wheelchairs : '') + 'x ' + this.wheelchairsLabel + '\n                                </h3>\n                            ' : '') + '\n                        </div>\n                        <br>\n                        <div>\n                            <a class="button -inverse -mobile margin-bottom-medium small-v-tooltip">\n                                <span class="button__inner"><span class="button__text">Continue Booking</span>\n                                <svg class="button__arrow">\n                                    <use xlink:href="/images/svg/sprite.svg#button-arrow" xmlns:xlink="http://www.w3.org/1999/xlink"></use>\n                                </svg></span>\n                            </a>\n                        </div>\n                        ' + (this.isSuperStar ? '\n                            <div class="day-selector__super-star-day">\n                                <h2 class="heading-2--calendar-day"  style="margin-bottom: -5px;">\n                                    Please note:\n                                </h2>\n                                <p>\n                                    These days are specially designed for children with additional needs. For more information, please <a href="/superstar-days" class="text-link"  target="_blank">click here</a>\n                                </p>\n                            </div>\n                        ' : '') + '\n\n                    </div>'
			};
		},
		smallTooltipOptions: function smallTooltipOptions() {
			return {
				trigger: 'click',
				placement: 'top',
				classes: 'day-selector__selected-wrapper show-for-small-only',
				content: '\n                    <div class="day-selector__responsive-selected">\n                        <div class="day-selector-resposive-close image-misc__image--cross"></div>\n                        <h1>You\'ve selected...</h1>\n                        <h2 class="day-selector__responsive-selected--date">\n                            ' + (this.value !== null && this.value.date ? this.value.date.format('dddd Do MMMM') : '') + '\n                        </h2>\n                        <div>\n                            ' + (this.showAdults ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.adults ? this.booking.adults : '') + 'x ' + this.adultsLabel + '\n                                    ' + (this.totalAdultsPrice ? '\xA3' + this.totalAdultsPrice : '') + '\n                                </h3>' : '') + '\n                            ' + (this.showSeniors ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.seniors ? this.booking.seniors : '') + 'x ' + this.seniorsLabel + '\n                                    ' + (this.totalSeniorsPrice ? '\xA3' + this.totalSeniorsPrice : '') + '\n                                </h3>\n                            ' : '') + '\n                            ' + (this.showChildren ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.children ? this.booking.children : '') + 'x ' + this.childrenLabel + '\n                                    ' + (this.totalChildrenPrice ? '\xA3' + this.totalChildrenPrice : '') + '\n                                </h3>\n                            ' : '') + '\n                           ' + (this.showInfants ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.babies ? this.booking.babies : '') + 'x ' + this.infantsLabel + '\n                                </h3>\n                            ' : '') + '\n                           ' + (this.showCarers ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.carers ? this.booking.carers : '') + 'x ' + this.carersLabel + '\n                                </h3>\n                            ' : '') + '\n                           ' + (this.showWheelchairs ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.wheelchairs ? this.booking.wheelchairs : '') + 'x ' + this.wheelchairsLabel + '\n                                </h3>\n                            ' : '') + '\n                        </div>\n                        <br>\n                        <div>\n                            <a class="button -inverse -mobile margin-bottom-medium small-v-tooltip">\n                                <span class="button__inner"><span class="button__text">Continue Booking</span>\n                                <svg class="button__arrow">\n                                    <use xlink:href="/images/svg/sprite.svg#button-arrow" xmlns:xlink="http://www.w3.org/1999/xlink"></use>\n                                </svg></span>\n                            </a>\n                        </div>\n                        ' + (this.isSuperStar ? '\n                            <div class="day-selector__super-star-day">\n                                <h2 class="heading-2--calendar-day"  style="margin-bottom: -5px;">\n                                    Please note:\n                                </h2>\n                                <p>\n                                    These days are specially designed for children with additional needs. For more information, please <a href="/superstar-days" class="text-link" target="_blank">click here</a>\n                                </p>\n                            </div>\n                        ' : '') + '\n                    </div>'
			};
		},
		adultsLabel: function adultsLabel() {
			return this.booking.adults > 1 ? 'Adults' : 'Adult';
		},
		seniorsLabel: function seniorsLabel() {
			return this.booking.seniors > 1 ? 'Seniors' : 'Senior';
		},
		childrenLabel: function childrenLabel() {
			return this.booking.children > 1 ? 'Children' : 'Child';
		},
		infantsLabel: function infantsLabel() {
			return this.booking.babies > 1 ? 'Infants' : 'Infant';
		},
		carersLabel: function carersLabel() {
			return this.booking.carers > 1 ? 'Carers' : 'Carer';
		},
		wheelchairsLabel: function wheelchairsLabel() {
			return this.booking.wheelchairs > 1 ? 'Wheelchairs' : 'Wheelchair';
		},
		currentTotalPrice: function currentTotalPrice() {
			var booking = this.$store.getters.getBooking;

			if (booking) {
				return parseFloat(parseFloat(booking.adultsTickets) + parseFloat(booking.seniorAmount) + parseFloat(booking.childAmount) + parseFloat(booking.infantAmount) + parseFloat(booking.carerAmount)).toFixed(2);
			}

			return 0;
		},
		totalAdultsPrice: function totalAdultsPrice() {
			return _.has(this.prices, 'adultPrice') ? parseFloat(this.prices.adultPrice).toFixed(2) : 0;
		},
		totalSeniorsPrice: function totalSeniorsPrice() {
			return _.has(this.prices, 'seniorPrice') ? parseFloat(this.prices.seniorPrice).toFixed(2) : 0;
		},
		totalChildrenPrice: function totalChildrenPrice() {
			return _.has(this.prices, 'childPrice') ? parseFloat(this.prices.childPrice).toFixed(2) : 0;
		},
		totalSlotPrice: function totalSlotPrice() {
			return _.has(this.prices, 'totalPrice') ? parseFloat(this.prices.totalPrice).toFixed(2) : 0;
		},
		totalPrice: function totalPrice() {
			var extras = _.reduce(this.extras, function (total, extra) {
				return total += parseFloat(extra.totalExtraPrice);
			}, 0);

			return parseFloat(parseFloat(this.totalSlotPrice) + parseFloat(extras)).toFixed(2);
		},
		showAdults: function showAdults() {
			return this.booking && this.booking.adults > 0;
		},
		showSeniors: function showSeniors() {
			return this.booking.seniors > 0;
		},
		showChildren: function showChildren() {
			return this.booking.children > 0;
		},
		showInfants: function showInfants() {
			return this.booking.babies > 0;
		},
		showCarers: function showCarers() {
			return this.booking.carers > 0;
		},
		showWheelchairs: function showWheelchairs() {
			return this.booking.wheelchairs > 0;
		},
		showExtras: function showExtras() {
			return this.extras && this.extras.length > 0;
		},
		showTotalPrice: function showTotalPrice() {
			return this.totalPrice > 0;
		},
		daysOfTheWeek: function daysOfTheWeek() {
			var _this2 = this;

			return _.map([0, 1, 2, 3, 4, 5, 6], function (day) {
				var weekday = day + _this2.weekdayAdjustment;

				return moment().weekday(weekday).format(_this2.daysOfTheWeekFormat);
			});
		},
		weeks: function weeks() {
			var _this3 = this;

			if (this.startDate === null || this.endDate === null) {
				return [];
			}

			var currentWeek = this.startDate.clone().startOf('week').day(this.weekdayAdjustment);
			var endDate = this.endDate.clone().endOf('day');
			var weeks = [];

			var _loop = function _loop() {
				var currentDay = currentWeek.clone();
				var days = [];

				for (var i = 0; i < 7; i++) {
					var day = _.find(_this3.options, function (day) {
						day.date = moment(day.date);
						return day.date.isSame(currentDay, 'day');
					});

					if (typeof day === 'undefined') {
						day = {
							date: currentDay.clone(),
							availableSlots: 0,
							isActive: false,
							isSelected: false
						};
					}

					days.push(day);
					currentDay.add(1, 'day');
				}

				weeks.push(days);
				currentWeek.add(1, 'week');
			};

			while (currentWeek.isSameOrBefore(endDate)) {
				_loop();
			}

			return weeks;
		}
	},
	methods: {
		isCurrent: function isCurrent(day) {
			return this.value && day ? day.date.isSame(this.value.date, 'hour') : false;
		},
		change: function change(day) {
			var responsive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

			if (day.isActive) {
				if (responsive) {
					var activeInfo = $('.active.info').find('.day-selector__inside-date--small, .day-selector__inside-date--medium');
					$.each(activeInfo, function (k, i) {
						if (i._tooltip) {
							i._tooltip.hide();
						}
					});
				}
				this.$emit('change', day);
			}
		},
		groupTotal: function groupTotal(slot) {
			return parseFloat(parseFloat(slot.nicePrice) * (this.$store.state.adults + this.$store.state.seniors + this.$store.state.children)).toFixed(2);
		},
		backToCalendar: function backToCalendar() {
			this.$emit('backToCalendar');
		}
	}
});

/***/ }),
/* 223 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mixins_Booking__ = __webpack_require__(16);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ __webpack_exports__["default"] = ({
    mixins: [__WEBPACK_IMPORTED_MODULE_0__mixins_Booking__["a" /* default */]],
    data: function data() {
        return {
            selectedExtras: []
        };
    },
    beforeDestroy: function beforeDestroy() {
        _.forEach(this.availableExtras, function (extra) {
            extra.selectedValue = 0;
        });
    },

    methods: {
        expand: function expand(type) {
            var $overlay = $('#Overlay_' + type);
            var $images = $('#Images_' + type + ' .extra-selector__main-image');

            var $close = $overlay.find('.gallery-overlay__close');

            var $nextButton = $overlay.find('.polaroid-carousel__button--gallery-overlay.-next');
            var $prevButton = $overlay.find('.polaroid-carousel__button--gallery-overlay.-previous');

            var index = $images.index($images.filter(function (index, element) {
                return $(element).css('opacity') === '1';
            }));

            $overlay.addClass('-open');

            var swiper = new Swiper($overlay.find('.swiper-container'), {
                speed: 400,
                initialSlide: index,
                setWrapperSize: true,
                slidesPerView: 1,
                simulateTouch: false,
                preventClicks: true,
                nextButton: $nextButton,
                prevButton: $prevButton
            });

            $close.on('click', function () {
                $overlay.removeClass('-visible');

                setTimeout(function () {
                    $overlay.removeClass('-open');
                    swiper.destroy();
                }, 500);
            });

            setTimeout(function () {
                $overlay.addClass('-visible');
            }, 100);
        },
        reveal: function reveal(event, target) {
            $(event.target).toggleClass('extra-selector__more-info--open');
            $(target).toggleClass('show-for-large');
        },
        extraAdded: function extraAdded(id) {
            var _this = this;

            var responsive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var foundExtra = _.find(this.availableExtras, { id: id });
            this.closeToolTips();
            if (foundExtra && foundExtra.selectedValue > 0) {
                this.$emit('addExtra', foundExtra);
                setTimeout(function () {
                    _this.closeToolTips();
                }, 1500);
            }
        },
        closeToolTips: function closeToolTips() {
            var tt = $('.extra-selector__tooltip-included');
            $.each(tt, function (t, i) {
                if (i._tooltip && i._tooltip.hide) {
                    i._tooltip.hide();
                }
            });
        },
        mediumTooltip: function mediumTooltip(id) {
            var foundExtra = _.find(this.availableExtras, { id: id });
            return {
                trigger: 'click',
                placement: 'top',
                classes: 'day-selector__selected-wrapper extra-selector__tooltip hide-for-large',
                content: '\n                    <div class="day-selector__responsive-selected extra-selector__responsive-selected text-center">\n                        ' + (foundExtra.selectedValue > 0 ? foundExtra.selectedValue : '') + ' ' + foundExtra.name + ' <br /> has been added to your cart.\n                    </div>'
            };
        },
        massageExtraSteps: function massageExtraSteps(extra) {
            if (extra.multiple > 1) {
                return _.filter(extra.steps, function (step) {
                    return step === 25 || step === 50 || step === 75 || step === 100 || step === 150 || step === 200;
                });
            } else {
                return extra.steps;
            }
        }
    }
});

/***/ }),
/* 224 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vuejs_datepicker__ = __webpack_require__(200);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vuejs_datepicker___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vuejs_datepicker__);



/* harmony default export */ __webpack_exports__["default"] = ({
    extends: __WEBPACK_IMPORTED_MODULE_0_vuejs_datepicker___default.a,
    created: function created() {
        var _this = this;

        this.$on('opened', function () {
            _this.showMonthCalendar();
        });
        this.$on('changedMonth', function (month) {
            _this.setDate(month.timestamp);
            _this.close();
        });
    }
});

/***/ }),
/* 225 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
	props: {
		message: String,
		validationErrors: Array
	}
});

/***/ }),
/* 226 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
	props: {
		duration: {
			type: Number,
			default: 300
		},
		isExtras: {
			type: Boolean,
			default: false
		},
		defaultTimeLeft: {
			type: String,
			default: "20"
		}
	},
	data: function data() {
		return {
			hasTimeRemaining: true,
			reservationTimer: {
				minutes: 0,
				seconds: 0
			}
		};
	},
	mounted: function mounted() {
		this.startTimer();
	},

	computed: {
		alertTypeClass: function alertTypeClass() {
			return this.hasTimeRemaining ? 'alert-warning' : 'alert-danger';
		},
		timeUntilReservationExpires: function timeUntilReservationExpires() {
			var minutes = this.reservationTimer.minutes < 10 ? "0" + this.reservationTimer.minutes : this.reservationTimer.minutes;
			var seconds = this.reservationTimer.seconds < 10 ? "0" + this.reservationTimer.seconds : this.reservationTimer.seconds;

			return minutes + ':' + seconds;
		}
	},
	methods: {
		startTimer: function startTimer() {
			var _this = this;

			var timer = moment(this.$store.getters.reservationExpiry).clone().diff(moment(), 's');
			this.hasTimeRemaining = true;
			this.reservationTimer.minutes = parseInt(timer / 60, 10);
			this.reservationTimer.seconds = parseInt(timer % 60, 10);

			var interval = setInterval(function () {
				if (--timer <= 0) {
					clearInterval(interval);
					_this.hasTimeRemaining = false;
					_this.$emit('expired');
				}

				_this.reservationTimer.minutes = parseInt(timer / 60, 10);
				_this.reservationTimer.seconds = parseInt(timer % 60, 10);
			}, 1000);
		}
	}
});

/***/ }),
/* 227 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
	props: {
		options: Number,
		value: Object,
		party: Object,
		slots: Array,
		selectedDay: Object,
		booking: Object,
		isPremiumSearch: {
			type: Boolean,
			default: false
		}
	},
	data: function data() {
		return {
			partsOfTheDay: [{
				label: 'Morning',
				start: '08:00',
				end: '11:30'
			}, {
				label: 'Midday',
				start: '11:30',
				end: '14:00'
			}, {
				label: 'Afternoon',
				start: '14:00',
				end: '16:30'
			}, {
				label: 'Twilight',
				start: '16:30',
				end: '23:59'
			}]
		};
	},
	mounted: function mounted() {
		var _this = this;

		$(document).on('click', '.small-v-tooltip', function () {
			_this.$emit('continueBooking');
		});
	},
	beforeDestroy: function beforeDestroy() {
		$(document).off('click', '.small-v-tooltip');
	},

	computed: {
		mediumTooltipOptions: function mediumTooltipOptions() {
			return {
				trigger: 'click',
				placement: 'top',
				classes: 'show-for-medium-only slot-selector__medium',
				content: '\n                    <div class="day-selector__responsive-selected">\n                        <div class="day-selector-resposive-close image-misc__image--cross"></div>\n                        <h1>You\'ve selected...</h1>\n                        <h2 class="day-selector__responsive-selected--date">\n                            ' + (this.selectedDay !== null && this.selectedDay.date && this.value && this.value.time ? this.selectedDay.date.format('dddd Do MMMM') + ' @ ' + this.value.time : '') + '\n                        </h2>\n                        <div>\n                            ' + (this.showAdults ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.adults ? this.booking.adults : '') + 'x ' + this.adultsLabel + '\n                                    ' + (this.totalAdultsPrice ? '\xA3' + this.totalAdultsPrice : '') + '\n                                </h3>' : '') + '\n                            ' + (this.showSeniors ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.seniors ? this.booking.seniors : '') + 'x ' + this.seniorsLabel + '\n                                    ' + (this.totalSeniorsPrice ? '\xA3' + this.totalSeniorsPrice : '') + '\n                                </h3>\n                            ' : '') + '\n                            ' + (this.showChildren ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.children ? this.booking.children : '') + 'x ' + this.childrenLabel + '\n                                    ' + (this.totalChildrenPrice ? '\xA3' + this.totalChildrenPrice : '') + '\n                                </h3>\n                            ' : '') + '\n                           ' + (this.showInfants ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.babies ? this.booking.babies : '') + 'x ' + this.infantsLabel + '\n                                </h3>\n                            ' : '') + '\n                           ' + (this.showCarers ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.carers ? this.booking.carers : '') + 'x ' + this.carersLabel + '\n                                </h3>\n                            ' : '') + '\n                           ' + (this.showWheelchairs ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.wheelchairs ? this.booking.wheelchairs : '') + 'x ' + this.wheelchairsLabel + '\n                                </h3>\n                            ' : '') + '\n                        </div>\n                        <br>\n                        <div>\n                            <a class="button -inverse -mobile margin-bottom-small small-v-tooltip">\n                                <span class="button__inner"><span class="button__text">Continue Booking</span>\n                                <svg class="button__arrow">\n                                    <use xlink:href="/images/svg/sprite.svg#button-arrow" xmlns:xlink="http://www.w3.org/1999/xlink"></use>\n                                </svg></span>\n                            </a>\n                        </div>\n                        <div class="text-center slot-selector__whats-included">\n                            See what\u2019s included <div class="image-misc__image--arrowdown inline-block"></div>\n                        </div>\n                        ' + (this.isPremiumSearch ? '\n                                <div style="display: none;">\n                                    <ul class="booking-summary__list -responsive-whats-included">\n                                        <li>A private meet & greet with The Elf Travel Master</li>\n                                        <li>Front row seats in The Glade and a personal audience with Sage</li>\n                                        <li>Freedom of the Elven Village - stay for as long as you like, before you visit Father Christmas</li>\n                                        <li>A reserved table, and meal in the Elven Restaurant</li>\n                                        <li>A scrapbook containing the photos of your meeting with Father Christmas</li>\n                                        <li>Conker Hats for everybody</li>\n                                        <li>A copy of Mother Christmas\u2019 Puzzoodles book for every child</li>\n                                        <li>VIP parking</li>\n                                        <li>All of this is in addition to the Premium Lapland<sup>UK</sup> experience</li>\n                                    </ul>\n                               </div>\n\n                            ' : '\n                               <div style="display: none;">\n                                    <ul class="booking-summary__list -responsive-whats-included">\n                                        <li>Personalised invitation to every child from Father Christmas by post</li>\n                                        <li>Entry to Lapland<sup>UK</sup></li>\n                                        <li>Elf Passport for every child</li>\n                                        <li>All activities, and performances including ice skating</li>\n                                        <li>Beautiful gift from Father Christmas for every child</li>\n                                        <li>One free photo per booking</li>\n                                        <li>Booking fees</li>\n                                        <li>Parking at Whitmoor Forest</li>\n                                        <li>Christmas Morning Thank You card from Father Christmas for every child</li>\n                                    </ul>\n                               </div>\n                            ') + '\n\n                    </div>'
			};
		},
		smallTooltipOptions: function smallTooltipOptions() {
			return {
				trigger: 'click',
				placement: 'top',
				classes: 'show-for-small-only slot-selector__medium',
				content: '\n                    <div class="day-selector__responsive-selected">\n                        <div class="day-selector-resposive-close image-misc__image--cross"></div>\n                        <h1>You\'ve selected...</h1>\n                        <h2 class="day-selector__responsive-selected--date">\n                            ' + (this.selectedDay !== null && this.selectedDay.date && this.value && this.value.time ? this.selectedDay.date.format('dddd Do MMMM') + ' @ ' + this.value.time : '') + '\n                        </h2>\n                        <div>\n                            ' + (this.showAdults ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.adults ? this.booking.adults : '') + 'x ' + this.adultsLabel + '\n                                    ' + (this.totalAdultsPrice ? '\xA3' + this.totalAdultsPrice : '') + '\n                                </h3>' : '') + '\n                            ' + (this.showSeniors ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.seniors ? this.booking.seniors : '') + 'x ' + this.seniorsLabel + '\n                                    ' + (this.totalSeniorsPrice ? '\xA3' + this.totalSeniorsPrice : '') + '\n                                </h3>\n                            ' : '') + '\n                            ' + (this.showChildren ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.children ? this.booking.children : '') + 'x ' + this.childrenLabel + '\n                                    ' + (this.totalChildrenPrice ? '\xA3' + this.totalChildrenPrice : '') + '\n                                </h3>\n                            ' : '') + '\n                           ' + (this.showInfants ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.babies ? this.booking.babies : '') + 'x ' + this.infantsLabel + '\n                                </h3>\n                            ' : '') + '\n                           ' + (this.showCarers ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.carers ? this.booking.carers : '') + 'x ' + this.carersLabel + '\n                                </h3>\n                            ' : '') + '\n                           ' + (this.showWheelchairs ? '\n                                <h3>\n                                    ' + (this.booking && this.booking.wheelchairs ? this.booking.wheelchairs : '') + 'x ' + this.wheelchairsLabel + '\n                                </h3>\n                            ' : '') + '\n                        </div>\n\n                        <br>\n                        <div>\n                            <a class="button -inverse -mobile margin-bottom-small small-v-tooltip">\n                                <span class="button__inner"><span class="button__text">Continue Booking</span>\n                                <svg class="button__arrow">\n                                    <use xlink:href="/images/svg/sprite.svg#button-arrow" xmlns:xlink="http://www.w3.org/1999/xlink"></use>\n                                </svg></span>\n                            </a>\n                        </div>\n                        <div class="text-center slot-selector__whats-included">\n                            See what\u2019s included <div class="image-misc__image--arrowdown inline-block"></div>\n                        </div>\n                        ' + (this.isPremiumSearch ? '\n\n                                <div style="display: none;">\n                                    <ul class="booking-summary__list -responsive-whats-included">\n                                        <li>A private meet & greet with The Elf Travel Master</li>\n                                        <li>Front row seats in The Glade and a personal audience with Sage</li>\n                                        <li>Freedom of the Elven Village - stay for as long as you like, before you visit Father Christmas</li>\n                                        <li>A reserved table, and meal in the Elven Restaurant</li>\n                                        <li>A scrapbook containing the photos of your meeting with Father Christmas</li>\n                                        <li>Conker Hats for everybody</li>\n                                        <li>A copy of Mother Christmas\u2019 Puzzoodles book for every child</li>\n                                        <li>VIP parking</li>\n                                        <li>All of this is in addition to the Premium Lapland<sup>UK</sup> experience</li>\n                                    </ul>\n                               </div>\n\n                            ' : '\n                               <div style="display: none;">\n                                    <ul class="booking-summary__list -responsive-whats-included">\n                                        <li>Personalised invitation to every child from Father Christmas by post</li>\n                                        <li>Entry to Lapland<sup>UK</sup></li>\n                                        <li>Elf Passport for every child</li>\n                                        <li>All activities, and performances including ice skating</li>\n                                        <li>Beautiful gift from Father Christmas for every child</li>\n                                        <li>One free photo per booking</li>\n                                        <li>Booking fees</li>\n                                        <li>Parking at Whitmoor Forest</li>\n                                        <li>Christmas Morning Thank You card from Father Christmas for every child</li>\n                                    </ul>\n                               </div>\n                            ') + '\n                    </div>'
			};
		},
		adultsLabel: function adultsLabel() {
			return this.booking.adults > 1 ? 'Adults' : 'Adult';
		},
		seniorsLabel: function seniorsLabel() {
			return this.booking.seniors > 1 ? 'Seniors' : 'Senior';
		},
		childrenLabel: function childrenLabel() {
			return this.booking.children > 1 ? 'Children' : 'Child';
		},
		infantsLabel: function infantsLabel() {
			return this.booking.babies > 1 ? 'Infants' : 'Infant';
		},
		carersLabel: function carersLabel() {
			return this.booking.carers > 1 ? 'Carers' : 'Carer';
		},
		wheelchairsLabel: function wheelchairsLabel() {
			return this.booking.wheelchairs > 1 ? 'Wheelchairs' : 'Wheelchair';
		},
		currentTotalPrice: function currentTotalPrice() {
			var booking = this.$store.getters.getBooking;

			if (booking) {
				return parseFloat(parseFloat(booking.adultsTickets) + parseFloat(booking.seniorAmount) + parseFloat(booking.childAmount) + parseFloat(booking.infantAmount) + parseFloat(booking.carerAmount)).toFixed(2);
			}

			return 0;
		},
		totalAdultsPrice: function totalAdultsPrice() {
			return _.has(this.prices, 'adultPrice') ? parseFloat(this.prices.adultPrice).toFixed(2) : 0;
		},
		totalSeniorsPrice: function totalSeniorsPrice() {
			return _.has(this.prices, 'seniorPrice') ? parseFloat(this.prices.seniorPrice).toFixed(2) : 0;
		},
		totalChildrenPrice: function totalChildrenPrice() {
			return _.has(this.prices, 'childPrice') ? parseFloat(this.prices.childPrice).toFixed(2) : 0;
		},
		totalSlotPrice: function totalSlotPrice() {
			return _.has(this.prices, 'totalPrice') ? parseFloat(this.prices.totalPrice).toFixed(2) : 0;
		},
		totalPrice: function totalPrice() {
			var extras = _.reduce(this.extras, function (total, extra) {
				return total += parseFloat(extra.totalExtraPrice);
			}, 0);

			return parseFloat(parseFloat(this.totalSlotPrice) + parseFloat(extras)).toFixed(2);
		},
		showAdults: function showAdults() {
			return this.booking && this.booking.adults > 0;
		},
		showSeniors: function showSeniors() {
			return this.booking.seniors > 0;
		},
		showChildren: function showChildren() {
			return this.booking.children > 0;
		},
		showInfants: function showInfants() {
			return this.booking.babies > 0;
		},
		showCarers: function showCarers() {
			return this.booking.carers > 0;
		},
		showWheelchairs: function showWheelchairs() {
			return this.booking.wheelchairs > 0;
		},
		showExtras: function showExtras() {
			return this.extras && this.extras.length > 0;
		},
		showTotalPrice: function showTotalPrice() {
			return this.totalPrice > 0;
		},
		optionsGrid: function optionsGrid() {
			var _ref,
			    _this2 = this;

			return (_ref = _).zip.apply(_ref, _toConsumableArray(_.map(this.partsOfTheDay, function (part) {
				return _.filter(_this2.slots, function (slot) {
					var startTime = part.start.split(':');
					var endTime = part.end.split(':');

					var start = _this2.selectedDay.date.clone().hour(_.head(startTime)).minute(_.last(startTime, 1));
					var end = _this2.selectedDay.date.clone().hour(_.head(endTime)).minute(_.last(endTime, 1));

					var slotSplit = slot.time.split(':');
					var slotDateTime = _this2.selectedDay.date.clone().set({
						hour: _.head(slotSplit),
						minute: _.last(slotSplit)
					});
					return slotDateTime.isBetween(start, end, null, '[)');
				});
			})));
		},
		optionsGridSmall: function optionsGridSmall() {
			var _this3 = this;

			return _.map(this.partsOfTheDay, function (part) {
				return {
					part: part.label, times: _.filter(_this3.slots, function (slot) {
						var startTime = part.start.split(':');
						var endTime = part.end.split(':');

						var start = _this3.selectedDay.date.clone().hour(_.head(startTime)).minute(_.last(startTime, 1));
						var end = _this3.selectedDay.date.clone().hour(_.head(endTime)).minute(_.last(endTime, 1));

						var slotSplit = slot.time.split(':');
						var slotDateTime = _this3.selectedDay.date.clone().set({
							hour: _.head(slotSplit),
							minute: _.last(slotSplit)
						});
						return slotDateTime.isBetween(start, end, null, '[)');
					})
				};
			});
		}
	},
	methods: {
		isCurrent: function isCurrent(id) {
			if (!id) {
				return false;
			}
			return this.value && id ? this.value.id === id : false;
		},
		change: function change(slot) {
			var responsive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

			if ((typeof slot === 'undefined' ? 'undefined' : _typeof(slot)) === 'object') {
				if (responsive) {
					var activeInfo = $('.active.info').find('.day-selector__inside-date--small, .day-selector__inside-date--medium');
					$.each(activeInfo, function (k, i) {
						if (i._tooltip) {
							i._tooltip.hide();
						}
					});
					return this.$emit('change', slot);
				}
				this.$emit('change', slot);
			}
		},
		groupTotal: function groupTotal(slot) {
			return parseFloat(parseFloat(slot.nicePrice) * (this.party.adults + this.party.seniors + this.party.children)).toFixed(2);
		}
	}
});

/***/ }),
/* 228 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
	props: {
		gatewayUrl: String,
		reserveReq: String,
		grandTotal: String,
		hash: String,
		transactionId: String,
		successRedirectionUrl: String,
		failureRedirectionUrl: String,
		paymentAmountCurrency: String,
		paymentAmountAmount: String,
		customerId: String,
		firstName: String,
		lastName: String,
		telephone: String,
		email: String,
		confirmEmail: String,
		adultsOnly: Boolean,
		guestFirstName: String,
		cardCardholderName: String,
		cardType: String,
		cardNumber: String,
		expiryDate: String,
		cvn: String,
		issueNo: String,
		addressLine1: String,
		addressLine2: String,
		city: String,
		postCode: String,
		country: String,
		referrerReasonId: Number
	}
});

/***/ }),
/* 229 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mixins_PaymentErrors__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__PaymentErrors_vue__ = __webpack_require__(260);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__PaymentErrors_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__PaymentErrors_vue__);
//
//
//
//
//
//
//
//
//



/* harmony default export */ __webpack_exports__["default"] = ({
    components: {
        'payment-errors': __WEBPACK_IMPORTED_MODULE_1__PaymentErrors_vue___default.a
    },
    mixins: [__WEBPACK_IMPORTED_MODULE_0__mixins_PaymentErrors__["a" /* default */]],
    computed: {
        validationErrors: function validationErrors() {
            var validationErrors = _.trim(this.paymentErrors.errors, '[]');

            if (validationErrors.length === 0) {
                return [];
            }

            return [validationErrors];
        }
    }
});

/***/ }),
/* 230 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/*\
 |*|
 |*|	:: cookies.js ::
 |*|
 |*|	A complete cookies reader/writer framework with full unicode support.
 |*|
 |*|	Revision #3 - July 13th, 2017
 |*|
 |*|	https://developer.mozilla.org/en-US/docs/Web/API/document.cookie
 |*|	https://developer.mozilla.org/User:fusionchess
 |*|	https://github.com/madmurphy/cookies.js
 |*|
 |*|	This framework is released under the GNU Public License, version 3 or later.
 |*|	http://www.gnu.org/licenses/gpl-3.0-standalone.html
 |*|
 |*|	Syntaxes:
 |*|
 |*|	* docCookies.setItem(name, value[, end[, path[, domain[, secure]]]])
 |*|	* docCookies.getItem(name)
 |*|	* docCookies.removeItem(name[, path[, domain]])
 |*|	* docCookies.hasItem(name)
 |*|	* docCookies.keys()
 |*|
 \*/

/* harmony default export */ __webpack_exports__["a"] = ({

	/**
  * Property to check that cookie polyfill was used
  */
	type: 'cookie',

	keysCache: null,

	getItem: function getItem(sKey) {
		if (!sKey) {
			return null;
		}

		return decodeURIComponent(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*" + encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*([^;]*).*$)|^.*$"), "$1")) || null;
	},

	setItem: function setItem(sKey, sValue, vEnd) {
		var sPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '/';
		var sDomain = arguments[4];
		var bSecure = arguments[5];

		if (!sKey || /^(?:expires|max\-age|path|domain|secure)$/i.test(sKey)) {
			return false;
		}

		var sExpires = "";

		if (vEnd) {
			switch (vEnd.constructor) {
				case Number:
					sExpires = vEnd === Infinity ? "; expires=Fri, 31 Dec 9999 23:59:59 GMT" : "; max-age=" + vEnd;
					/*
      Note: Despite officially defined in RFC 6265, the use of `max-age` is not compatible with any
      version of Internet Explorer, Edge and some mobile browsers. Therefore passing a number to
      the end parameter might not work as expected. A possible solution might be to convert the the
      relative time to an absolute time. For instance, replacing the previous line with:
      */
					/*
      sExpires = vEnd === Infinity ? "; expires=Fri, 31 Dec 9999 23:59:59 GMT" : "; expires=" + (new Date(vEnd * 1e3 + Date.now())).toUTCString();
      */
					break;
				case String:
					sExpires = "; expires=" + vEnd;
					break;
				case Date:
					sExpires = "; expires=" + vEnd.toUTCString();
					break;
			}
		}
		document.cookie = encodeURIComponent(sKey) + "=" + encodeURIComponent(sValue) + sExpires + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "") + (bSecure ? "; secure" : "");

		this.keysCache = null;
		return true;
	},

	removeItem: function removeItem(sKey, sPath, sDomain) {
		if (!this.hasItem(sKey)) {
			return false;
		}

		document.cookie = encodeURIComponent(sKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT" + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "");

		this.keysCache = null;
		return true;
	},

	hasItem: function hasItem(sKey) {
		if (!sKey || /^(?:expires|max\-age|path|domain|secure)$/i.test(sKey)) {
			return false;
		}

		return new RegExp("(?:^|;\\s*)" + encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=").test(document.cookie);
	},

	keys: function keys() {
		var aKeys = document.cookie.replace(/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g, "").split(/\s*(?:\=[^;]*)?;\s*/);

		for (var nLen = aKeys.length, nIdx = 0; nIdx < nLen; nIdx++) {
			aKeys[nIdx] = decodeURIComponent(aKeys[nIdx]);
		}

		this.keysCache = aKeys;
		return aKeys;
	},

	/**
  * Get length. For compatability with localStorage
  */
	get length() {
		return this.keys().length;
	},

	key: function key(index) {
		if (null === this.keysCache) {
			this.keysCache = this.keys();
		}

		return this.keysCache[index];
	}
});

/***/ }),
/* 231 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__storage__ = __webpack_require__(232);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var VueLocalStorage = function () {
	function VueLocalStorage() {
		_classCallCheck(this, VueLocalStorage);

		this.storage = __WEBPACK_IMPORTED_MODULE_0__storage__["a" /* default */];
		this.clear();
	}

	_createClass(VueLocalStorage, [{
		key: 'install',
		value: function install(Vue) {
			Vue.localStorage = Vue.prototype.$localStorage = this;
		}
	}, {
		key: 'set',
		value: function set(name, value) {
			var expire = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

			var keyName = 'vuels__' + name;
			var data = JSON.stringify({ value: value, expire: expire > 0 ? new Date().getTime() + expire : expire });

			if (typeof this.storage.type !== 'undefined' && this.storage.type === 'cookie') {
				this.storage.setItem(keyName, data, expire);
			} else {
				this.storage.setItem(keyName, data);
			}
		}
	}, {
		key: 'get',
		value: function get(name) {
			var item = this.storage.getItem('vuels__' + name);
			if (null !== item) return JSON.parse(item).value;
			return null;
		}
	}, {
		key: 'remove',
		value: function remove(name) {
			return this.storage.removeItem('vuels__' + name);
		}
	}, {
		key: 'key',
		value: function key(index) {
			return this.storage.key(index);
		}

		/**
   * Removes expired items
   */

	}, {
		key: 'clear',
		value: function clear() {
			if (this.length === 0) {
				return;
			}

			for (var i = 0; i < this.length; i++) {
				var key = this.storage.key(i);

				if (false === /vuels__/i.test(key)) {
					continue;
				}

				var current = JSON.parse(this.storage.getItem(key));

				if (current.expire > 0 && current.expire < new Date().getTime()) {
					this.storage.removeItem(key);
				}
			}
		}
	}, {
		key: 'length',
		get: function get() {
			return this.storage.length;
		}
	}]);

	return VueLocalStorage;
}();

if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
	module.exports = new VueLocalStorage();
} else if (window && window.Vue) {
	window.Vue.use(new VueLocalStorage());
}
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(273)(module)))

/***/ }),
/* 232 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__cookie__ = __webpack_require__(230);


var storage = void 0;

var isLocalStorageAvailable = function isLocalStorageAvailable() {
	try {
		var randomKey = 'testvuels';
		window.sessionStorage.setItem(randomKey, '1');
		window.sessionStorage.removeItem(randomKey);

		return true;
	} catch (error) {
		return false;
	}
};

if (isLocalStorageAvailable()) {
	storage = window.sessionStorage;
} else {
	storage = __WEBPACK_IMPORTED_MODULE_0__cookie__["a" /* default */];
}

/* harmony default export */ __webpack_exports__["a"] = (storage);

/***/ }),
/* 233 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vuex__ = __webpack_require__(28);


/* harmony default export */ __webpack_exports__["a"] = ({
    computed: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_vuex__["mapGetters"])({
        additionalTickets: 'getAdditionalTickets',
        additionalExtras: 'getAdditionalExtras'
    })
});

/***/ }),
/* 234 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ({
    created: function created() {
        this.$store.commit('clearDayAndSlot');
        this.$store.commit('clearAdditionalTickets');
        this.$store.commit('clearAdditionalExtras');
    }
});

/***/ }),
/* 235 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vuex__ = __webpack_require__(28);


/* harmony default export */ __webpack_exports__["a"] = ({
    computed: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_vuex__["mapGetters"])({
        order: 'order',
        checkout: 'checkout',
        referrers: 'referrers'
    })
});

/***/ }),
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */
/***/ (function(module, exports) {

module.exports = [
	{
		"code": "AF",
		"name": "Afghanistan"
	},
	{
		"code": "AX",
		"name": "Åland Islands"
	},
	{
		"code": "AL",
		"name": "Albania"
	},
	{
		"code": "DZ",
		"name": "Algeria"
	},
	{
		"code": "AS",
		"name": "American Samoa"
	},
	{
		"code": "AD",
		"name": "Andorra"
	},
	{
		"code": "AO",
		"name": "Angola"
	},
	{
		"code": "AI",
		"name": "Anguilla"
	},
	{
		"code": "AQ",
		"name": "Antarctica"
	},
	{
		"code": "AG",
		"name": "Antigua and Barbuda"
	},
	{
		"code": "AR",
		"name": "Argentina"
	},
	{
		"code": "AM",
		"name": "Armenia"
	},
	{
		"code": "AW",
		"name": "Aruba"
	},
	{
		"code": "AU",
		"name": "Australia"
	},
	{
		"code": "AT",
		"name": "Austria"
	},
	{
		"code": "AZ",
		"name": "Azerbaijan"
	},
	{
		"code": "BS",
		"name": "Bahamas"
	},
	{
		"code": "BH",
		"name": "Bahrain"
	},
	{
		"code": "BD",
		"name": "Bangladesh"
	},
	{
		"code": "BB",
		"name": "Barbados"
	},
	{
		"code": "BY",
		"name": "Belarus"
	},
	{
		"code": "BE",
		"name": "Belgium"
	},
	{
		"code": "BZ",
		"name": "Belize"
	},
	{
		"code": "BJ",
		"name": "Benin"
	},
	{
		"code": "BM",
		"name": "Bermuda"
	},
	{
		"code": "BT",
		"name": "Bhutan"
	},
	{
		"code": "BO",
		"name": "Bolivia, Plurinational State of"
	},
	{
		"code": "BQ",
		"name": "Bonaire, Sint Eustatius and Saba"
	},
	{
		"code": "BA",
		"name": "Bosnia and Herzegovina"
	},
	{
		"code": "BW",
		"name": "Botswana"
	},
	{
		"code": "BV",
		"name": "Bouvet Island"
	},
	{
		"code": "BR",
		"name": "Brazil"
	},
	{
		"code": "IO",
		"name": "British Indian Ocean Territory"
	},
	{
		"code": "BN",
		"name": "Brunei Darussalam"
	},
	{
		"code": "BG",
		"name": "Bulgaria"
	},
	{
		"code": "BF",
		"name": "Burkina Faso"
	},
	{
		"code": "BI",
		"name": "Burundi"
	},
	{
		"code": "KH",
		"name": "Cambodia"
	},
	{
		"code": "CM",
		"name": "Cameroon"
	},
	{
		"code": "CA",
		"name": "Canada"
	},
	{
		"code": "CV",
		"name": "Cape Verde"
	},
	{
		"code": "KY",
		"name": "Cayman Islands"
	},
	{
		"code": "CF",
		"name": "Central African Republic"
	},
	{
		"code": "TD",
		"name": "Chad"
	},
	{
		"code": "CL",
		"name": "Chile"
	},
	{
		"code": "CN",
		"name": "China"
	},
	{
		"code": "CX",
		"name": "Christmas Island"
	},
	{
		"code": "CC",
		"name": "Cocos (Keeling) Islands"
	},
	{
		"code": "CO",
		"name": "Colombia"
	},
	{
		"code": "KM",
		"name": "Comoros"
	},
	{
		"code": "CG",
		"name": "Congo"
	},
	{
		"code": "CD",
		"name": "Congo, the Democratic Republic of the"
	},
	{
		"code": "CK",
		"name": "Cook Islands"
	},
	{
		"code": "CR",
		"name": "Costa Rica"
	},
	{
		"code": "CI",
		"name": "Côte d'Ivoire"
	},
	{
		"code": "HR",
		"name": "Croatia"
	},
	{
		"code": "CU",
		"name": "Cuba"
	},
	{
		"code": "CW",
		"name": "Curaçao"
	},
	{
		"code": "CY",
		"name": "Cyprus"
	},
	{
		"code": "CZ",
		"name": "Czech Republic"
	},
	{
		"code": "DK",
		"name": "Denmark"
	},
	{
		"code": "DJ",
		"name": "Djibouti"
	},
	{
		"code": "DM",
		"name": "Dominica"
	},
	{
		"code": "DO",
		"name": "Dominican Republic"
	},
	{
		"code": "EC",
		"name": "Ecuador"
	},
	{
		"code": "EG",
		"name": "Egypt"
	},
	{
		"code": "SV",
		"name": "El Salvador"
	},
	{
		"code": "GQ",
		"name": "Equatorial Guinea"
	},
	{
		"code": "ER",
		"name": "Eritrea"
	},
	{
		"code": "EE",
		"name": "Estonia"
	},
	{
		"code": "ET",
		"name": "Ethiopia"
	},
	{
		"code": "FK",
		"name": "Falkland Islands (Malvinas)"
	},
	{
		"code": "FO",
		"name": "Faroe Islands"
	},
	{
		"code": "FJ",
		"name": "Fiji"
	},
	{
		"code": "FI",
		"name": "Finland"
	},
	{
		"code": "FR",
		"name": "France"
	},
	{
		"code": "GF",
		"name": "French Guiana"
	},
	{
		"code": "PF",
		"name": "French Polynesia"
	},
	{
		"code": "TF",
		"name": "French Southern Territories"
	},
	{
		"code": "GA",
		"name": "Gabon"
	},
	{
		"code": "GM",
		"name": "Gambia"
	},
	{
		"code": "GE",
		"name": "Georgia"
	},
	{
		"code": "DE",
		"name": "Germany"
	},
	{
		"code": "GH",
		"name": "Ghana"
	},
	{
		"code": "GI",
		"name": "Gibraltar"
	},
	{
		"code": "GR",
		"name": "Greece"
	},
	{
		"code": "GL",
		"name": "Greenland"
	},
	{
		"code": "GD",
		"name": "Grenada"
	},
	{
		"code": "GP",
		"name": "Guadeloupe"
	},
	{
		"code": "GU",
		"name": "Guam"
	},
	{
		"code": "GT",
		"name": "Guatemala"
	},
	{
		"code": "GG",
		"name": "Guernsey"
	},
	{
		"code": "GN",
		"name": "Guinea"
	},
	{
		"code": "GW",
		"name": "Guinea-Bissau"
	},
	{
		"code": "GY",
		"name": "Guyana"
	},
	{
		"code": "HT",
		"name": "Haiti"
	},
	{
		"code": "HM",
		"name": "Heard Island and McDonald Islands"
	},
	{
		"code": "VA",
		"name": "Holy See (Vatican City State)"
	},
	{
		"code": "HN",
		"name": "Honduras"
	},
	{
		"code": "HK",
		"name": "Hong Kong"
	},
	{
		"code": "HU",
		"name": "Hungary"
	},
	{
		"code": "IS",
		"name": "Iceland"
	},
	{
		"code": "IN",
		"name": "India"
	},
	{
		"code": "ID",
		"name": "Indonesia"
	},
	{
		"code": "IR",
		"name": "Iran, Islamic Republic of"
	},
	{
		"code": "IQ",
		"name": "Iraq"
	},
	{
		"code": "IE",
		"name": "Ireland"
	},
	{
		"code": "IM",
		"name": "Isle of Man"
	},
	{
		"code": "IL",
		"name": "Israel"
	},
	{
		"code": "IT",
		"name": "Italy"
	},
	{
		"code": "JM",
		"name": "Jamaica"
	},
	{
		"code": "JP",
		"name": "Japan"
	},
	{
		"code": "JE",
		"name": "Jersey"
	},
	{
		"code": "JO",
		"name": "Jordan"
	},
	{
		"code": "KZ",
		"name": "Kazakhstan"
	},
	{
		"code": "KE",
		"name": "Kenya"
	},
	{
		"code": "KI",
		"name": "Kiribati"
	},
	{
		"code": "KP",
		"name": "Korea, Democratic People's Republic of"
	},
	{
		"code": "KR",
		"name": "Korea, Republic of"
	},
	{
		"code": "KW",
		"name": "Kuwait"
	},
	{
		"code": "KG",
		"name": "Kyrgyzstan"
	},
	{
		"code": "LA",
		"name": "Lao People's Democratic Republic"
	},
	{
		"code": "LV",
		"name": "Latvia"
	},
	{
		"code": "LB",
		"name": "Lebanon"
	},
	{
		"code": "LS",
		"name": "Lesotho"
	},
	{
		"code": "LR",
		"name": "Liberia"
	},
	{
		"code": "LY",
		"name": "Libya"
	},
	{
		"code": "LI",
		"name": "Liechtenstein"
	},
	{
		"code": "LT",
		"name": "Lithuania"
	},
	{
		"code": "LU",
		"name": "Luxembourg"
	},
	{
		"code": "MO",
		"name": "Macao"
	},
	{
		"code": "MK",
		"name": "Macedonia, the Former Yugoslav Republic of"
	},
	{
		"code": "MG",
		"name": "Madagascar"
	},
	{
		"code": "MW",
		"name": "Malawi"
	},
	{
		"code": "MY",
		"name": "Malaysia"
	},
	{
		"code": "MV",
		"name": "Maldives"
	},
	{
		"code": "ML",
		"name": "Mali"
	},
	{
		"code": "MT",
		"name": "Malta"
	},
	{
		"code": "MH",
		"name": "Marshall Islands"
	},
	{
		"code": "MQ",
		"name": "Martinique"
	},
	{
		"code": "MR",
		"name": "Mauritania"
	},
	{
		"code": "MU",
		"name": "Mauritius"
	},
	{
		"code": "YT",
		"name": "Mayotte"
	},
	{
		"code": "MX",
		"name": "Mexico"
	},
	{
		"code": "FM",
		"name": "Micronesia, Federated States of"
	},
	{
		"code": "MD",
		"name": "Moldova, Republic of"
	},
	{
		"code": "MC",
		"name": "Monaco"
	},
	{
		"code": "MN",
		"name": "Mongolia"
	},
	{
		"code": "ME",
		"name": "Montenegro"
	},
	{
		"code": "MS",
		"name": "Montserrat"
	},
	{
		"code": "MA",
		"name": "Morocco"
	},
	{
		"code": "MZ",
		"name": "Mozambique"
	},
	{
		"code": "MM",
		"name": "Myanmar"
	},
	{
		"code": "NA",
		"name": "Namibia"
	},
	{
		"code": "NR",
		"name": "Nauru"
	},
	{
		"code": "NP",
		"name": "Nepal"
	},
	{
		"code": "NL",
		"name": "Netherlands"
	},
	{
		"code": "NC",
		"name": "New Caledonia"
	},
	{
		"code": "NZ",
		"name": "New Zealand"
	},
	{
		"code": "NI",
		"name": "Nicaragua"
	},
	{
		"code": "NE",
		"name": "Niger"
	},
	{
		"code": "NG",
		"name": "Nigeria"
	},
	{
		"code": "NU",
		"name": "Niue"
	},
	{
		"code": "NF",
		"name": "Norfolk Island"
	},
	{
		"code": "MP",
		"name": "Northern Mariana Islands"
	},
	{
		"code": "NO",
		"name": "Norway"
	},
	{
		"code": "OM",
		"name": "Oman"
	},
	{
		"code": "PK",
		"name": "Pakistan"
	},
	{
		"code": "PW",
		"name": "Palau"
	},
	{
		"code": "PS",
		"name": "Palestine, State of"
	},
	{
		"code": "PA",
		"name": "Panama"
	},
	{
		"code": "PG",
		"name": "Papua New Guinea"
	},
	{
		"code": "PY",
		"name": "Paraguay"
	},
	{
		"code": "PE",
		"name": "Peru"
	},
	{
		"code": "PH",
		"name": "Philippines"
	},
	{
		"code": "PN",
		"name": "Pitcairn"
	},
	{
		"code": "PL",
		"name": "Poland"
	},
	{
		"code": "PT",
		"name": "Portugal"
	},
	{
		"code": "PR",
		"name": "Puerto Rico"
	},
	{
		"code": "QA",
		"name": "Qatar"
	},
	{
		"code": "RE",
		"name": "Réunion"
	},
	{
		"code": "RO",
		"name": "Romania"
	},
	{
		"code": "RU",
		"name": "Russian Federation"
	},
	{
		"code": "RW",
		"name": "Rwanda"
	},
	{
		"code": "BL",
		"name": "Saint Barthélemy"
	},
	{
		"code": "SH",
		"name": "Saint Helena, Ascension and Tristan da Cunha"
	},
	{
		"code": "KN",
		"name": "Saint Kitts and Nevis"
	},
	{
		"code": "LC",
		"name": "Saint Lucia"
	},
	{
		"code": "MF",
		"name": "Saint Martin (French part)"
	},
	{
		"code": "PM",
		"name": "Saint Pierre and Miquelon"
	},
	{
		"code": "VC",
		"name": "Saint Vincent and the Grenadines"
	},
	{
		"code": "WS",
		"name": "Samoa"
	},
	{
		"code": "SM",
		"name": "San Marino"
	},
	{
		"code": "ST",
		"name": "Sao Tome and Principe"
	},
	{
		"code": "SA",
		"name": "Saudi Arabia"
	},
	{
		"code": "SN",
		"name": "Senegal"
	},
	{
		"code": "RS",
		"name": "Serbia"
	},
	{
		"code": "SC",
		"name": "Seychelles"
	},
	{
		"code": "SL",
		"name": "Sierra Leone"
	},
	{
		"code": "SG",
		"name": "Singapore"
	},
	{
		"code": "SX",
		"name": "Sint Maarten (Dutch part)"
	},
	{
		"code": "SK",
		"name": "Slovakia"
	},
	{
		"code": "SI",
		"name": "Slovenia"
	},
	{
		"code": "SB",
		"name": "Solomon Islands"
	},
	{
		"code": "SO",
		"name": "Somalia"
	},
	{
		"code": "ZA",
		"name": "South Africa"
	},
	{
		"code": "GS",
		"name": "South Georgia and the South Sandwich Islands"
	},
	{
		"code": "SS",
		"name": "South Sudan"
	},
	{
		"code": "ES",
		"name": "Spain"
	},
	{
		"code": "LK",
		"name": "Sri Lanka"
	},
	{
		"code": "SD",
		"name": "Sudan"
	},
	{
		"code": "SR",
		"name": "Suriname"
	},
	{
		"code": "SJ",
		"name": "Svalbard and Jan Mayen"
	},
	{
		"code": "SZ",
		"name": "Swaziland"
	},
	{
		"code": "SE",
		"name": "Sweden"
	},
	{
		"code": "CH",
		"name": "Switzerland"
	},
	{
		"code": "SY",
		"name": "Syrian Arab Republic"
	},
	{
		"code": "TW",
		"name": "Taiwan, Province of China"
	},
	{
		"code": "TJ",
		"name": "Tajikistan"
	},
	{
		"code": "TZ",
		"name": "Tanzania, United Republic of"
	},
	{
		"code": "TH",
		"name": "Thailand"
	},
	{
		"code": "TL",
		"name": "Timor-Leste"
	},
	{
		"code": "TG",
		"name": "Togo"
	},
	{
		"code": "TK",
		"name": "Tokelau"
	},
	{
		"code": "TO",
		"name": "Tonga"
	},
	{
		"code": "TT",
		"name": "Trinidad and Tobago"
	},
	{
		"code": "TN",
		"name": "Tunisia"
	},
	{
		"code": "TR",
		"name": "Turkey"
	},
	{
		"code": "TM",
		"name": "Turkmenistan"
	},
	{
		"code": "TC",
		"name": "Turks and Caicos Islands"
	},
	{
		"code": "TV",
		"name": "Tuvalu"
	},
	{
		"code": "UG",
		"name": "Uganda"
	},
	{
		"code": "UA",
		"name": "Ukraine"
	},
	{
		"code": "AE",
		"name": "United Arab Emirates"
	},
	{
		"code": "GB",
		"name": "United Kingdom"
	},
	{
		"code": "US",
		"name": "United States"
	},
	{
		"code": "UM",
		"name": "United States Minor Outlying Islands"
	},
	{
		"code": "UY",
		"name": "Uruguay"
	},
	{
		"code": "UZ",
		"name": "Uzbekistan"
	},
	{
		"code": "VU",
		"name": "Vanuatu"
	},
	{
		"code": "VE",
		"name": "Venezuela, Bolivarian Republic of"
	},
	{
		"code": "VN",
		"name": "Viet Nam"
	},
	{
		"code": "VG",
		"name": "Virgin Islands, British"
	},
	{
		"code": "VI",
		"name": "Virgin Islands, U.S."
	},
	{
		"code": "WF",
		"name": "Wallis and Futuna"
	},
	{
		"code": "EH",
		"name": "Western Sahara"
	},
	{
		"code": "YE",
		"name": "Yemen"
	},
	{
		"code": "ZM",
		"name": "Zambia"
	},
	{
		"code": "ZW",
		"name": "Zimbabwe"
	}
];

/***/ }),
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(381),
  /* template */
  __webpack_require__(675),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/ChildForm.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] ChildForm.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-a7b1707a", Component.options)
  } else {
    hotAPI.reload("data-v-a7b1707a", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(222),
  /* template */
  __webpack_require__(268),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/DaySelector.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] DaySelector.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-6be25b1e", Component.options)
  } else {
    hotAPI.reload("data-v-6be25b1e", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(223),
  /* template */
  __webpack_require__(270),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/ExtraSelector.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] ExtraSelector.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-dfe5225c", Component.options)
  } else {
    hotAPI.reload("data-v-dfe5225c", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(224),
  /* template */
  null,
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/MonthPicker.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-178e1131", Component.options)
  } else {
    hotAPI.reload("data-v-178e1131", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(225),
  /* template */
  __webpack_require__(269),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/PaymentErrors.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] PaymentErrors.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-7cea9a58", Component.options)
  } else {
    hotAPI.reload("data-v-7cea9a58", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(227),
  /* template */
  __webpack_require__(267),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/SlotSelector.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] SlotSelector.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-6b732f0a", Component.options)
  } else {
    hotAPI.reload("data-v-6b732f0a", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(228),
  /* template */
  __webpack_require__(264),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/booking-portal-pages/GatewayForm.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] GatewayForm.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-3ecb67fd", Component.options)
  } else {
    hotAPI.reload("data-v-3ecb67fd", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [(_vm.isExtras) ? [_c('div', {
    staticClass: "extra-selector__extra-timer-bg"
  }, [_c('div', {
    staticClass: "row nopadding"
  }, [_vm._m(0), _vm._v(" "), _vm._m(1), _vm._v(" "), _vm._m(2), _vm._v(" "), _vm._m(3), _vm._v(" "), _c('div', {
    staticClass: "small-10 column extra-selector__small-time-text nopadding extra-timer__hourglass-wrapper hide-for-small-only"
  }, [_c('div', {
    staticClass: "extra-timer__timer-copy"
  }, [_c('strong', [_vm._v("\n                            We will reserve your place at Lapland"), _c('sup', [_vm._v("UK")]), _vm._v(" for " + _vm._s(_vm.defaultTimeLeft) + " minutes while you complete your order\n                        ")])]), _vm._v(" "), _c('div', {
    staticClass: "extra-timer__timer-copy--time"
  }, [_c('strong', [(_vm.hasTimeRemaining) ? _c('p', {
    staticClass: "extra-selector__time"
  }, [_vm._v("\n                                " + _vm._s(_vm.timeUntilReservationExpires) + "\n                            ")]) : [_vm._v("\n                                Your session has expired! You now need to search for a tour again.\n                            ")]], 2)])]), _vm._v(" "), _c('div', {
    staticClass: "small-9 column extra-selector__small-time-text nopadding extra-timer__hourglass-wrapper hide-for-medium"
  }, [_c('div', {
    staticClass: "extra-timer__timer-copy"
  }, [_c('strong', [_vm._v("\n                            We will reserve your place at Lapland"), _c('sup', [_vm._v("UK")]), _vm._v(" for " + _vm._s(_vm.defaultTimeLeft) + " minutes while you complete your order\n                        ")])]), _vm._v(" "), _c('div', {
    staticClass: "extra-timer__timer-copy--time"
  }, [_c('strong', [(_vm.hasTimeRemaining) ? _c('p', {
    staticClass: "extra-selector__time"
  }, [_vm._v("\n                                " + _vm._s(_vm.timeUntilReservationExpires) + "\n                            ")]) : [_vm._v("\n                                Your session has expired! You now need to search for a tour again.\n                            ")]], 2)])])])])] : [_c('div', {
    staticClass: "image-misc__image--timerbox hide-for-small-only"
  }, [_c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "small-2 column"
  }, [_c('div', {
    staticClass: "image-misc__image--largehourglass"
  })]), _vm._v(" "), _c('div', {
    staticClass: "small-10 column extra-selector__large-time-text"
  }, [_vm._v("\n                    We will reserve your place at Lapland"), _c('sup', [_vm._v("UK")]), _vm._v(" for " + _vm._s(_vm.defaultTimeLeft) + " minutes while you complete your order\n                    "), (_vm.hasTimeRemaining) ? _c('p', {
    staticClass: "extra-selector__time"
  }, [_vm._v("\n                        " + _vm._s(_vm.timeUntilReservationExpires) + "\n                    ")]) : [_vm._v("\n                        Your session has expired! You now need to search for a tour again.\n                    ")]], 2)])]), _vm._v(" "), _c('div', {
    staticClass: "image-misc__image--mobiletimerbox"
  }, [_c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "small-2 column"
  }, [_c('div', {
    staticClass: "image-misc__image--mobilehourglass"
  }), _vm._v(" "), (_vm.hasTimeRemaining) ? _c('p', {
    staticClass: "extra-selector__time-small"
  }, [_vm._v("\n                        " + _vm._s(_vm.timeUntilReservationExpires) + "\n                    ")]) : [_vm._v("\n                        Your session has expired! You now need to search for a tour again.\n                    ")]], 2), _vm._v(" "), _c('div', {
    staticClass: "small-10 column extra-selector__small-time-text"
  }, [_vm._v("\n                    We will reserve your place at Lapland"), _c('sup', [_vm._v("UK")]), _vm._v(" for " + _vm._s(_vm.defaultTimeLeft) + " minutes while you complete your order\n                ")])])])]], 2)
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 medium-12 large-12 column nopadding"
  }, [_c('h1', {
    staticClass: "heading-1-justlovely-48"
  }, [_vm._v("\n                        The perfect extras for the perfect Lapland"), _c('sup', [_vm._v("UK")]), _vm._v(" experience!\n                    ")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 medium-12 large-12 column nopadding"
  }, [_c('div', {
    staticClass: "extra-timer__main-body-text"
  }, [_vm._v("\n                        Make your Lapland"), _c('sup', [_vm._v("UK")]), _vm._v(" experience even more memorable by getting to know our characters before your visit, spending elf money on your day trip, or your child finding the very toy they made with the elves in their stocking on Christmas morning. Order these Magical Extras now then sit back and wait for your family’s Christmas adventure to begin.\n                    ")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-3 column nopadding extra-timer__hourglass-wrapper hide-for-medium"
  }, [_c('div', {
    staticClass: "image-misc__image--largehourglass"
  })])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-1 column nopadding extra-timer__hourglass-wrapper hide-for-small-only"
  }, [_c('div', {
    staticClass: "image-misc__image--largehourglass"
  })])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-00956bfd", module.exports)
  }
}

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('form', {
    attrs: {
      "id": "paymentGatewayForm",
      "method": "POST",
      "action": _vm.gatewayUrl
    }
  }, [_c('input', {
    attrs: {
      "type": "hidden",
      "name": "reserveReq"
    },
    domProps: {
      "value": _vm.reserveReq
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "grandTotal"
    },
    domProps: {
      "value": _vm.grandTotal
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "hash"
    },
    domProps: {
      "value": _vm.hash
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "transactionId"
    },
    domProps: {
      "value": _vm.transactionId
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "successRedirectionUrl"
    },
    domProps: {
      "value": _vm.successRedirectionUrl
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "failureRedirectionUrl"
    },
    domProps: {
      "value": _vm.failureRedirectionUrl
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "paymentAmount.currency"
    },
    domProps: {
      "value": _vm.paymentAmountCurrency
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "paymentAmount.amount"
    },
    domProps: {
      "value": _vm.paymentAmountAmount
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "customer.customerId"
    },
    domProps: {
      "value": _vm.customerId
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "firstName"
    },
    domProps: {
      "value": _vm.firstName
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "lastName"
    },
    domProps: {
      "value": _vm.lastName
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "telephone"
    },
    domProps: {
      "value": _vm.telephone
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "email"
    },
    domProps: {
      "value": _vm.email
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "confirmEmail"
    },
    domProps: {
      "value": _vm.confirmEmail
    }
  }), _vm._v(" "), (_vm.adultsOnly) ? [(_vm.guestFirstName) ? _c('input', {
    attrs: {
      "type": "hidden",
      "name": "adultFirstName"
    },
    domProps: {
      "value": _vm.guestFirstName
    }
  }) : _vm._e()] : [(_vm.guestFirstName) ? _c('input', {
    attrs: {
      "type": "hidden",
      "name": "childFirstName"
    },
    domProps: {
      "value": _vm.guestFirstName
    }
  }) : _vm._e()], _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "creditCard.cardholderName"
    },
    domProps: {
      "value": _vm.cardCardholderName
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "creditCard.type"
    },
    domProps: {
      "value": _vm.cardType
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "creditCard.cardNumber"
    },
    domProps: {
      "value": _vm.cardNumber
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "creditCard.expiryDate"
    },
    domProps: {
      "value": _vm.expiryDate
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "creditCard.cvn"
    },
    domProps: {
      "value": _vm.cvn
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "creditCard.issueNo"
    },
    domProps: {
      "value": _vm.issueNo
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "billingAddress.addressLine1"
    },
    domProps: {
      "value": _vm.addressLine1
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "billingAddress.addressLine2"
    },
    domProps: {
      "value": _vm.addressLine2
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "billingAddress.city"
    },
    domProps: {
      "value": _vm.city
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "billingAddress.postCode"
    },
    domProps: {
      "value": _vm.postCode
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "billingAddress.country"
    },
    domProps: {
      "value": _vm.country
    }
  }), _vm._v(" "), _c('input', {
    attrs: {
      "type": "hidden",
      "name": "referrerReasonId"
    },
    domProps: {
      "value": _vm.referrerReasonId
    }
  })], 2)
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-3ecb67fd", module.exports)
  }
}

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "column"
  }, [_c('payment-errors', {
    attrs: {
      "message": this.paymentErrors.errorMessage,
      "validation-errors": _vm.validationErrors
    }
  })], 1)])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-448bfcab", module.exports)
  }
}

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('form', {
    attrs: {
      "id": "booking-details-payment-form"
    },
    on: {
      "submit": function($event) {
        $event.preventDefault();
        null($event)
      }
    }
  }, [_c('div', {
    staticClass: "row nopadding",
    attrs: {
      "id": "booking-details"
    }
  }, [_vm._m(0), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    class: ['input-container', {
      'input-container--danger': _vm.hasError('customer.firstName')
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "firstName"
    }
  }, [_vm._v("First name")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.customer.firstName),
      expression: "customer.firstName"
    }],
    attrs: {
      "type": "text",
      "required": "",
      "id": "firstName",
      "placeholder": "First name",
      "disabled": _vm.existingCustomer,
      "autocomplete": "on"
    },
    domProps: {
      "value": (_vm.customer.firstName)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.customer.firstName = $event.target.value
      }
    }
  }), _vm._v(" "), ((_vm.errors['customer.firstName'] !== null)) ? _c('div', {
    staticClass: "input-container__error"
  }, [_vm._v(" " + _vm._s(_vm.errors['customer.firstName']) + "\n                ")]) : _vm._e()])]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    class: ['input-container', {
      'input-container--danger': _vm.hasError('customer.lastName')
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "lastName"
    }
  }, [_vm._v("Last name")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.customer.lastName),
      expression: "customer.lastName"
    }],
    attrs: {
      "type": "text",
      "required": "",
      "placeholder": "Last name",
      "id": "lastName",
      "disabled": _vm.existingCustomer,
      "autocomplete": "on"
    },
    domProps: {
      "value": (_vm.customer.lastName)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.customer.lastName = $event.target.value
      }
    }
  }), _vm._v(" "), ((_vm.errors['customer.lastName'] !== null)) ? _c('div', {
    staticClass: "input-container__error"
  }, [_vm._v(" " + _vm._s(_vm.errors['customer.lastName']) + "\n                ")]) : _vm._e()])]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    class: ['input-container', {
      'input-container--danger': _vm.hasError('customer.emailAddress')
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "emailAddress"
    }
  }, [_vm._v("Email address")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.customer.emailAddress),
      expression: "customer.emailAddress"
    }],
    attrs: {
      "type": "email",
      "required": "",
      "placeholder": "Email address",
      "id": "emailAddress",
      "disabled": _vm.existingCustomer,
      "autocomplete": "on"
    },
    domProps: {
      "value": (_vm.customer.emailAddress)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.customer.emailAddress = $event.target.value
      }
    }
  }), _vm._v(" "), ((_vm.errors['customer.emailAddress'] !== null)) ? _c('div', {
    staticClass: "input-container__error"
  }, [_vm._v(" " + _vm._s(_vm.errors['customer.emailAddress']) + "\n                ")]) : _vm._e()])]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [(!_vm.existingCustomer) ? _c('div', {
    class: ['input-container', {
      'input-container--danger': _vm.hasError('customer.emailAddressConfirmation')
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "emailAddressConfirmation"
    }
  }, [_vm._v("Repeat email address")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.customer.emailAddressConfirmation),
      expression: "customer.emailAddressConfirmation"
    }],
    attrs: {
      "type": "text",
      "required": "",
      "placeholder": "Repeat email address",
      "id": "emailAddressConfirmation",
      "autocomplete": "on"
    },
    domProps: {
      "value": (_vm.customer.emailAddressConfirmation)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.customer.emailAddressConfirmation = $event.target.value
      }
    }
  }), _vm._v(" "), ((_vm.errors['customer.emailAddressConfirmation'] !== null)) ? _c('div', {
    staticClass: "input-container__error"
  }, [_vm._v("\n                    " + _vm._s(_vm.errors['customer.emailAddressConfirmation']) + "\n                ")]) : _vm._e()]) : _vm._e()]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    class: ['input-container', {
      'input-container--danger': _vm.hasError('customer.telephone')
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "telephone"
    }
  }, [_vm._v("Telephone")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.customer.telephone),
      expression: "customer.telephone"
    }],
    attrs: {
      "type": "tel",
      "required": "",
      "placeholder": "Telephone",
      "id": "telephone",
      "disabled": _vm.existingCustomer,
      "autocomplete": "on"
    },
    domProps: {
      "value": (_vm.customer.telephone)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.customer.telephone = $event.target.value
      }
    }
  }), _vm._v(" "), ((_vm.errors['customer.telephone'] !== null)) ? _c('div', {
    staticClass: "input-container__error"
  }, [_vm._v(" " + _vm._s(_vm.errors['customer.telephone']) + "\n                ")]) : _vm._e()])]), _vm._v(" "), (_vm.canShowChildren) ? [_vm._m(1), _vm._v(" "), _vm._m(2), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, _vm._l((_vm.numberOfGuests), function(number) {
    return _c('div', {
      key: number,
      class: ['input-container', {
        'input-container--danger': (typeof _vm.guestErrors[number - 1] !== 'undefined')
      }]
    }, [_c('label', {
      staticClass: "input-container__text text-right",
      attrs: {
        "for": ['guestName-' + number]
      }
    }, [_vm._v("Child " + _vm._s(number) + " first name")]), _vm._v(" "), _c('input', {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: (_vm.guests[number - 1].name),
        expression: "guests[number - 1].name"
      }],
      attrs: {
        "type": "text",
        "required": "",
        "id": ['guestName-' + number],
        "placeholder": "Child name"
      },
      domProps: {
        "value": (_vm.guests[number - 1].name)
      },
      on: {
        "input": function($event) {
          if ($event.target.composing) { return; }
          _vm.guests[number - 1].name = $event.target.value
        }
      }
    }), _vm._v(" "), ((typeof _vm.guestErrors[number - 1] !== 'undefined')) ? _c('div', {
      staticClass: "input-container__error"
    }, [_vm._v(" " + _vm._s(_vm.guestErrors[number - 1]) + "\n                    ")]) : _vm._e()])
  }))] : _vm._e(), _vm._v(" "), (_vm.adultsOnly) ? [_vm._m(3), _vm._v(" "), _vm._m(4), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, _vm._l((_vm.numberOfGuests), function(number) {
    return _c('div', {
      key: number,
      class: ['input-container', {
        'input-container--danger': (typeof _vm.guestErrors[number - 1] !== 'undefined')
      }]
    }, [_c('label', {
      staticClass: "input-container__text text-right",
      attrs: {
        "for": ['guestName-' + number]
      }
    }, [_vm._v("Guest " + _vm._s(number) + " first name")]), _vm._v(" "), _c('input', {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: (_vm.guests[number - 1].name),
        expression: "guests[number - 1].name"
      }],
      attrs: {
        "type": "text",
        "required": "",
        "id": ['guestName-' + number],
        "placeholder": "Guest name"
      },
      domProps: {
        "value": (_vm.guests[number - 1].name)
      },
      on: {
        "input": function($event) {
          if ($event.target.composing) { return; }
          _vm.guests[number - 1].name = $event.target.value
        }
      }
    }), _vm._v(" "), ((typeof _vm.guestErrors[number - 1] !== 'undefined')) ? _c('div', {
      staticClass: "input-container__error"
    }, [_vm._v(" " + _vm._s(_vm.guestErrors[number - 1]) + "\n                    ")]) : _vm._e()])
  }))] : _vm._e(), _vm._v(" "), _vm._m(5), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.promoCodeApplied !== 2),
      expression: "promoCodeApplied !== 2"
    }],
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    class: ['input-container', {
      'input-container--danger': !_vm.hasValidCardName
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "cardName"
    }
  }, [_vm._v("Name on card")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.card.name),
      expression: "card.name"
    }],
    attrs: {
      "type": "text",
      "required": "",
      "placeholder": "Name on card",
      "id": "cardName"
    },
    domProps: {
      "value": (_vm.card.name)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.card.name = $event.target.value
      }
    }
  }), _vm._v(" "), (!_vm.hasValidCardName) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v("The card name does not appear to be valid.")]) : _vm._e()])]), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.promoCodeApplied !== 2),
      expression: "promoCodeApplied !== 2"
    }],
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    class: ['input-container', {
      'input-container--danger': !_vm.hasValidCardType
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "cardType"
    }
  }, [_vm._v("Card type")]), _vm._v(" "), _c('multiselect', {
    attrs: {
      "id": "cardType",
      "track-by": "type",
      "label": "label",
      "placeholder": "Select card type",
      "options": _vm.cards,
      "searchable": false,
      "allow-empty": false,
      "show-labels": false
    },
    model: {
      value: (_vm.cardType),
      callback: function($$v) {
        _vm.cardType = $$v
      },
      expression: "cardType"
    }
  }), _vm._v(" "), (!_vm.hasValidCardType) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v("The card type is not selected.")]) : _vm._e()], 1)]), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.promoCodeApplied !== 2),
      expression: "promoCodeApplied !== 2"
    }],
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    class: ['input-container -creditcard', {
      'input-container--danger': !_vm.hasValidCardNumber
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "cardNumber"
    }
  }, [_vm._v("Card number")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.card.number),
      expression: "card.number"
    }],
    attrs: {
      "type": "tel",
      "id": "cardNumber",
      "required": "",
      "placeholder": "Card number"
    },
    domProps: {
      "value": (_vm.card.number)
    },
    on: {
      "keypress": _vm.maskCardNumber,
      "keyup": _vm.setCardType,
      "change": function($event) {
        _vm.validateCard(_vm.card.number)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.card.number = $event.target.value
      }
    }
  }), _vm._v(" "), (!_vm.hasValidCardNumber) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v("The card number does not appear to be valid.")]) : _vm._e()])]), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.promoCodeApplied !== 2),
      expression: "promoCodeApplied !== 2"
    }],
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    class: ['input-container -calendar', {
      'input-container--danger': !_vm.hasValidCardExpiry
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "cardExpiry"
    }
  }, [_vm._v("Expiration date")]), _vm._v(" "), _c('month-picker', {
    attrs: {
      "id": "cardExpiry",
      "placeholder": "Expiration date",
      "format": "MM/yyyy",
      "disabled": _vm.pickerDisabled
    },
    model: {
      value: (_vm.card.expiry),
      callback: function($$v) {
        _vm.card.expiry = $$v
      },
      expression: "card.expiry"
    }
  }), _vm._v(" "), (!_vm.hasValidCardExpiry) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v("The expiry date does not appear to be valid.")]) : _vm._e()], 1)]), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.promoCodeApplied !== 2),
      expression: "promoCodeApplied !== 2"
    }],
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    class: ['input-container', {
      'input-container--danger': !_vm.hasValidCV2
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "cardCV2"
    }
  }, [_vm._v("Card CV2")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.card.cv2),
      expression: "card.cv2"
    }],
    attrs: {
      "type": "tel",
      "id": "cardCV2",
      "required": "",
      "placeholder": "Card CV2"
    },
    domProps: {
      "value": (_vm.card.cv2)
    },
    on: {
      "keypress": _vm.maskCV2,
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.card.cv2 = $event.target.value
      }
    }
  }), _vm._v(" "), (!_vm.hasValidCV2) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v("The CV2 value does not appear to be valid.")]) : _vm._e()])]), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.promoCodeApplied !== 2),
      expression: "promoCodeApplied !== 2"
    }],
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container"
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "cardIssueNumber"
    }
  }, [_vm._v("Issue number")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.card.issueNumber),
      expression: "card.issueNumber"
    }],
    attrs: {
      "type": "tel",
      "id": "cardIssueNumber",
      "placeholder": "Issue number"
    },
    domProps: {
      "value": (_vm.card.issueNumber)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.card.issueNumber = $event.target.value
      }
    }
  })])]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [(!_vm.existingCustomer) ? _c('div', {
    staticClass: "input-container -promocode"
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "promoCode"
    }
  }, [_vm._v("Promotion code")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.promoCode),
      expression: "promoCode"
    }],
    attrs: {
      "type": "text",
      "id": "promoCode",
      "placeholder": "Promo code",
      "disabled": _vm.promoCodeApplied > 0
    },
    domProps: {
      "value": (_vm.promoCode)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.promoCode = $event.target.value
      }
    }
  }), _vm._v(" "), _c('span', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.promoCodeApplied === 0 || _vm.promoCodeApplied === -1 || _vm.promoCodeApplied === -2),
      expression: "promoCodeApplied === 0 || promoCodeApplied === -1 || promoCodeApplied === -2"
    }],
    staticClass: "pc-apply",
    on: {
      "click": _vm.applyPromoCode
    }
  }), _vm._v(" "), (_vm.promoCodeApplied > 0) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v("Promotional code applied successfully.")]) : _vm._e(), _vm._v(" "), (_vm.promoCodeApplied === -1) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v("This promotional code has already been used.")]) : _vm._e(), _vm._v(" "), (_vm.promoCodeApplied < -1) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v("There has been an error applying the promotional code.")]) : _vm._e()]) : _vm._e()]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container"
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "billingAddress1"
    }
  }, [_vm._v("Address line 1")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.billing.address1),
      expression: "billing.address1"
    }],
    attrs: {
      "type": "text",
      "required": "",
      "id": "billingAddress1",
      "placeholder": "Address line 1",
      "autocomplete": "on"
    },
    domProps: {
      "value": (_vm.billing.address1)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.billing.address1 = $event.target.value
      }
    }
  }), _vm._v(" "), ((_vm.errors['billing.address1'] !== null)) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v(" " + _vm._s(_vm.errors['billing.address1']) + " ")]) : _vm._e()])]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container"
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "billingAddress2"
    }
  }, [_vm._v("Address line 2")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.billing.address2),
      expression: "billing.address2"
    }],
    attrs: {
      "type": "text",
      "id": "billingAddress2",
      "placeholder": "Address line 2",
      "autocomplete": "on"
    },
    domProps: {
      "value": (_vm.billing.address2)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.billing.address2 = $event.target.value
      }
    }
  })])]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container"
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "billingCity"
    }
  }, [_vm._v("City")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.billing.city),
      expression: "billing.city"
    }],
    attrs: {
      "type": "text",
      "required": "",
      "id": "billingCity",
      "placeholder": "City",
      "autocomplete": "on"
    },
    domProps: {
      "value": (_vm.billing.city)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.billing.city = $event.target.value
      }
    }
  }), _vm._v(" "), ((_vm.errors['billing.city'] !== null)) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v(" " + _vm._s(_vm.errors['billing.city']) + " ")]) : _vm._e()])]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container"
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "billingPostCode"
    }
  }, [_vm._v("Postcode")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.billing.postcode),
      expression: "billing.postcode"
    }],
    attrs: {
      "type": "text",
      "required": "",
      "id": "billingPostCode",
      "placeholder": "Postcode",
      "autocomplete": "on"
    },
    domProps: {
      "value": (_vm.billing.postcode)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.billing.postcode = $event.target.value
      }
    }
  }), _vm._v(" "), ((_vm.errors['billing.postcode'] !== null)) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v(" " + _vm._s(_vm.errors['billing.postcode']) + " ")]) : _vm._e()])]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container"
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "billingCountry"
    }
  }, [_vm._v("Country")]), _vm._v(" "), _c('multiselect', {
    attrs: {
      "id": "billingCountry",
      "track-by": "code",
      "label": "name",
      "placeholder": "Country",
      "options": _vm.countries,
      "searchable": true,
      "allow-empty": false,
      "show-labels": false
    },
    model: {
      value: (_vm.billing.country),
      callback: function($$v) {
        _vm.billing.country = $$v
      },
      expression: "billing.country"
    }
  })], 1)]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [(!_vm.existingCustomer) ? _c('div', {
    staticClass: "input-container"
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "referrerReason"
    }
  }, [_vm._v("Where did you hear about us?")]), _vm._v(" "), _c('multiselect', {
    staticClass: "where-did-you-hear",
    attrs: {
      "id": "referrerReason",
      "options": _vm.referrers,
      "label": "name",
      "searchable": false,
      "allow-empty": false,
      "show-labels": false
    },
    model: {
      value: (_vm.referrerReason),
      callback: function($$v) {
        _vm.referrerReason = $$v
      },
      expression: "referrerReason"
    }
  })], 1) : _vm._e()]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [(!_vm.existingCustomer) ? _c('div', {
    staticClass: "input-container"
  }, [_c('label', {
    staticClass: "input-container__text text-right -terms",
    attrs: {
      "for": "terms"
    }
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.hasAcceptedTerms),
      expression: "hasAcceptedTerms"
    }],
    attrs: {
      "type": "checkbox",
      "required": "",
      "id": "terms"
    },
    domProps: {
      "checked": Array.isArray(_vm.hasAcceptedTerms) ? _vm._i(_vm.hasAcceptedTerms, null) > -1 : (_vm.hasAcceptedTerms)
    },
    on: {
      "__c": function($event) {
        var $$a = _vm.hasAcceptedTerms,
          $$el = $event.target,
          $$c = $$el.checked ? (true) : (false);
        if (Array.isArray($$a)) {
          var $$v = null,
            $$i = _vm._i($$a, $$v);
          if ($$c) {
            $$i < 0 && (_vm.hasAcceptedTerms = $$a.concat($$v))
          } else {
            $$i > -1 && (_vm.hasAcceptedTerms = $$a.slice(0, $$i).concat($$a.slice($$i + 1)))
          }
        } else {
          _vm.hasAcceptedTerms = $$c
        }
      }
    }
  }), _vm._v("\n                    I have read and accepted the "), _c('a', {
    staticClass: "text-link",
    attrs: {
      "href": "/terms-and-conditions",
      "target": "_blank"
    }
  }, [_vm._v("Terms & Conditions")])])]) : _vm._e()]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container"
  }, [(!_vm.hideButton) ? [_c('a', {
    class: ['button margin-bottom-medium rotate-ccw-small booking-detail__make-payment-button', {
      'booking-summary__continue--disabled': !_vm.canMakePayment
    }],
    on: {
      "click": function($event) {
        _vm.canMakePayment ? _vm.createOrder() : _vm.fakeCall()
      }
    }
  }, [_c('span', {
    staticClass: "button__inner"
  }, [_c('span', {
    staticClass: "button__text"
  }, [_vm._v("Make Payment")]), _vm._v(" "), _c('svg', {
    staticClass: "button__arrow"
  }, [_c('use', {
    attrs: {
      "xlink:href": "/images/svg/sprite.svg#button-arrow",
      "xmlns:xlink": "http://www.w3.org/1999/xlink"
    }
  })])])])] : [_c('a', {
    class: ['button margin-bottom-medium rotate-ccw-small booking-detail__make-payment-button', {
      'booking-summary__continue--disabled': !_vm.canMakePayment
    }],
    on: {
      "click": function($event) {
        _vm.fakeCall()
      }
    }
  }, [_c('span', {
    staticClass: "button__inner"
  }, [_c('span', {
    staticClass: "button__text"
  }, [_vm._v("Make Payment")]), _vm._v(" "), _c('svg', {
    staticClass: "button__arrow"
  }, [_c('use', {
    attrs: {
      "xlink:href": "/images/svg/sprite.svg#button-arrow",
      "xmlns:xlink": "http://www.w3.org/1999/xlink"
    }
  })])])])]], 2)]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column"
  }, [(_vm.checkout !== null && _vm.order !== null) ? _c('gateway-form', {
    attrs: {
      "gatewayUrl": _vm.checkout.paymentGatewayUrl,
      "reserveReq": _vm.reservationId,
      "grandTotal": _vm.checkout.grandTotal,
      "hash": _vm.checkout.paymentRequestParameters.hash,
      "transactionId": _vm.checkout.paymentRequestParameters.transactionId,
      "successRedirectionUrl": this.successUrl,
      "failureRedirectionUrl": this.failureUrl,
      "paymentAmountCurrency": _vm.GBP,
      "paymentAmountAmount": _vm.checkout.grandTotal,
      "customerId": _vm.checkout.paymentRequestParameters.customerId,
      "firstName": _vm.order.orderView.firstName,
      "lastName": _vm.order.orderView.lastName,
      "telephone": _vm.order.orderView.telephone,
      "email": _vm.order.orderView.emailAddress,
      "confirmEmail": _vm.order.orderView.emailAddress,
      "adultsOnly": _vm.adultsOnly,
      "guestFirstName": _vm.guestFirstName,
      "cardCardholderName": _vm.card.name,
      "cardType": _vm.card.type.toUpperCase(),
      "cardNumber": _vm.card.number.replace(/\s+/g, ''),
      "expiryDate": _vm.formattedCardExpiry,
      "cvn": _vm.card.cv2,
      "issueNo": _vm.card.issueNumber,
      "addressLine1": _vm.order.orderView.addressLine1,
      "addressLine2": _vm.order.orderView.addressLine2,
      "city": _vm.order.orderView.city,
      "postCode": _vm.order.orderView.postCode,
      "country": _vm.order.orderView.country,
      "referrerReasonId": _vm.order.orderView.referrerReasonId
    }
  }) : _vm._e()], 1)], 2)])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('h2', {
    staticClass: "heading-2__booking-detail text-center"
  }, [_vm._v("Customer Details")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('h2', {
    staticClass: "heading-2__booking-detail text-center"
  }, [_vm._v("Child ticket details")]), _vm._v(" "), _c('p', {
    staticClass: "text-center booking-detail__children_alert"
  }, [_c('strong', [_vm._v("Please note:")]), _vm._v("\n                    Your invitations from Father Christmas will be addressed to your children using the names you\n                    enter here. Please make sure you check these names before moving on as you won’t be able to edit\n                    these later. Child tickets are non-transferable.\n                ")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('p', {
    staticClass: "booking-detail__children_alert"
  }, [_c('strong', {
    staticStyle: {
      "text-transform": "uppercase"
    }
  }, [_vm._v("\n                        Please only enter your children's first names. You can update their surnames later in the 'Personalise my Visit' section of the website.\n                    ")])])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('h2', {
    staticClass: "heading-2__booking-detail text-center"
  }, [_vm._v("Adult ticket details")]), _vm._v(" "), _c('p', {
    staticClass: "text-center booking-detail__children_alert"
  }, [_c('strong', [_vm._v("Please note:")]), _vm._v("\n                    Your invitations from Father Christmas will be addressed to your guests using the names you\n                    enter here. Please make sure you check these names before moving on as you won’t be able to edit\n                    these later. These tickets are non-transferable.\n                ")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('p', {
    staticClass: "booking-detail__children_alert"
  }, [_c('strong', {
    staticStyle: {
      "text-transform": "uppercase"
    }
  }, [_vm._v("\n                        Please only enter your guest's first names. You can update their surnames later in the 'Personalise my Visit' section of the website.\n                    ")])])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('h2', {
    staticClass: "heading-2__booking-detail text-center"
  }, [_vm._v("Payment Details")])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-525e4776", module.exports)
  }
}

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row nopadding"
  }, [_vm._l((_vm.partsOfTheDay), function(part) {
    return _c('div', {
      staticClass: "small-3 medium-3 large-3 column text-center show-for-medium "
    }, [_c('h2', {
      staticClass: "heading-2--calendar-day"
    }, [_vm._v("\n            " + _vm._s(part.label) + "\n        ")])])
  }), _vm._v(" "), _vm._l((_vm.optionsGrid), function(row) {
    return _c('div', {
      staticClass: "small-12 medium-12 large-12 column text-center show-for-large nopadding"
    }, [_c('div', {
      staticClass: "row nopadding slot-selector__slots-wrapper"
    }, _vm._l((row), function(slot) {
      return _c('div', {
        class: ['small-3 medium-3 large-3 column nopadding', {
          active: (slot && slot.id)
        }, {
          info: _vm.isCurrent((slot && slot.id) ? slot.id : false)
        }],
        on: {
          "click": function($event) {
            slot.id ? _vm.change(slot) : null
          }
        }
      }, [_c('div', {
        staticClass: "slot-selector__slot-inner"
      }, [(slot && slot.id) ? [_c('h3', [_vm._v(_vm._s(slot.time))]), _vm._v(" "), _c('div', [_c('span', {
        staticClass: "slot-selector__group-total"
      }, [_vm._v("\n                               Group Total:\n                            ")]), _vm._v(" "), _c('span', {
        staticClass: "slot-selector__group-price"
      }, [_vm._v("\n                                £" + _vm._s(slot.totalPrice) + "\n                            ")]), _vm._v(" "), ((slot.information !== '' && slot.information.join !== 'undefined')) ? _c('div', {
        staticClass: "slot-selector__info text-left"
      }, _vm._l((slot.information), function(inf) {
        return _c('span', {
          staticClass: "inline-block"
        }, [_vm._v("\n                                    " + _vm._s(inf) + "\n                                ")])
      })) : _vm._e()])] : (typeof slot !== 'undefined') ? [_c('div', {
        staticClass: "slot-selector__slot-inner--unavailable"
      }, [_c('span', {
        staticClass: "slot-selector__group-price slot-selector__group-price--unavailable"
      }, [_vm._v("\n                                TOY FACTORY FULL\n                            ")])])] : _vm._e()], 2)])
    }))])
  }), _vm._v(" "), _vm._l((_vm.optionsGrid), function(row) {
    return _c('div', {
      staticClass: "small-12 medium-12 large-12 column text-center show-for-medium-only"
    }, [_c('div', {
      staticClass: "row nopadding slot-selector__slots-wrapper"
    }, _vm._l((row), function(slot) {
      return _c('div', {
        class: ['small-3 medium-3 large-3 column', {
          active: (slot && slot.id)
        }, {
          info: _vm.isCurrent((slot && slot.id) ? slot.id : false)
        }],
        on: {
          "click": function($event) {
            slot.id ? _vm.change(slot, true) : null
          }
        }
      }, [((slot && slot.id)) ? [_c('div', {
        directives: [{
          name: "tooltip",
          rawName: "v-tooltip",
          value: (_vm.mediumTooltipOptions),
          expression: "mediumTooltipOptions"
        }],
        class: ['slot-selector__slot-inner slot-selector__medium-slot', {
          'day-selector__inside-date--medium': (slot && slot.id)
        }, {
          'day-selector__inside-date-unavailable--medium': !(slot && slot.id)
        }]
      }, [(slot && slot.id) ? [_c('h3', [_vm._v(_vm._s(slot.time))]), _vm._v(" "), _c('div', [_c('span', {
        staticClass: "slot-selector__group-total"
      }, [_vm._v("\n                                   Group Total:\n                                ")]), _vm._v(" "), _c('span', {
        staticClass: "slot-selector__group-price"
      }, [_vm._v("\n                                    £" + _vm._s(slot.totalPrice) + "\n                                ")]), _vm._v(" "), ((slot.information !== '' && slot.information.join !== 'undefined')) ? _c('div', {
        staticClass: "slot-selector__info text-left"
      }, [_vm._v("\n                                    " + _vm._s(slot.information.join(", ")) + "\n                                ")]) : _vm._e()])] : (typeof slot !== 'undefined') ? [_c('div', {
        staticClass: "slot-selector__slot-inner--unavailable"
      }, [_c('span', {
        staticClass: "slot-selector__group-price slot-selector__group-price--unavailable"
      }, [_vm._v("\n                                TOY FACTORY FULL\n                            ")])])] : _vm._e()], 2)] : [_c('div', {
        class: ['slot-selector__slot-inner slot-selector__medium-slot', {
          'day-selector__inside-date--medium': (slot && slot.id)
        }, {
          'day-selector__inside-date-unavailable--medium': !(slot && slot.id)
        }]
      }, [(slot && slot.id) ? [_c('h3', [_vm._v(_vm._s(slot.time))]), _vm._v(" "), _c('div', [_c('span', {
        staticClass: "slot-selector__group-total"
      }, [_vm._v("\n                                   Group Total:\n                                ")]), _vm._v(" "), _c('span', {
        staticClass: "slot-selector__group-price"
      }, [_vm._v("\n                                    £" + _vm._s(slot.totalPrice) + "\n                                ")]), _vm._v(" "), ((slot.information !== '' && slot.information.join !== 'undefined')) ? _c('div', {
        staticClass: "slot-selector__info text-left"
      }, [_vm._v("\n                                    " + _vm._s(slot.information.join(", ")) + "\n                                ")]) : _vm._e()])] : (typeof slot !== 'undefined') ? [_c('div', {
        staticClass: "slot-selector__slot-inner--unavailable"
      }, [_c('span', {
        staticClass: "slot-selector__group-price slot-selector__group-price--unavailable"
      }, [_vm._v("\n                                TOY FACTORY FULL\n                            ")])])] : _vm._e()], 2)]], 2)
    }))])
  }), _vm._v(" "), _vm._l((_vm.optionsGridSmall), function(row) {
    return _c('div', {
      staticClass: "small-12 medium-12 large-12 column text-center show-for-small-only nopadding"
    }, [_c('div', {
      staticClass: "row nopadding slot-selector__slots-wrapper"
    }, [_c('div', {
      staticClass: "small-12 column slot-selector-small-heading"
    }, [_c('h2', {
      staticClass: "heading-2--calendar-day"
    }, [_vm._v("\n                    " + _vm._s(row.part) + "\n                ")])]), _vm._v(" "), _vm._l((row.times), function(slot) {
      return _c('div', {
        class: ['small-6 column ', {
          active: (slot && slot.id)
        }, {
          info: _vm.isCurrent((slot && slot.id) ? slot.id : false)
        }],
        on: {
          "click": function($event) {
            slot.id ? _vm.change(slot, true) : null
          }
        }
      }, [((slot && slot.id)) ? [_c('div', {
        directives: [{
          name: "tooltip",
          rawName: "v-tooltip",
          value: (_vm.smallTooltipOptions),
          expression: "smallTooltipOptions"
        }],
        class: ['slot-selector__slot-inner -small-slot', {
          'day-selector__inside-date--medium': (slot && slot.id)
        }, {
          'day-selector__inside-date-unavailable--medium': !(slot && slot.id)
        }]
      }, [((slot && slot.id)) ? [_c('h3', [_vm._v(_vm._s(slot.time))]), _vm._v(" "), _c('div', [_c('span', {
        staticClass: "slot-selector__group-total"
      }, [_vm._v("\n                                   Group Total:\n                                ")]), _vm._v(" "), _c('span', {
        staticClass: "slot-selector__group-price"
      }, [_vm._v("\n                                    £" + _vm._s(slot.totalPrice) + "\n                                ")]), _vm._v(" "), ((slot.information !== '' && slot.information.join !== 'undefined')) ? _c('div', {
        staticClass: "slot-selector__info text-left"
      }, [_vm._v("\n                                    " + _vm._s(slot.information.join(", ")) + "\n                                ")]) : _vm._e()])] : (typeof slot !== 'undefined') ? [_c('div', {
        staticClass: "slot-selector__slot-inner--unavailable"
      }, [_c('span', {
        staticClass: "slot-selector__group-price slot-selector__group-price--unavailable"
      }, [_vm._v("\n                                TOY FACTORY FULL\n                            ")])])] : _vm._e()], 2)] : [_c('div', {
        class: ['slot-selector__slot-inner -small-slot', {
          'day-selector__inside-date--medium': (slot && slot.id)
        }, {
          'day-selector__inside-date-unavailable--medium': !(slot && slot.id)
        }]
      }, [(slot && slot.id) ? [_c('h3', [_vm._v(_vm._s(slot.time))]), _vm._v(" "), _c('div', [_c('span', {
        staticClass: "slot-selector__group-total"
      }, [_vm._v("\n                                   Group Total:\n                                ")]), _vm._v(" "), _c('span', {
        staticClass: "slot-selector__group-price"
      }, [_vm._v("\n                                    £" + _vm._s(slot.totalPrice) + "\n                                ")]), _vm._v(" "), ((slot.information !== '' && slot.information.join !== 'undefined')) ? _c('div', {
        staticClass: "slot-selector__info text-left"
      }, [_vm._v("\n                                    " + _vm._s(slot.information.join(", ")) + "\n                                ")]) : _vm._e()])] : (typeof slot !== 'undefined') ? [_c('div', {
        staticClass: "slot-selector__slot-inner--unavailable"
      }, [_c('span', {
        staticClass: "slot-selector__group-price slot-selector__group-price--unavailable"
      }, [_vm._v("\n                                TOY FACTORY FULL\n                            ")])])] : _vm._e()], 2)]], 2)
    })], 2)])
  })], 2)
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-6b732f0a", module.exports)
  }
}

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_vm._m(0), _vm._v(" "), (_vm.displayBackToParty) ? _c('div', {
    staticClass: "row show-for-large nopadding day-selector__backarrow"
  }, [_c('div', {
    staticClass: "large-1 column text-left image-misc__image--backarrow-wrapper",
    staticStyle: {
      "padding-left": "0"
    },
    on: {
      "click": _vm.backToCalendar
    }
  }, [_c('div', {
    staticClass: "image-misc__image--backarrow inline-block"
  })]), _vm._v(" "), _c('div', {
    staticClass: "large-11 column nopadding back-to-calendar",
    on: {
      "click": _vm.backToCalendar
    }
  }, [_vm._v("\n            Back to party\n        ")])]) : _vm._e(), _vm._v(" "), _vm._m(1), _vm._v(" "), _c('div', {
    staticClass: "row nopadding show-for-large day-selector__weekdays"
  }, _vm._l((_vm.daysOfTheWeek), function(day) {
    return _c('div', {
      staticClass: "day-selector__calendar--day"
    }, [_c('h2', {
      staticClass: "heading-2--calendar-day text-center"
    }, [_vm._v("\n                " + _vm._s(day) + "\n            ")])])
  })), _vm._v(" "), _vm._m(2), _vm._v(" "), _vm._l((_vm.weeks), function(week) {
    return _c('div', {
      staticClass: "row nopadding show-for-large"
    }, _vm._l((week), function(day) {
      return _c('div', {
        class: ['day-selector__calendar--day day-selector__calendar--date ', {
          active: day.isActive
        }, {
          info: _vm.isCurrent(day)
        }],
        on: {
          "click": function($event) {
            _vm.change(day)
          }
        }
      }, [_c('div', {
        class: [{
          'day-selector__inside-date': day.isActive
        }, {
          'day-selector__inside-date-unavailable': !day.isActive
        }]
      }, [_c('div', {
        staticClass: "day-selector__inside-date-month"
      }, [_vm._v(_vm._s(day.date.format('MMMM')))]), _vm._v(" "), _c('div', {
        staticClass: "day-selector__inside-date-number"
      }, [_vm._v(_vm._s(day.date.format('Do')))]), _vm._v(" "), (day.availableSlots > 0) ? [_c('div', {
        staticClass: "day-selector__inside-date-from"
      }, [_vm._v("from")]), _vm._v(" "), _c('div', {
        staticClass: "day-selector__inside-date-price"
      }, [_vm._v("\n                        £" + _vm._s(day.lowestPrice) + "pp\n                    ")]), _vm._v(" "), ((day.information !== '' && day.information.join !== 'undefined')) ? _c('div', {
        staticClass: "day-selector__inside-date-info"
      }, [_vm._l((day.information), function(info) {
        return [_c('div', [_vm._v("\n                                " + _vm._s(info) + "\n                            ")])]
      })], 2) : _vm._e()] : ((day.information !== '' && typeof day.information !== 'undefined' && day.information.join !== 'undefined')) ? [_c('div', {
        staticClass: "day-selector__inside-date-info -white-info"
      }, [_vm._l((day.information), function(info) {
        return [_c('div', [_vm._v("\n                                " + _vm._s(info) + "\n                            ")])]
      })], 2)] : _vm._e()], 2)])
    }))
  }), _vm._v(" "), _c('div', {
    staticClass: "row nopadding show-for-small-only day-selector__small-days"
  }, [_vm._l((_vm.weeks), function(week) {
    return _vm._l((week), function(day) {
      return _c('div', {
        class: ['small-6 medium-6 column ', {
          active: day.isActive
        }, {
          info: _vm.isCurrent(day)
        }],
        on: {
          "click": function($event) {
            _vm.change(day, true)
          }
        }
      }, [(day.isActive) ? [_c('div', {
        directives: [{
          name: "tooltip",
          rawName: "v-tooltip",
          value: (_vm.smallTooltipOptions),
          expression: "smallTooltipOptions"
        }],
        class: [{
          'day-selector__inside-date--small': day.isActive
        }, {
          'day-selector__inside-date-unavailable--small': !day.isActive
        }]
      }, [_c('div', {
        staticClass: "day-selector__inside-date-month"
      }, [_vm._v(_vm._s(day.date.format('MMMM')))]), _vm._v(" "), _c('div', {
        staticClass: "day-selector__inside-date-number"
      }, [_vm._v(_vm._s(day.date.format('Do')))]), _vm._v(" "), (day.availableSlots > 0) ? [_c('div', {
        staticClass: "day-selector__inside-date-from"
      }, [_vm._v("from")]), _vm._v(" "), _c('div', {
        staticClass: "day-selector__inside-date-price"
      }, [_vm._v("\n                                £" + _vm._s(day.lowestPrice) + "pp\n                            ")]), _vm._v(" "), ((day.information !== '' && day.information.join !== 'undefined')) ? _c('div', {
        staticClass: "day-selector__inside-date-info"
      }, [_vm._v("\n                                " + _vm._s(day.information.join(", ")) + "\n                            ")]) : _vm._e()] : _vm._e()], 2)] : [_c('div', {
        class: [{
          'day-selector__inside-date--small': day.isActive
        }, {
          'day-selector__inside-date-unavailable--small': !day.isActive
        }]
      }, [_c('div', {
        staticClass: "day-selector__inside-date-month"
      }, [_vm._v(_vm._s(day.date.format('MMMM')))]), _vm._v(" "), _c('div', {
        staticClass: "day-selector__inside-date-number"
      }, [_vm._v(_vm._s(day.date.format('Do')))]), _vm._v(" "), (day.availableSlots > 0) ? [_c('div', {
        staticClass: "day-selector__inside-date-from"
      }, [_vm._v("from")]), _vm._v(" "), _c('div', {
        staticClass: "day-selector__inside-date-price"
      }, [_vm._v("\n                                £" + _vm._s(day.lowestPrice) + "pp\n                            ")]), _vm._v(" "), ((day.information !== '' && day.information.join !== 'undefined')) ? _c('div', {
        staticClass: "day-selector__inside-date-info"
      }, [_vm._v("\n                                " + _vm._s(day.information.join(", ")) + "\n                            ")]) : _vm._e()] : _vm._e()], 2)]], 2)
    })
  })], 2), _vm._v(" "), _c('div', {
    staticClass: "row nopadding show-for-medium-only day-selector__medium-days"
  }, [_vm._l((_vm.weeks), function(week) {
    return _vm._l((week), function(day) {
      return _c('div', {
        class: ['small-3 medium-3 column ', {
          active: day.isActive
        }, {
          info: _vm.isCurrent(day)
        }],
        on: {
          "click": function($event) {
            _vm.change(day, true)
          }
        }
      }, [(day.isActive) ? [_c('div', {
        directives: [{
          name: "tooltip",
          rawName: "v-tooltip",
          value: (_vm.mediumTooltipOptions),
          expression: "mediumTooltipOptions"
        }],
        class: [{
          'day-selector__inside-date--medium': day.isActive
        }, {
          'day-selector__inside-date-unavailable--medium': !day.isActive
        }]
      }, [_c('div', {
        staticClass: "day-selector__inside-date-month"
      }, [_vm._v(_vm._s(day.date.format('MMMM')))]), _vm._v(" "), _c('div', {
        staticClass: "day-selector__inside-date-number"
      }, [_vm._v(_vm._s(day.date.format('Do')))]), _vm._v(" "), (day.availableSlots > 0) ? [_c('div', {
        staticClass: "day-selector__inside-date-from"
      }, [_vm._v("from")]), _vm._v(" "), _c('div', {
        staticClass: "day-selector__inside-date-price"
      }, [_vm._v("\n                                £" + _vm._s(day.lowestPrice) + "pp\n                            ")]), _vm._v(" "), ((day.information !== '' && day.information.join !== 'undefined')) ? _c('div', {
        staticClass: "day-selector__inside-date-info"
      }, [_vm._v("\n                                " + _vm._s(day.information.join(", ")) + "\n                            ")]) : _vm._e()] : _vm._e()], 2)] : [_c('div', {
        class: [{
          'day-selector__inside-date--medium': day.isActive
        }, {
          'day-selector__inside-date-unavailable--medium': !day.isActive
        }]
      }, [_c('div', {
        staticClass: "day-selector__inside-date-month"
      }, [_vm._v(_vm._s(day.date.format('MMMM')))]), _vm._v(" "), _c('div', {
        staticClass: "day-selector__inside-date-number"
      }, [_vm._v(_vm._s(day.date.format('Do')))]), _vm._v(" "), (day.availableSlots > 0) ? [_c('div', {
        staticClass: "day-selector__inside-date-from"
      }, [_vm._v("from")]), _vm._v(" "), _c('div', {
        staticClass: "day-selector__inside-date-price"
      }, [_vm._v("\n                                £" + _vm._s(day.lowestPrice) + "pp\n                            ")]), _vm._v(" "), ((day.information !== '' && day.information.join !== 'undefined')) ? _c('div', {
        staticClass: "day-selector__inside-date-info"
      }, [_vm._v("\n                                " + _vm._s(day.information.join(", ")) + "\n                            ")]) : _vm._e()] : _vm._e()], 2)]], 2)
    })
  }), _vm._v(" "), _c('div', {
    staticClass: "small-3 medium-3"
  }, [_vm._v("\n             \n        ")]), _vm._v(" "), _c('div', {
    staticClass: "small-3 medium-3"
  }, [_vm._v("\n             \n        ")])], 2)], 2)
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row hide-for-large"
  }, [_c('div', {
    staticClass: "small-12 column text-center"
  }, [_c('h2', {
    staticClass: "heading-2--gill-sans"
  }, [_vm._v("\n                Select the date you would like to visit.\n            ")])])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row nopadding"
  }, [_c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "day-selector__available-square-wrapper"
  }, [_c('div', {
    staticClass: "day-selector__available-square"
  })]), _vm._v(" "), _c('div', {
    staticClass: "day-selector__available-square-label"
  }, [_vm._v("\n                Available\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "day-selector__unavailable-square-wrapper"
  }, [_c('div', {
    staticClass: "day-selector__unavailable-square"
  })]), _vm._v(" "), _c('div', {
    staticClass: "day-selector__unavailable-square-label"
  }, [_vm._v("\n                Unavailable\n            ")])])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row nopadding show-for-large"
  }, [_c('div', {
    staticClass: "small-12 day-selector__separator"
  })])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-6be25b1e", module.exports)
  }
}

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "alert alert-danger"
  }, [_c('strong', [_vm._v("Warning!")]), _vm._v(" "), _c('p', [_vm._v(_vm._s(_vm.message))]), _vm._v(" "), (_vm.validationErrors.length > 0) ? _c('ul', _vm._l((_vm.validationErrors), function(error) {
    return _c('li', [_vm._v(_vm._s(error))])
  })) : _vm._e()])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-7cea9a58", module.exports)
  }
}

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row nopadding"
  }, [_c('div', {
    staticClass: "small-12 column nopadding"
  }, _vm._l((_vm.availableExtras), function(extra) {
    return _c('div', {
      staticClass: "row extra-selector__extras-wrapper nopadding"
    }, [_vm._l((extra.images), function(image, index) {
      return [_c('input', {
        staticClass: "extra-selector__carousel-input",
        attrs: {
          "type": "radio",
          "id": extra.type + extra.id + '-' + index,
          "name": extra.type + extra.id + '-extra'
        },
        domProps: {
          "checked": index === 0 ? 'checked' : null
        }
      })]
    }), _vm._v(" "), _c('div', {
      staticClass: "small-12 medium-12 column extra-selector__description-wrapper"
    }, [_c('h4', {
      staticClass: "heading-4__extra-title hide-for-large",
      domProps: {
        "innerHTML": _vm._s(extra.name)
      }
    }), _vm._v(" "), _c('h4', {
      staticClass: "heading-4__extra-title-price hide-for-large"
    }, [_vm._v("\n                    £" + _vm._s(extra.price) + "\n                ")])]), _vm._v(" "), _c('div', {
      staticClass: "small-12 medium-6 column extra-selector__image-wrapper"
    }, [_c('div', {
      staticClass: "extra-selector__carousel",
      attrs: {
        "id": 'Images_' + extra.type + extra.id
      }
    }, [_vm._l((extra.images), function(image, index) {
      return [_c('img', {
        staticClass: "extra-selector__main-image",
        attrs: {
          "src": image.imageUrl
        }
      })]
    }), _vm._v(" "), _c('div', {
      staticClass: "extra-selector__overlay-button-expander-wrapper"
    }, [_c('a', {
      staticClass: "extra-selector__carousel-expand",
      on: {
        "click": function($event) {
          _vm.expand(extra.type + extra.id)
        }
      }
    })])], 2), _vm._v(" "), _c('div', {
      staticClass: "extra-selector__carousel-thumbs"
    }, [_vm._l((extra.images), function(image, index) {
      return [_c('label', {
        staticClass: "inline-block extra-selector__image-thumb",
        style: ('background-image: url(' + image.thumbnailUrl + ')'),
        attrs: {
          "for": extra.type + extra.id + '-' + index
        }
      })]
    })], 2)]), _vm._v(" "), _c('div', {
      staticClass: "small-12 medium-6 column extra-selector__description-wrapper"
    }, [_c('h4', {
      staticClass: "heading-4__extra-title show-for-large",
      domProps: {
        "innerHTML": _vm._s(extra.name)
      }
    }), _vm._v(" "), _c('h4', {
      staticClass: "heading-4__extra-title-price show-for-large"
    }, [_vm._v("\n                    £" + _vm._s(extra.price) + "\n                ")]), _vm._v(" "), _c('div', {
      staticClass: "row extra-selector__add-cta"
    }, [_c('div', {
      staticClass: "small-6 column"
    }, [_c('multiselect', {
      attrs: {
        "options": _vm.massageExtraSteps(extra),
        "searchable": false,
        "placeholder": "0",
        "allow-empty": true,
        "show-labels": false
      },
      model: {
        value: (extra.selectedValue),
        callback: function($$v) {
          extra.selectedValue = $$v
        },
        expression: "extra.selectedValue"
      }
    })], 1), _vm._v(" "), _c('div', {
      staticClass: "small-6 column"
    }, [_c('a', {
      class: ['button margin-bottom-medium rotate-ccw-small show-for-large'],
      on: {
        "click": function($event) {
          _vm.extraAdded(extra.id)
        }
      }
    }, [_c('span', {
      staticClass: "button__inner"
    }, [_c('span', {
      staticClass: "button__text"
    }, [_vm._v("Add")]), _vm._v(" "), _c('svg', {
      staticClass: "button__arrow"
    }, [_c('use', {
      attrs: {
        "xlink:href": "/images/svg/sprite.svg#button-arrow",
        "xmlns:xlink": "http://www.w3.org/1999/xlink"
      }
    })])])]), _vm._v(" "), _c('a', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (extra.selectedValue > 0),
        expression: "extra.selectedValue > 0"
      }, {
        name: "tooltip",
        rawName: "v-tooltip",
        value: (_vm.mediumTooltip(extra.id)),
        expression: "mediumTooltip(extra.id)"
      }],
      class: ['button margin-bottom-medium rotate-ccw-small hide-for-large extra-selector__tooltip-included'],
      on: {
        "click": function($event) {
          _vm.extraAdded(extra.id, true)
        }
      }
    }, [_c('span', {
      staticClass: "button__inner"
    }, [_c('span', {
      staticClass: "button__text"
    }, [_vm._v("Add")]), _vm._v(" "), _c('svg', {
      staticClass: "button__arrow"
    }, [_c('use', {
      attrs: {
        "xlink:href": "/images/svg/sprite.svg#button-arrow",
        "xmlns:xlink": "http://www.w3.org/1999/xlink"
      }
    })])])]), _vm._v(" "), _c('a', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (!extra.selectedValue),
        expression: "!extra.selectedValue"
      }],
      class: ['button margin-bottom-medium rotate-ccw-small hide-for-large extra-selector__tooltip-included'],
      on: {
        "click": function($event) {
          _vm.extraAdded(extra.id, true)
        }
      }
    }, [_c('span', {
      staticClass: "button__inner"
    }, [_c('span', {
      staticClass: "button__text"
    }, [_vm._v("Add")]), _vm._v(" "), _c('svg', {
      staticClass: "button__arrow"
    }, [_c('use', {
      attrs: {
        "xlink:href": "/images/svg/sprite.svg#button-arrow",
        "xmlns:xlink": "http://www.w3.org/1999/xlink"
      }
    })])])])])]), _vm._v(" "), _c('div', {
      staticClass: "extra-selector__extra-content",
      domProps: {
        "innerHTML": _vm._s(extra.shortDescription)
      }
    }), _vm._v(" "), _c('div', {
      staticClass: "hide-for-large",
      on: {
        "click": function($event) {
          _vm.reveal($event, '#' + extra.type + extra.id)
        }
      }
    }, [_vm._m(0, true)]), _vm._v(" "), _c('div', {
      staticClass: "extra-selector__extra-content show-for-large",
      attrs: {
        "id": extra.type + extra.id
      },
      domProps: {
        "innerHTML": _vm._s(extra.description)
      }
    })]), _vm._v(" "), _c('div', {
      staticClass: "gallery-overlay overlay",
      attrs: {
        "id": 'Overlay_' + extra.type + extra.id
      }
    }, [_c('div', {
      staticClass: "overlay__background"
    }, [_vm._m(1, true), _vm._v(" "), _c('div', {
      staticClass: "overlay__content overlay__content--gallery-overlay swiper-container"
    }, [_c('div', {
      staticClass: "swiper-wrapper"
    }, _vm._l((extra.images), function(image) {
      return _c('div', {
        staticClass: "swiper-slide swiper-slide--gallery-overlay"
      }, [_c('img', {
        staticClass: "gallery-overlay__image lazyload",
        attrs: {
          "src": image.imageUrl
        }
      }), _vm._v(" "), _vm._m(2, true)])
    }))])])])], 2)
  }))])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('a', {
    staticClass: "extra-selector__more-info"
  }, [_vm._v("\n                        More info\n                        "), _c('div', {
    staticClass: "image-misc__image--chevron-down inline-block"
  })])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('a', {
    staticClass: "gallery-overlay__close"
  }, [_c('span', {
    staticClass: "gallery-overlay__close-text"
  }, [_vm._v("Close")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "extra-selector__overlay-button-expander-wrapper--overlay"
  }, [_c('a', {
    staticClass: "polaroid-carousel__button--gallery-overlay -previous -extra-overlay"
  }), _vm._v(" "), _c('a', {
    staticClass: "polaroid-carousel__button--gallery-overlay -next -extra-overlay"
  })])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-dfe5225c", module.exports)
  }
}

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('h2', {
    staticClass: "heading-2--gill-sans"
  }, [_vm._v("\n        You've selected...\n    ")]), _vm._v(" "), (_vm.day && _vm.day.date) ? _c('h3', [_vm._v("\n        " + _vm._s(_vm.day.date.format('dddd Do MMMM')) + "\n        "), _c('p', [(_vm.time && _vm.time.time) ? _c('span', {
    staticClass: "booking-summary__time"
  }, [_vm._v("@ " + _vm._s(_vm.time.time))]) : _vm._e()])]) : _vm._e(), _vm._v(" "), (_vm.showAdults) ? _c('h3', [_vm._v("\n        " + _vm._s(_vm.booking.adults) + "x " + _vm._s(_vm.adultsLabel) + "\n        "), (_vm.totalAdultsPrice) ? [_c('span', {
    staticClass: "booking-summary__price text-right"
  }, [_vm._v("£" + _vm._s(_vm.totalAdultsPrice))])] : _vm._e()], 2) : _vm._e(), _vm._v(" "), (_vm.showSeniors) ? _c('h3', [_vm._v("\n        " + _vm._s(_vm.booking.seniors) + "x " + _vm._s(_vm.seniorsLabel) + "\n        "), (_vm.totalSeniorsPrice) ? [_c('span', {
    staticClass: "booking-summary__price text-right"
  }, [_vm._v("£" + _vm._s(_vm.totalSeniorsPrice))])] : _vm._e()], 2) : _vm._e(), _vm._v(" "), (_vm.showChildren) ? _c('h3', [_vm._v("\n        " + _vm._s(_vm.booking.children) + "x " + _vm._s(_vm.childrenLabel) + "\n        "), (_vm.totalChildrenPrice) ? [_c('span', {
    staticClass: "booking-summary__price text-right"
  }, [_vm._v("£" + _vm._s(_vm.totalChildrenPrice))])] : _vm._e()], 2) : _vm._e(), _vm._v(" "), (_vm.showInfants) ? _c('h3', [_vm._v(_vm._s(_vm.booking.babies) + "x " + _vm._s(_vm.infantsLabel))]) : _vm._e(), _vm._v(" "), (_vm.showCarers) ? _c('h3', [_vm._v(_vm._s(_vm.booking.carers) + "x " + _vm._s(_vm.carersLabel))]) : _vm._e(), _vm._v(" "), (_vm.showWheelchairs) ? _c('h3', [_vm._v(_vm._s(_vm.booking.wheelchairs) + "x " + _vm._s(_vm.wheelchairsLabel))]) : _vm._e(), _vm._v(" "), (_vm.showExtras) ? [_c('div', {
    staticClass: "booking-summary__extras"
  }, _vm._l((this.extras), function(extra) {
    return _c('h3', [(extra.type === 'INSURANCE') ? [_vm._v("\n                    1 x " + _vm._s(extra.name) + " "), _c('span', {
      staticClass: "booking-summary__price text-right"
    }, [_vm._v("£" + _vm._s(parseFloat(extra.totalExtraPrice).toFixed(2)))])] : [_vm._v("\n\n\n                    " + _vm._s(extra.qty) + " x "), _c('span', {
      domProps: {
        "innerHTML": _vm._s(extra.name)
      }
    }), _c('span', {
      staticClass: "booking-summary__price text-right"
    }, [_vm._v("£" + _vm._s(extra.totalExtraPrice) + "\n                        "), (_vm.canRemoveExtras) ? [(extra.type !== 'INSURANCE') ? _c('span', {
      staticClass: "image-misc__image--removeextra show-for-small-only",
      on: {
        "click": function($event) {
          _vm.removeExtra(extra.id)
        }
      }
    }) : _vm._e()] : _vm._e(), _vm._v(" "), (_vm.canRemoveExtras) ? [(extra.type !== 'INSURANCE') ? _c('span', {
      staticClass: "image-misc__image--removeextrainverse show-for-medium",
      on: {
        "click": function($event) {
          _vm.removeExtra(extra.id)
        }
      }
    }) : _vm._e()] : _vm._e()], 2)]], 2)
  }))] : _vm._e(), _vm._v(" "), (_vm.transfer) ? [(_vm.showTotalPrice) ? _c('h3', [_vm._v("Current booking total"), _c('br'), _vm._v("£" + _vm._s(_vm.paidAmount))]) : _vm._e(), _vm._v(" "), (_vm.showTotalPrice) ? _c('h3', [_vm._v("New booking total"), _c('br'), _vm._v("£" + _vm._s(_vm.totalPrice))]) : _vm._e(), _vm._v(" "), (_vm.showTotalPrice) ? _c('h3', [_vm._v("Difference"), _c('br'), _vm._v("£" + _vm._s(_vm.totalPriceDifference))]) : _vm._e()] : [(_vm.promoCodeDescription) ? _c('p', [_vm._v(_vm._s(_vm.promoCodeDescription))]) : _vm._e(), _vm._v(" "), (_vm.showTotalPrice) ? _c('p', {
    staticClass: "booking-summary__total-price"
  }, [_vm._v("Total price: "), _c('span', {
    staticClass: "booking-summary__total-price-price"
  }, [_vm._v("£" + _vm._s(_vm.totalPrice))])]) : _vm._e()], _vm._v(" "), _vm._t("default"), _vm._v(" "), (_vm.showInfoBox) ? _c('div', [(!_vm.isPremiumBooking) ? _c('h2', {
    staticClass: "heading-2--calendar-day"
  }, [_vm._v("\n            Prices includes:\n        ")]) : _vm._e(), _vm._v(" "), (_vm.isPremiumBooking) ? _c('h2', {
    staticClass: "heading-2--calendar-day"
  }, [_vm._v("\n            The tour includes:\n        ")]) : _vm._e(), _vm._v(" "), (!_vm.isPremiumBooking) ? _c('ul', {
    staticClass: "booking-summary__list"
  }, [_c('li', [_vm._v("Personalised invitation to every child from Father Christmas by post")]), _vm._v(" "), _vm._m(0), _vm._v(" "), _c('li', [_vm._v("Elf Passport for every child")]), _vm._v(" "), _c('li', [_vm._v("All activities, and performances including ice skating")]), _vm._v(" "), _c('li', [_vm._v("Beautiful gift from Father Christmas for every child")]), _vm._v(" "), _c('li', [_vm._v("One free photo per booking")]), _vm._v(" "), _c('li', [_vm._v("Booking fees")]), _vm._v(" "), _c('li', [_vm._v("Parking at Whitmoor Forest")]), _vm._v(" "), _c('li', [_vm._v("Christmas Morning Thank You card from Father Christmas for every child")])]) : _vm._e(), _vm._v(" "), (_vm.isPremiumBooking) ? _c('ul', {
    staticClass: "booking-summary__list"
  }, [_c('li', [_vm._v("A private meet & greet with The Elf Travel Master")]), _vm._v(" "), _c('li', [_vm._v("Front row seats in The Glade and a personal audience with Sage")]), _vm._v(" "), _c('li', [_vm._v("Freedom of the Elven Village - stay for as long as you like, before you visit Father Christmas")]), _vm._v(" "), _c('li', [_vm._v("A reserved table, and meal in the Elven Restaurant")]), _vm._v(" "), _c('li', [_vm._v("A scrapbook containing the photos of your meeting with Father Christmas")]), _vm._v(" "), _c('li', [_vm._v("Conker Hats for everybody")]), _vm._v(" "), _c('li', [_vm._v("A copy of Mother Christmas’ Puzzoodles book for every child")]), _vm._v(" "), _c('li', [_vm._v("VIP parking")]), _vm._v(" "), _vm._m(1)]) : _vm._e()]) : _vm._e(), _vm._v(" "), (_vm.isSuperStar) ? _c('div', [_c('h2', {
    staticClass: "heading-2--calendar-day"
  }, [_vm._v("\n            Please note:\n        ")]), _vm._v(" "), _vm._m(2)]) : _vm._e(), _vm._v(" "), (_vm.showCards) ? _c('div', {
    staticClass: "input-container -card-container"
  }, [_c('div', {
    staticClass: "image-misc__image--cards"
  })]) : _vm._e()], 2)
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('li', [_vm._v("Entry to Lapland"), _c('sup', [_vm._v("UK")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('li', [_vm._v("All of this is in addition to the Premium Lapland"), _c('sup', [_vm._v("UK")]), _vm._v(" experience")])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('p', [_vm._v("\n            These days are specially designed for children with additional needs. For more information, please "), _c('a', {
    staticClass: "text-link",
    attrs: {
      "href": "/superstar-days",
      "target": "_blank"
    }
  }, [_vm._v("click here")])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-f72aaa4c", module.exports)
  }
}

/***/ }),
/* 272 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
  * vue-router v2.5.3
  * (c) 2017 Evan You
  * @license MIT
  */
/*  */

function assert (condition, message) {
  if (!condition) {
    throw new Error(("[vue-router] " + message))
  }
}

function warn (condition, message) {
  if ("development" !== 'production' && !condition) {
    typeof console !== 'undefined' && console.warn(("[vue-router] " + message));
  }
}

var View = {
  name: 'router-view',
  functional: true,
  props: {
    name: {
      type: String,
      default: 'default'
    }
  },
  render: function render (_, ref) {
    var props = ref.props;
    var children = ref.children;
    var parent = ref.parent;
    var data = ref.data;

    data.routerView = true;

    // directly use parent context's createElement() function
    // so that components rendered by router-view can resolve named slots
    var h = parent.$createElement;
    var name = props.name;
    var route = parent.$route;
    var cache = parent._routerViewCache || (parent._routerViewCache = {});

    // determine current view depth, also check to see if the tree
    // has been toggled inactive but kept-alive.
    var depth = 0;
    var inactive = false;
    while (parent) {
      if (parent.$vnode && parent.$vnode.data.routerView) {
        depth++;
      }
      if (parent._inactive) {
        inactive = true;
      }
      parent = parent.$parent;
    }
    data.routerViewDepth = depth;

    // render previous view if the tree is inactive and kept-alive
    if (inactive) {
      return h(cache[name], data, children)
    }

    var matched = route.matched[depth];
    // render empty node if no matched route
    if (!matched) {
      cache[name] = null;
      return h()
    }

    var component = cache[name] = matched.components[name];

    // attach instance registration hook
    // this will be called in the instance's injected lifecycle hooks
    data.registerRouteInstance = function (vm, val) {
      // val could be undefined for unregistration
      var current = matched.instances[name];
      if (
        (val && current !== vm) ||
        (!val && current === vm)
      ) {
        matched.instances[name] = val;
      }
    }

    // also regiseter instance in prepatch hook
    // in case the same component instance is reused across different routes
    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {
      matched.instances[name] = vnode.componentInstance;
    };

    // resolve props
    data.props = resolveProps(route, matched.props && matched.props[name]);

    return h(component, data, children)
  }
};

function resolveProps (route, config) {
  switch (typeof config) {
    case 'undefined':
      return
    case 'object':
      return config
    case 'function':
      return config(route)
    case 'boolean':
      return config ? route.params : undefined
    default:
      if (true) {
        warn(
          false,
          "props in \"" + (route.path) + "\" is a " + (typeof config) + ", " +
          "expecting an object, function or boolean."
        );
      }
  }
}

/*  */

var encodeReserveRE = /[!'()*]/g;
var encodeReserveReplacer = function (c) { return '%' + c.charCodeAt(0).toString(16); };
var commaRE = /%2C/g;

// fixed encodeURIComponent which is more conformant to RFC3986:
// - escapes [!'()*]
// - preserve commas
var encode = function (str) { return encodeURIComponent(str)
  .replace(encodeReserveRE, encodeReserveReplacer)
  .replace(commaRE, ','); };

var decode = decodeURIComponent;

function resolveQuery (
  query,
  extraQuery,
  _parseQuery
) {
  if ( extraQuery === void 0 ) extraQuery = {};

  var parse = _parseQuery || parseQuery;
  var parsedQuery;
  try {
    parsedQuery = parse(query || '');
  } catch (e) {
    "development" !== 'production' && warn(false, e.message);
    parsedQuery = {};
  }
  for (var key in extraQuery) {
    var val = extraQuery[key];
    parsedQuery[key] = Array.isArray(val) ? val.slice() : val;
  }
  return parsedQuery
}

function parseQuery (query) {
  var res = {};

  query = query.trim().replace(/^(\?|#|&)/, '');

  if (!query) {
    return res
  }

  query.split('&').forEach(function (param) {
    var parts = param.replace(/\+/g, ' ').split('=');
    var key = decode(parts.shift());
    var val = parts.length > 0
      ? decode(parts.join('='))
      : null;

    if (res[key] === undefined) {
      res[key] = val;
    } else if (Array.isArray(res[key])) {
      res[key].push(val);
    } else {
      res[key] = [res[key], val];
    }
  });

  return res
}

function stringifyQuery (obj) {
  var res = obj ? Object.keys(obj).map(function (key) {
    var val = obj[key];

    if (val === undefined) {
      return ''
    }

    if (val === null) {
      return encode(key)
    }

    if (Array.isArray(val)) {
      var result = [];
      val.slice().forEach(function (val2) {
        if (val2 === undefined) {
          return
        }
        if (val2 === null) {
          result.push(encode(key));
        } else {
          result.push(encode(key) + '=' + encode(val2));
        }
      });
      return result.join('&')
    }

    return encode(key) + '=' + encode(val)
  }).filter(function (x) { return x.length > 0; }).join('&') : null;
  return res ? ("?" + res) : ''
}

/*  */


var trailingSlashRE = /\/?$/;

function createRoute (
  record,
  location,
  redirectedFrom,
  router
) {
  var stringifyQuery$$1 = router && router.options.stringifyQuery;
  var route = {
    name: location.name || (record && record.name),
    meta: (record && record.meta) || {},
    path: location.path || '/',
    hash: location.hash || '',
    query: location.query || {},
    params: location.params || {},
    fullPath: getFullPath(location, stringifyQuery$$1),
    matched: record ? formatMatch(record) : []
  };
  if (redirectedFrom) {
    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery$$1);
  }
  return Object.freeze(route)
}

// the starting route that represents the initial state
var START = createRoute(null, {
  path: '/'
});

function formatMatch (record) {
  var res = [];
  while (record) {
    res.unshift(record);
    record = record.parent;
  }
  return res
}

function getFullPath (
  ref,
  _stringifyQuery
) {
  var path = ref.path;
  var query = ref.query; if ( query === void 0 ) query = {};
  var hash = ref.hash; if ( hash === void 0 ) hash = '';

  var stringify = _stringifyQuery || stringifyQuery;
  return (path || '/') + stringify(query) + hash
}

function isSameRoute (a, b) {
  if (b === START) {
    return a === b
  } else if (!b) {
    return false
  } else if (a.path && b.path) {
    return (
      a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') &&
      a.hash === b.hash &&
      isObjectEqual(a.query, b.query)
    )
  } else if (a.name && b.name) {
    return (
      a.name === b.name &&
      a.hash === b.hash &&
      isObjectEqual(a.query, b.query) &&
      isObjectEqual(a.params, b.params)
    )
  } else {
    return false
  }
}

function isObjectEqual (a, b) {
  if ( a === void 0 ) a = {};
  if ( b === void 0 ) b = {};

  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b);
  if (aKeys.length !== bKeys.length) {
    return false
  }
  return aKeys.every(function (key) { return String(a[key]) === String(b[key]); })
}

function isIncludedRoute (current, target) {
  return (
    current.path.replace(trailingSlashRE, '/').indexOf(
      target.path.replace(trailingSlashRE, '/')
    ) === 0 &&
    (!target.hash || current.hash === target.hash) &&
    queryIncludes(current.query, target.query)
  )
}

function queryIncludes (current, target) {
  for (var key in target) {
    if (!(key in current)) {
      return false
    }
  }
  return true
}

/*  */

// work around weird flow bug
var toTypes = [String, Object];
var eventTypes = [String, Array];

var Link = {
  name: 'router-link',
  props: {
    to: {
      type: toTypes,
      required: true
    },
    tag: {
      type: String,
      default: 'a'
    },
    exact: Boolean,
    append: Boolean,
    replace: Boolean,
    activeClass: String,
    exactActiveClass: String,
    event: {
      type: eventTypes,
      default: 'click'
    }
  },
  render: function render (h) {
    var this$1 = this;

    var router = this.$router;
    var current = this.$route;
    var ref = router.resolve(this.to, current, this.append);
    var location = ref.location;
    var route = ref.route;
    var href = ref.href;

    var classes = {};
    var globalActiveClass = router.options.linkActiveClass;
    var globalExactActiveClass = router.options.linkExactActiveClass;
    // Support global empty active class
    var activeClassFallback = globalActiveClass == null
            ? 'router-link-active'
            : globalActiveClass;
    var exactActiveClassFallback = globalExactActiveClass == null
            ? 'router-link-exact-active'
            : globalExactActiveClass;
    var activeClass = this.activeClass == null
            ? activeClassFallback
            : this.activeClass;
    var exactActiveClass = this.exactActiveClass == null
            ? exactActiveClassFallback
            : this.exactActiveClass;
    var compareTarget = location.path
      ? createRoute(null, location, null, router)
      : route;

    classes[exactActiveClass] = isSameRoute(current, compareTarget);
    classes[activeClass] = this.exact
      ? classes[exactActiveClass]
      : isIncludedRoute(current, compareTarget);

    var handler = function (e) {
      if (guardEvent(e)) {
        if (this$1.replace) {
          router.replace(location);
        } else {
          router.push(location);
        }
      }
    };

    var on = { click: guardEvent };
    if (Array.isArray(this.event)) {
      this.event.forEach(function (e) { on[e] = handler; });
    } else {
      on[this.event] = handler;
    }

    var data = {
      class: classes
    };

    if (this.tag === 'a') {
      data.on = on;
      data.attrs = { href: href };
    } else {
      // find the first <a> child and apply listener and href
      var a = findAnchor(this.$slots.default);
      if (a) {
        // in case the <a> is a static node
        a.isStatic = false;
        var extend = _Vue.util.extend;
        var aData = a.data = extend({}, a.data);
        aData.on = on;
        var aAttrs = a.data.attrs = extend({}, a.data.attrs);
        aAttrs.href = href;
      } else {
        // doesn't have <a> child, apply listener to self
        data.on = on;
      }
    }

    return h(this.tag, data, this.$slots.default)
  }
};

function guardEvent (e) {
  // don't redirect with control keys
  if (e.metaKey || e.ctrlKey || e.shiftKey) { return }
  // don't redirect when preventDefault called
  if (e.defaultPrevented) { return }
  // don't redirect on right click
  if (e.button !== undefined && e.button !== 0) { return }
  // don't redirect if `target="_blank"`
  if (e.currentTarget && e.currentTarget.getAttribute) {
    var target = e.currentTarget.getAttribute('target');
    if (/\b_blank\b/i.test(target)) { return }
  }
  // this may be a Weex event which doesn't have this method
  if (e.preventDefault) {
    e.preventDefault();
  }
  return true
}

function findAnchor (children) {
  if (children) {
    var child;
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      if (child.tag === 'a') {
        return child
      }
      if (child.children && (child = findAnchor(child.children))) {
        return child
      }
    }
  }
}

var _Vue;

function install (Vue) {
  if (install.installed) { return }
  install.installed = true;

  _Vue = Vue;

  Object.defineProperty(Vue.prototype, '$router', {
    get: function get () { return this.$root._router }
  });

  Object.defineProperty(Vue.prototype, '$route', {
    get: function get () { return this.$root._route }
  });

  var isDef = function (v) { return v !== undefined; };

  var registerInstance = function (vm, callVal) {
    var i = vm.$options._parentVnode;
    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {
      i(vm, callVal);
    }
  };

  Vue.mixin({
    beforeCreate: function beforeCreate () {
      if (isDef(this.$options.router)) {
        this._router = this.$options.router;
        this._router.init(this);
        Vue.util.defineReactive(this, '_route', this._router.history.current);
      }
      registerInstance(this, this);
    },
    destroyed: function destroyed () {
      registerInstance(this);
    }
  });

  Vue.component('router-view', View);
  Vue.component('router-link', Link);

  var strats = Vue.config.optionMergeStrategies;
  // use the same hook merging strategy for route hooks
  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.created;
}

/*  */

var inBrowser = typeof window !== 'undefined';

/*  */

function resolvePath (
  relative,
  base,
  append
) {
  var firstChar = relative.charAt(0);
  if (firstChar === '/') {
    return relative
  }

  if (firstChar === '?' || firstChar === '#') {
    return base + relative
  }

  var stack = base.split('/');

  // remove trailing segment if:
  // - not appending
  // - appending to trailing slash (last segment is empty)
  if (!append || !stack[stack.length - 1]) {
    stack.pop();
  }

  // resolve relative path
  var segments = relative.replace(/^\//, '').split('/');
  for (var i = 0; i < segments.length; i++) {
    var segment = segments[i];
    if (segment === '..') {
      stack.pop();
    } else if (segment !== '.') {
      stack.push(segment);
    }
  }

  // ensure leading slash
  if (stack[0] !== '') {
    stack.unshift('');
  }

  return stack.join('/')
}

function parsePath (path) {
  var hash = '';
  var query = '';

  var hashIndex = path.indexOf('#');
  if (hashIndex >= 0) {
    hash = path.slice(hashIndex);
    path = path.slice(0, hashIndex);
  }

  var queryIndex = path.indexOf('?');
  if (queryIndex >= 0) {
    query = path.slice(queryIndex + 1);
    path = path.slice(0, queryIndex);
  }

  return {
    path: path,
    query: query,
    hash: hash
  }
}

function cleanPath (path) {
  return path.replace(/\/\//g, '/')
}

var index$1 = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

/**
 * Expose `pathToRegexp`.
 */
var index = pathToRegexp;
var parse_1 = parse;
var compile_1 = compile;
var tokensToFunction_1 = tokensToFunction;
var tokensToRegExp_1 = tokensToRegExp;

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
  // Match escaped characters that would otherwise appear in future matches.
  // This allows the user to escape special characters that won't transform.
  '(\\\\.)',
  // Match Express-style parameters and un-named parameters with a prefix
  // and optional suffixes. Matches appear as:
  //
  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
].join('|'), 'g');

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */
function parse (str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = options && options.delimiter || '/';
  var res;

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length;

    // Ignore already escaped sequences.
    if (escaped) {
      path += escaped[1];
      continue
    }

    var next = str[index];
    var prefix = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7];

    // Push the current path onto the tokens.
    if (path) {
      tokens.push(path);
      path = '';
    }

    var partial = prefix != null && next != null && next !== prefix;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;

    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
    });
  }

  // Match any characters still remaining.
  if (index < str.length) {
    path += str.substr(index);
  }

  // If the path exists, push it onto the end.
  if (path) {
    tokens.push(path);
  }

  return tokens
}

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */
function compile (str, options) {
  return tokensToFunction(parse(str, options))
}

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */
function encodeURIComponentPretty (str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */
function encodeAsterisk (str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction (tokens) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length);

  // Compile all the patterns before compilation.
  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
    }
  }

  return function (obj, opts) {
    var path = '';
    var data = obj || {};
    var options = opts || {};
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;

        continue
      }

      var value = data[token.name];
      var segment;

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix;
          }

          continue
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined')
        }
      }

      if (index$1(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
        }

        if (value.length === 0) {
          if (token.optional) {
            continue
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty')
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j]);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
      }

      path += token.prefix + segment;
    }

    return path
  }
}

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */
function escapeString (str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
}

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */
function escapeGroup (group) {
  return group.replace(/([=!:$\/()])/g, '\\$1')
}

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */
function attachKeys (re, keys) {
  re.keys = keys;
  return re
}

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */
function flags (options) {
  return options.sensitive ? '' : 'i'
}

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */
function regexpToRegexp (path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }

  return attachKeys(path, keys)
}

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function arrayToRegexp (path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

  return attachKeys(regexp, keys)
}

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function stringToRegexp (path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options)
}

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */
function tokensToRegExp (tokens, keys, options) {
  if (!index$1(keys)) {
    options = /** @type {!Object} */ (keys || options);
    keys = [];
  }

  options = options || {};

  var strict = options.strict;
  var end = options.end !== false;
  var route = '';

  // Iterate over the tokens and create our regexp string.
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
    } else {
      var prefix = escapeString(token.prefix);
      var capture = '(?:' + token.pattern + ')';

      keys.push(token);

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*';
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?';
        } else {
          capture = prefix + '(' + capture + ')?';
        }
      } else {
        capture = prefix + '(' + capture + ')';
      }

      route += capture;
    }
  }

  var delimiter = escapeString(options.delimiter || '/');
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

  // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".
  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
  }

  if (end) {
    route += '$';
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys)
}

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */
function pathToRegexp (path, keys, options) {
  if (!index$1(keys)) {
    options = /** @type {!Object} */ (keys || options);
    keys = [];
  }

  options = options || {};

  if (path instanceof RegExp) {
    return regexpToRegexp(path, /** @type {!Array} */ (keys))
  }

  if (index$1(path)) {
    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
  }

  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
}

index.parse = parse_1;
index.compile = compile_1;
index.tokensToFunction = tokensToFunction_1;
index.tokensToRegExp = tokensToRegExp_1;

/*  */

var regexpCompileCache = Object.create(null);

function fillParams (
  path,
  params,
  routeMsg
) {
  try {
    var filler =
      regexpCompileCache[path] ||
      (regexpCompileCache[path] = index.compile(path));
    return filler(params || {}, { pretty: true })
  } catch (e) {
    if (true) {
      warn(false, ("missing param for " + routeMsg + ": " + (e.message)));
    }
    return ''
  }
}

/*  */

function createRouteMap (
  routes,
  oldPathList,
  oldPathMap,
  oldNameMap
) {
  // the path list is used to control path matching priority
  var pathList = oldPathList || [];
  var pathMap = oldPathMap || Object.create(null);
  var nameMap = oldNameMap || Object.create(null);

  routes.forEach(function (route) {
    addRouteRecord(pathList, pathMap, nameMap, route);
  });

  // ensure wildcard routes are always at the end
  for (var i = 0, l = pathList.length; i < l; i++) {
    if (pathList[i] === '*') {
      pathList.push(pathList.splice(i, 1)[0]);
      l--;
      i--;
    }
  }

  return {
    pathList: pathList,
    pathMap: pathMap,
    nameMap: nameMap
  }
}

function addRouteRecord (
  pathList,
  pathMap,
  nameMap,
  route,
  parent,
  matchAs
) {
  var path = route.path;
  var name = route.name;
  if (true) {
    assert(path != null, "\"path\" is required in a route configuration.");
    assert(
      typeof route.component !== 'string',
      "route config \"component\" for path: " + (String(path || name)) + " cannot be a " +
      "string id. Use an actual component instead."
    );
  }

  var normalizedPath = normalizePath(path, parent);
  var record = {
    path: normalizedPath,
    regex: compileRouteRegex(normalizedPath),
    components: route.components || { default: route.component },
    instances: {},
    name: name,
    parent: parent,
    matchAs: matchAs,
    redirect: route.redirect,
    beforeEnter: route.beforeEnter,
    meta: route.meta || {},
    props: route.props == null
      ? {}
      : route.components
        ? route.props
        : { default: route.props }
  };

  if (route.children) {
    // Warn if route is named and has a default child route.
    // If users navigate to this route by name, the default child will
    // not be rendered (GH Issue #629)
    if (true) {
      if (route.name && route.children.some(function (child) { return /^\/?$/.test(child.path); })) {
        warn(
          false,
          "Named Route '" + (route.name) + "' has a default child route. " +
          "When navigating to this named route (:to=\"{name: '" + (route.name) + "'\"), " +
          "the default child route will not be rendered. Remove the name from " +
          "this route and use the name of the default child route for named " +
          "links instead."
        );
      }
    }
    route.children.forEach(function (child) {
      var childMatchAs = matchAs
        ? cleanPath((matchAs + "/" + (child.path)))
        : undefined;
      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);
    });
  }

  if (route.alias !== undefined) {
    if (Array.isArray(route.alias)) {
      route.alias.forEach(function (alias) {
        var aliasRoute = {
          path: alias,
          children: route.children
        };
        addRouteRecord(pathList, pathMap, nameMap, aliasRoute, parent, record.path);
      });
    } else {
      var aliasRoute = {
        path: route.alias,
        children: route.children
      };
      addRouteRecord(pathList, pathMap, nameMap, aliasRoute, parent, record.path);
    }
  }

  if (!pathMap[record.path]) {
    pathList.push(record.path);
    pathMap[record.path] = record;
  }

  if (name) {
    if (!nameMap[name]) {
      nameMap[name] = record;
    } else if ("development" !== 'production' && !matchAs) {
      warn(
        false,
        "Duplicate named routes definition: " +
        "{ name: \"" + name + "\", path: \"" + (record.path) + "\" }"
      );
    }
  }
}

function compileRouteRegex (path) {
  var regex = index(path);
  if (true) {
    var keys = {};
    regex.keys.forEach(function (key) {
      warn(!keys[key.name], ("Duplicate param keys in route with path: \"" + path + "\""));
      keys[key.name] = true;
    });
  }
  return regex
}

function normalizePath (path, parent) {
  path = path.replace(/\/$/, '');
  if (path[0] === '/') { return path }
  if (parent == null) { return path }
  return cleanPath(((parent.path) + "/" + path))
}

/*  */


function normalizeLocation (
  raw,
  current,
  append,
  router
) {
  var next = typeof raw === 'string' ? { path: raw } : raw;
  // named target
  if (next.name || next._normalized) {
    return next
  }

  // relative params
  if (!next.path && next.params && current) {
    next = assign({}, next);
    next._normalized = true;
    var params = assign(assign({}, current.params), next.params);
    if (current.name) {
      next.name = current.name;
      next.params = params;
    } else if (current.matched) {
      var rawPath = current.matched[current.matched.length - 1].path;
      next.path = fillParams(rawPath, params, ("path " + (current.path)));
    } else if (true) {
      warn(false, "relative params navigation requires a current route.");
    }
    return next
  }

  var parsedPath = parsePath(next.path || '');
  var basePath = (current && current.path) || '/';
  var path = parsedPath.path
    ? resolvePath(parsedPath.path, basePath, append || next.append)
    : basePath;

  var query = resolveQuery(
    parsedPath.query,
    next.query,
    router && router.options.parseQuery
  );

  var hash = next.hash || parsedPath.hash;
  if (hash && hash.charAt(0) !== '#') {
    hash = "#" + hash;
  }

  return {
    _normalized: true,
    path: path,
    query: query,
    hash: hash
  }
}

function assign (a, b) {
  for (var key in b) {
    a[key] = b[key];
  }
  return a
}

/*  */


function createMatcher (
  routes,
  router
) {
  var ref = createRouteMap(routes);
  var pathList = ref.pathList;
  var pathMap = ref.pathMap;
  var nameMap = ref.nameMap;

  function addRoutes (routes) {
    createRouteMap(routes, pathList, pathMap, nameMap);
  }

  function match (
    raw,
    currentRoute,
    redirectedFrom
  ) {
    var location = normalizeLocation(raw, currentRoute, false, router);
    var name = location.name;

    if (name) {
      var record = nameMap[name];
      if (true) {
        warn(record, ("Route with name '" + name + "' does not exist"));
      }
      var paramNames = record.regex.keys
        .filter(function (key) { return !key.optional; })
        .map(function (key) { return key.name; });

      if (typeof location.params !== 'object') {
        location.params = {};
      }

      if (currentRoute && typeof currentRoute.params === 'object') {
        for (var key in currentRoute.params) {
          if (!(key in location.params) && paramNames.indexOf(key) > -1) {
            location.params[key] = currentRoute.params[key];
          }
        }
      }

      if (record) {
        location.path = fillParams(record.path, location.params, ("named route \"" + name + "\""));
        return _createRoute(record, location, redirectedFrom)
      }
    } else if (location.path) {
      location.params = {};
      for (var i = 0; i < pathList.length; i++) {
        var path = pathList[i];
        var record$1 = pathMap[path];
        if (matchRoute(record$1.regex, location.path, location.params)) {
          return _createRoute(record$1, location, redirectedFrom)
        }
      }
    }
    // no match
    return _createRoute(null, location)
  }

  function redirect (
    record,
    location
  ) {
    var originalRedirect = record.redirect;
    var redirect = typeof originalRedirect === 'function'
        ? originalRedirect(createRoute(record, location, null, router))
        : originalRedirect;

    if (typeof redirect === 'string') {
      redirect = { path: redirect };
    }

    if (!redirect || typeof redirect !== 'object') {
      if (true) {
        warn(
          false, ("invalid redirect option: " + (JSON.stringify(redirect)))
        );
      }
      return _createRoute(null, location)
    }

    var re = redirect;
    var name = re.name;
    var path = re.path;
    var query = location.query;
    var hash = location.hash;
    var params = location.params;
    query = re.hasOwnProperty('query') ? re.query : query;
    hash = re.hasOwnProperty('hash') ? re.hash : hash;
    params = re.hasOwnProperty('params') ? re.params : params;

    if (name) {
      // resolved named direct
      var targetRecord = nameMap[name];
      if (true) {
        assert(targetRecord, ("redirect failed: named route \"" + name + "\" not found."));
      }
      return match({
        _normalized: true,
        name: name,
        query: query,
        hash: hash,
        params: params
      }, undefined, location)
    } else if (path) {
      // 1. resolve relative redirect
      var rawPath = resolveRecordPath(path, record);
      // 2. resolve params
      var resolvedPath = fillParams(rawPath, params, ("redirect route with path \"" + rawPath + "\""));
      // 3. rematch with existing query and hash
      return match({
        _normalized: true,
        path: resolvedPath,
        query: query,
        hash: hash
      }, undefined, location)
    } else {
      if (true) {
        warn(false, ("invalid redirect option: " + (JSON.stringify(redirect))));
      }
      return _createRoute(null, location)
    }
  }

  function alias (
    record,
    location,
    matchAs
  ) {
    var aliasedPath = fillParams(matchAs, location.params, ("aliased route with path \"" + matchAs + "\""));
    var aliasedMatch = match({
      _normalized: true,
      path: aliasedPath
    });
    if (aliasedMatch) {
      var matched = aliasedMatch.matched;
      var aliasedRecord = matched[matched.length - 1];
      location.params = aliasedMatch.params;
      return _createRoute(aliasedRecord, location)
    }
    return _createRoute(null, location)
  }

  function _createRoute (
    record,
    location,
    redirectedFrom
  ) {
    if (record && record.redirect) {
      return redirect(record, redirectedFrom || location)
    }
    if (record && record.matchAs) {
      return alias(record, location, record.matchAs)
    }
    return createRoute(record, location, redirectedFrom, router)
  }

  return {
    match: match,
    addRoutes: addRoutes
  }
}

function matchRoute (
  regex,
  path,
  params
) {
  var m = path.match(regex);

  if (!m) {
    return false
  } else if (!params) {
    return true
  }

  for (var i = 1, len = m.length; i < len; ++i) {
    var key = regex.keys[i - 1];
    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];
    if (key) {
      params[key.name] = val;
    }
  }

  return true
}

function resolveRecordPath (path, record) {
  return resolvePath(path, record.parent ? record.parent.path : '/', true)
}

/*  */


var positionStore = Object.create(null);

function setupScroll () {
  window.addEventListener('popstate', function (e) {
    saveScrollPosition();
    if (e.state && e.state.key) {
      setStateKey(e.state.key);
    }
  });
}

function handleScroll (
  router,
  to,
  from,
  isPop
) {
  if (!router.app) {
    return
  }

  var behavior = router.options.scrollBehavior;
  if (!behavior) {
    return
  }

  if (true) {
    assert(typeof behavior === 'function', "scrollBehavior must be a function");
  }

  // wait until re-render finishes before scrolling
  router.app.$nextTick(function () {
    var position = getScrollPosition();
    var shouldScroll = behavior(to, from, isPop ? position : null);
    if (!shouldScroll) {
      return
    }
    var isObject = typeof shouldScroll === 'object';
    if (isObject && typeof shouldScroll.selector === 'string') {
      var el = document.querySelector(shouldScroll.selector);
      if (el) {
        position = getElementPosition(el);
      } else if (isValidPosition(shouldScroll)) {
        position = normalizePosition(shouldScroll);
      }
    } else if (isObject && isValidPosition(shouldScroll)) {
      position = normalizePosition(shouldScroll);
    }

    if (position) {
      window.scrollTo(position.x, position.y);
    }
  });
}

function saveScrollPosition () {
  var key = getStateKey();
  if (key) {
    positionStore[key] = {
      x: window.pageXOffset,
      y: window.pageYOffset
    };
  }
}

function getScrollPosition () {
  var key = getStateKey();
  if (key) {
    return positionStore[key]
  }
}

function getElementPosition (el) {
  var docEl = document.documentElement;
  var docRect = docEl.getBoundingClientRect();
  var elRect = el.getBoundingClientRect();
  return {
    x: elRect.left - docRect.left,
    y: elRect.top - docRect.top
  }
}

function isValidPosition (obj) {
  return isNumber(obj.x) || isNumber(obj.y)
}

function normalizePosition (obj) {
  return {
    x: isNumber(obj.x) ? obj.x : window.pageXOffset,
    y: isNumber(obj.y) ? obj.y : window.pageYOffset
  }
}

function isNumber (v) {
  return typeof v === 'number'
}

/*  */

var supportsPushState = inBrowser && (function () {
  var ua = window.navigator.userAgent;

  if (
    (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&
    ua.indexOf('Mobile Safari') !== -1 &&
    ua.indexOf('Chrome') === -1 &&
    ua.indexOf('Windows Phone') === -1
  ) {
    return false
  }

  return window.history && 'pushState' in window.history
})();

// use User Timing api (if present) for more accurate key precision
var Time = inBrowser && window.performance && window.performance.now
  ? window.performance
  : Date;

var _key = genKey();

function genKey () {
  return Time.now().toFixed(3)
}

function getStateKey () {
  return _key
}

function setStateKey (key) {
  _key = key;
}

function pushState (url, replace) {
  saveScrollPosition();
  // try...catch the pushState call to get around Safari
  // DOM Exception 18 where it limits to 100 pushState calls
  var history = window.history;
  try {
    if (replace) {
      history.replaceState({ key: _key }, '', url);
    } else {
      _key = genKey();
      history.pushState({ key: _key }, '', url);
    }
  } catch (e) {
    window.location[replace ? 'replace' : 'assign'](url);
  }
}

function replaceState (url) {
  pushState(url, true);
}

/*  */

function runQueue (queue, fn, cb) {
  var step = function (index) {
    if (index >= queue.length) {
      cb();
    } else {
      if (queue[index]) {
        fn(queue[index], function () {
          step(index + 1);
        });
      } else {
        step(index + 1);
      }
    }
  };
  step(0);
}

/*  */

var History = function History (router, base) {
  this.router = router;
  this.base = normalizeBase(base);
  // start with a route object that stands for "nowhere"
  this.current = START;
  this.pending = null;
  this.ready = false;
  this.readyCbs = [];
  this.readyErrorCbs = [];
  this.errorCbs = [];
};

History.prototype.listen = function listen (cb) {
  this.cb = cb;
};

History.prototype.onReady = function onReady (cb, errorCb) {
  if (this.ready) {
    cb();
  } else {
    this.readyCbs.push(cb);
    if (errorCb) {
      this.readyErrorCbs.push(errorCb);
    }
  }
};

History.prototype.onError = function onError (errorCb) {
  this.errorCbs.push(errorCb);
};

History.prototype.transitionTo = function transitionTo (location, onComplete, onAbort) {
    var this$1 = this;

  var route = this.router.match(location, this.current);
  this.confirmTransition(route, function () {
    this$1.updateRoute(route);
    onComplete && onComplete(route);
    this$1.ensureURL();

    // fire ready cbs once
    if (!this$1.ready) {
      this$1.ready = true;
      this$1.readyCbs.forEach(function (cb) { cb(route); });
    }
  }, function (err) {
    if (onAbort) {
      onAbort(err);
    }
    if (err && !this$1.ready) {
      this$1.ready = true;
      this$1.readyErrorCbs.forEach(function (cb) { cb(err); });
    }
  });
};

History.prototype.confirmTransition = function confirmTransition (route, onComplete, onAbort) {
    var this$1 = this;

  var current = this.current;
  var abort = function (err) {
    if (isError(err)) {
      if (this$1.errorCbs.length) {
        this$1.errorCbs.forEach(function (cb) { cb(err); });
      } else {
        warn(false, 'uncaught error during route navigation:');
        console.error(err);
      }
    }
    onAbort && onAbort(err);
  };
  if (
    isSameRoute(route, current) &&
    // in the case the route map has been dynamically appended to
    route.matched.length === current.matched.length
  ) {
    this.ensureURL();
    return abort()
  }

  var ref = resolveQueue(this.current.matched, route.matched);
    var updated = ref.updated;
    var deactivated = ref.deactivated;
    var activated = ref.activated;

  var queue = [].concat(
    // in-component leave guards
    extractLeaveGuards(deactivated),
    // global before hooks
    this.router.beforeHooks,
    // in-component update hooks
    extractUpdateHooks(updated),
    // in-config enter guards
    activated.map(function (m) { return m.beforeEnter; }),
    // async components
    resolveAsyncComponents(activated)
  );

  this.pending = route;
  var iterator = function (hook, next) {
    if (this$1.pending !== route) {
      return abort()
    }
    try {
      hook(route, current, function (to) {
        if (to === false || isError(to)) {
          // next(false) -> abort navigation, ensure current URL
          this$1.ensureURL(true);
          abort(to);
        } else if (
          typeof to === 'string' ||
          (typeof to === 'object' && (
            typeof to.path === 'string' ||
            typeof to.name === 'string'
          ))
        ) {
          // next('/') or next({ path: '/' }) -> redirect
          abort();
          if (typeof to === 'object' && to.replace) {
            this$1.replace(to);
          } else {
            this$1.push(to);
          }
        } else {
          // confirm transition and pass on the value
          next(to);
        }
      });
    } catch (e) {
      abort(e);
    }
  };

  runQueue(queue, iterator, function () {
    var postEnterCbs = [];
    var isValid = function () { return this$1.current === route; };
    // wait until async components are resolved before
    // extracting in-component enter guards
    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);
    var queue = enterGuards.concat(this$1.router.resolveHooks);
    runQueue(queue, iterator, function () {
      if (this$1.pending !== route) {
        return abort()
      }
      this$1.pending = null;
      onComplete(route);
      if (this$1.router.app) {
        this$1.router.app.$nextTick(function () {
          postEnterCbs.forEach(function (cb) { cb(); });
        });
      }
    });
  });
};

History.prototype.updateRoute = function updateRoute (route) {
  var prev = this.current;
  this.current = route;
  this.cb && this.cb(route);
  this.router.afterHooks.forEach(function (hook) {
    hook && hook(route, prev);
  });
};

function normalizeBase (base) {
  if (!base) {
    if (inBrowser) {
      // respect <base> tag
      var baseEl = document.querySelector('base');
      base = (baseEl && baseEl.getAttribute('href')) || '/';
    } else {
      base = '/';
    }
  }
  // make sure there's the starting slash
  if (base.charAt(0) !== '/') {
    base = '/' + base;
  }
  // remove trailing slash
  return base.replace(/\/$/, '')
}

function resolveQueue (
  current,
  next
) {
  var i;
  var max = Math.max(current.length, next.length);
  for (i = 0; i < max; i++) {
    if (current[i] !== next[i]) {
      break
    }
  }
  return {
    updated: next.slice(0, i),
    activated: next.slice(i),
    deactivated: current.slice(i)
  }
}

function extractGuards (
  records,
  name,
  bind,
  reverse
) {
  var guards = flatMapComponents(records, function (def, instance, match, key) {
    var guard = extractGuard(def, name);
    if (guard) {
      return Array.isArray(guard)
        ? guard.map(function (guard) { return bind(guard, instance, match, key); })
        : bind(guard, instance, match, key)
    }
  });
  return flatten(reverse ? guards.reverse() : guards)
}

function extractGuard (
  def,
  key
) {
  if (typeof def !== 'function') {
    // extend now so that global mixins are applied.
    def = _Vue.extend(def);
  }
  return def.options[key]
}

function extractLeaveGuards (deactivated) {
  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true)
}

function extractUpdateHooks (updated) {
  return extractGuards(updated, 'beforeRouteUpdate', bindGuard)
}

function bindGuard (guard, instance) {
  if (instance) {
    return function boundRouteGuard () {
      return guard.apply(instance, arguments)
    }
  }
}

function extractEnterGuards (
  activated,
  cbs,
  isValid
) {
  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {
    return bindEnterGuard(guard, match, key, cbs, isValid)
  })
}

function bindEnterGuard (
  guard,
  match,
  key,
  cbs,
  isValid
) {
  return function routeEnterGuard (to, from, next) {
    return guard(to, from, function (cb) {
      next(cb);
      if (typeof cb === 'function') {
        cbs.push(function () {
          // #750
          // if a router-view is wrapped with an out-in transition,
          // the instance may not have been registered at this time.
          // we will need to poll for registration until current route
          // is no longer valid.
          poll(cb, match.instances, key, isValid);
        });
      }
    })
  }
}

function poll (
  cb, // somehow flow cannot infer this is a function
  instances,
  key,
  isValid
) {
  if (instances[key]) {
    cb(instances[key]);
  } else if (isValid()) {
    setTimeout(function () {
      poll(cb, instances, key, isValid);
    }, 16);
  }
}

function resolveAsyncComponents (matched) {
  return function (to, from, next) {
    var hasAsync = false;
    var pending = 0;
    var error = null;

    flatMapComponents(matched, function (def, _, match, key) {
      // if it's a function and doesn't have cid attached,
      // assume it's an async component resolve function.
      // we are not using Vue's default async resolving mechanism because
      // we want to halt the navigation until the incoming component has been
      // resolved.
      if (typeof def === 'function' && def.cid === undefined) {
        hasAsync = true;
        pending++;

        var resolve = once(function (resolvedDef) {
          // save resolved on async factory in case it's used elsewhere
          def.resolved = typeof resolvedDef === 'function'
            ? resolvedDef
            : _Vue.extend(resolvedDef);
          match.components[key] = resolvedDef;
          pending--;
          if (pending <= 0) {
            next();
          }
        });

        var reject = once(function (reason) {
          var msg = "Failed to resolve async component " + key + ": " + reason;
          "development" !== 'production' && warn(false, msg);
          if (!error) {
            error = isError(reason)
              ? reason
              : new Error(msg);
            next(error);
          }
        });

        var res;
        try {
          res = def(resolve, reject);
        } catch (e) {
          reject(e);
        }
        if (res) {
          if (typeof res.then === 'function') {
            res.then(resolve, reject);
          } else {
            // new syntax in Vue 2.3
            var comp = res.component;
            if (comp && typeof comp.then === 'function') {
              comp.then(resolve, reject);
            }
          }
        }
      }
    });

    if (!hasAsync) { next(); }
  }
}

function flatMapComponents (
  matched,
  fn
) {
  return flatten(matched.map(function (m) {
    return Object.keys(m.components).map(function (key) { return fn(
      m.components[key],
      m.instances[key],
      m, key
    ); })
  }))
}

function flatten (arr) {
  return Array.prototype.concat.apply([], arr)
}

// in Webpack 2, require.ensure now also returns a Promise
// so the resolve/reject functions may get called an extra time
// if the user uses an arrow function shorthand that happens to
// return that Promise.
function once (fn) {
  var called = false;
  return function () {
    if (called) { return }
    called = true;
    return fn.apply(this, arguments)
  }
}

function isError (err) {
  return Object.prototype.toString.call(err).indexOf('Error') > -1
}

/*  */


var HTML5History = (function (History$$1) {
  function HTML5History (router, base) {
    var this$1 = this;

    History$$1.call(this, router, base);

    var expectScroll = router.options.scrollBehavior;

    if (expectScroll) {
      setupScroll();
    }

    window.addEventListener('popstate', function (e) {
      this$1.transitionTo(getLocation(this$1.base), function (route) {
        if (expectScroll) {
          handleScroll(router, route, this$1.current, true);
        }
      });
    });
  }

  if ( History$$1 ) HTML5History.__proto__ = History$$1;
  HTML5History.prototype = Object.create( History$$1 && History$$1.prototype );
  HTML5History.prototype.constructor = HTML5History;

  HTML5History.prototype.go = function go (n) {
    window.history.go(n);
  };

  HTML5History.prototype.push = function push (location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.replace = function replace (location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.ensureURL = function ensureURL (push) {
    if (getLocation(this.base) !== this.current.fullPath) {
      var current = cleanPath(this.base + this.current.fullPath);
      push ? pushState(current) : replaceState(current);
    }
  };

  HTML5History.prototype.getCurrentLocation = function getCurrentLocation () {
    return getLocation(this.base)
  };

  return HTML5History;
}(History));

function getLocation (base) {
  var path = window.location.pathname;
  if (base && path.indexOf(base) === 0) {
    path = path.slice(base.length);
  }
  return (path || '/') + window.location.search + window.location.hash
}

/*  */


var HashHistory = (function (History$$1) {
  function HashHistory (router, base, fallback) {
    History$$1.call(this, router, base);
    // check history fallback deeplinking
    if (fallback && checkFallback(this.base)) {
      return
    }
    ensureSlash();
  }

  if ( History$$1 ) HashHistory.__proto__ = History$$1;
  HashHistory.prototype = Object.create( History$$1 && History$$1.prototype );
  HashHistory.prototype.constructor = HashHistory;

  // this is delayed until the app mounts
  // to avoid the hashchange listener being fired too early
  HashHistory.prototype.setupListeners = function setupListeners () {
    var this$1 = this;

    window.addEventListener('hashchange', function () {
      if (!ensureSlash()) {
        return
      }
      this$1.transitionTo(getHash(), function (route) {
        replaceHash(route.fullPath);
      });
    });
  };

  HashHistory.prototype.push = function push (location, onComplete, onAbort) {
    this.transitionTo(location, function (route) {
      pushHash(route.fullPath);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.replace = function replace (location, onComplete, onAbort) {
    this.transitionTo(location, function (route) {
      replaceHash(route.fullPath);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.go = function go (n) {
    window.history.go(n);
  };

  HashHistory.prototype.ensureURL = function ensureURL (push) {
    var current = this.current.fullPath;
    if (getHash() !== current) {
      push ? pushHash(current) : replaceHash(current);
    }
  };

  HashHistory.prototype.getCurrentLocation = function getCurrentLocation () {
    return getHash()
  };

  return HashHistory;
}(History));

function checkFallback (base) {
  var location = getLocation(base);
  if (!/^\/#/.test(location)) {
    window.location.replace(
      cleanPath(base + '/#' + location)
    );
    return true
  }
}

function ensureSlash () {
  var path = getHash();
  if (path.charAt(0) === '/') {
    return true
  }
  replaceHash('/' + path);
  return false
}

function getHash () {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var index = href.indexOf('#');
  return index === -1 ? '' : href.slice(index + 1)
}

function pushHash (path) {
  window.location.hash = path;
}

function replaceHash (path) {
  var i = window.location.href.indexOf('#');
  window.location.replace(
    window.location.href.slice(0, i >= 0 ? i : 0) + '#' + path
  );
}

/*  */


var AbstractHistory = (function (History$$1) {
  function AbstractHistory (router, base) {
    History$$1.call(this, router, base);
    this.stack = [];
    this.index = -1;
  }

  if ( History$$1 ) AbstractHistory.__proto__ = History$$1;
  AbstractHistory.prototype = Object.create( History$$1 && History$$1.prototype );
  AbstractHistory.prototype.constructor = AbstractHistory;

  AbstractHistory.prototype.push = function push (location, onComplete, onAbort) {
    var this$1 = this;

    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);
      this$1.index++;
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.replace = function replace (location, onComplete, onAbort) {
    var this$1 = this;

    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.go = function go (n) {
    var this$1 = this;

    var targetIndex = this.index + n;
    if (targetIndex < 0 || targetIndex >= this.stack.length) {
      return
    }
    var route = this.stack[targetIndex];
    this.confirmTransition(route, function () {
      this$1.index = targetIndex;
      this$1.updateRoute(route);
    });
  };

  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation () {
    var current = this.stack[this.stack.length - 1];
    return current ? current.fullPath : '/'
  };

  AbstractHistory.prototype.ensureURL = function ensureURL () {
    // noop
  };

  return AbstractHistory;
}(History));

/*  */

var VueRouter = function VueRouter (options) {
  if ( options === void 0 ) options = {};

  this.app = null;
  this.apps = [];
  this.options = options;
  this.beforeHooks = [];
  this.resolveHooks = [];
  this.afterHooks = [];
  this.matcher = createMatcher(options.routes || [], this);

  var mode = options.mode || 'hash';
  this.fallback = mode === 'history' && !supportsPushState;
  if (this.fallback) {
    mode = 'hash';
  }
  if (!inBrowser) {
    mode = 'abstract';
  }
  this.mode = mode;

  switch (mode) {
    case 'history':
      this.history = new HTML5History(this, options.base);
      break
    case 'hash':
      this.history = new HashHistory(this, options.base, this.fallback);
      break
    case 'abstract':
      this.history = new AbstractHistory(this, options.base);
      break
    default:
      if (true) {
        assert(false, ("invalid mode: " + mode));
      }
  }
};

var prototypeAccessors = { currentRoute: {} };

VueRouter.prototype.match = function match (
  raw,
  current,
  redirectedFrom
) {
  return this.matcher.match(raw, current, redirectedFrom)
};

prototypeAccessors.currentRoute.get = function () {
  return this.history && this.history.current
};

VueRouter.prototype.init = function init (app /* Vue component instance */) {
    var this$1 = this;

  "development" !== 'production' && assert(
    install.installed,
    "not installed. Make sure to call `Vue.use(VueRouter)` " +
    "before creating root instance."
  );

  this.apps.push(app);

  // main app already initialized.
  if (this.app) {
    return
  }

  this.app = app;

  var history = this.history;

  if (history instanceof HTML5History) {
    history.transitionTo(history.getCurrentLocation());
  } else if (history instanceof HashHistory) {
    var setupHashListener = function () {
      history.setupListeners();
    };
    history.transitionTo(
      history.getCurrentLocation(),
      setupHashListener,
      setupHashListener
    );
  }

  history.listen(function (route) {
    this$1.apps.forEach(function (app) {
      app._route = route;
    });
  });
};

VueRouter.prototype.beforeEach = function beforeEach (fn) {
  return registerHook(this.beforeHooks, fn)
};

VueRouter.prototype.beforeResolve = function beforeResolve (fn) {
  return registerHook(this.resolveHooks, fn)
};

VueRouter.prototype.afterEach = function afterEach (fn) {
  return registerHook(this.afterHooks, fn)
};

VueRouter.prototype.onReady = function onReady (cb, errorCb) {
  this.history.onReady(cb, errorCb);
};

VueRouter.prototype.onError = function onError (errorCb) {
  this.history.onError(errorCb);
};

VueRouter.prototype.push = function push (location, onComplete, onAbort) {
  this.history.push(location, onComplete, onAbort);
};

VueRouter.prototype.replace = function replace (location, onComplete, onAbort) {
  this.history.replace(location, onComplete, onAbort);
};

VueRouter.prototype.go = function go (n) {
  this.history.go(n);
};

VueRouter.prototype.back = function back () {
  this.go(-1);
};

VueRouter.prototype.forward = function forward () {
  this.go(1);
};

VueRouter.prototype.getMatchedComponents = function getMatchedComponents (to) {
  var route = to
    ? to.matched
      ? to
      : this.resolve(to).route
    : this.currentRoute;
  if (!route) {
    return []
  }
  return [].concat.apply([], route.matched.map(function (m) {
    return Object.keys(m.components).map(function (key) {
      return m.components[key]
    })
  }))
};

VueRouter.prototype.resolve = function resolve (
  to,
  current,
  append
) {
  var location = normalizeLocation(
    to,
    current || this.history.current,
    append,
    this
  );
  var route = this.match(location, current);
  var fullPath = route.redirectedFrom || route.fullPath;
  var base = this.history.base;
  var href = createHref(base, fullPath, this.mode);
  return {
    location: location,
    route: route,
    href: href,
    // for backwards compat
    normalizedTo: location,
    resolved: route
  }
};

VueRouter.prototype.addRoutes = function addRoutes (routes) {
  this.matcher.addRoutes(routes);
  if (this.history.current !== START) {
    this.history.transitionTo(this.history.getCurrentLocation());
  }
};

Object.defineProperties( VueRouter.prototype, prototypeAccessors );

function registerHook (list, fn) {
  list.push(fn);
  return function () {
    var i = list.indexOf(fn);
    if (i > -1) { list.splice(i, 1); }
  }
}

function createHref (base, fullPath, mode) {
  var path = mode === 'hash' ? '#' + fullPath : fullPath;
  return base ? cleanPath(base + '/' + path) : path
}

VueRouter.install = install;
VueRouter.version = '2.5.3';

if (inBrowser && window.Vue) {
  window.Vue.use(VueRouter);
}

/* harmony default export */ __webpack_exports__["a"] = (VueRouter);


/***/ }),
/* 273 */
/***/ (function(module, exports) {

module.exports = function(originalModule) {
	if(!originalModule.webpackPolyfill) {
		var module = Object.create(originalModule);
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		Object.defineProperty(module, "exports", {
			enumerable: true,
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(384),
  /* template */
  __webpack_require__(672),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/GatewayError.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] GatewayError.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-8e5d749e", Component.options)
  } else {
    hotAPI.reload("data-v-8e5d749e", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 349 */,
/* 350 */,
/* 351 */,
/* 352 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__store__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__store_modules_manage_my_booking__ = __webpack_require__(426);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_v_tooltip__ = __webpack_require__(217);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_v_tooltip___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_v_tooltip__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__local_forage_index__ = __webpack_require__(231);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_vue_router__ = __webpack_require__(272);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__components_pages_PaymentCallback_vue__ = __webpack_require__(636);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__components_pages_PaymentCallback_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__components_pages_PaymentCallback_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__components_pages_MyBookings_vue__ = __webpack_require__(629);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__components_pages_MyBookings_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__components_pages_MyBookings_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__components_pages_MyExperience_vue__ = __webpack_require__(631);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__components_pages_MyExperience_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7__components_pages_MyExperience_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__components_pages_MyParty_vue__ = __webpack_require__(632);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__components_pages_MyParty_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8__components_pages_MyParty_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__components_pages_MyPartyAdd_vue__ = __webpack_require__(633);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__components_pages_MyPartyAdd_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9__components_pages_MyPartyAdd_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__components_pages_AvailabilitySearchDay_vue__ = __webpack_require__(623);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__components_pages_AvailabilitySearchDay_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10__components_pages_AvailabilitySearchDay_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__components_pages_AvailabilitySearchSlot_vue__ = __webpack_require__(624);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__components_pages_AvailabilitySearchSlot_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11__components_pages_AvailabilitySearchSlot_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__components_pages_TransferComplete_vue__ = __webpack_require__(639);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__components_pages_TransferComplete_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12__components_pages_TransferComplete_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__components_pages_GuestEdit_vue__ = __webpack_require__(627);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__components_pages_GuestEdit_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13__components_pages_GuestEdit_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__components_pages_ChildEdit_vue__ = __webpack_require__(625);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__components_pages_ChildEdit_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14__components_pages_ChildEdit_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__components_pages_NewChildEdit_vue__ = __webpack_require__(634);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__components_pages_NewChildEdit_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15__components_pages_NewChildEdit_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__components_pages_MagicalExtras_vue__ = __webpack_require__(628);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__components_pages_MagicalExtras_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16__components_pages_MagicalExtras_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__components_pages_MyDetails_vue__ = __webpack_require__(630);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__components_pages_MyDetails_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17__components_pages_MyDetails_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__components_pages_TicketsPayment_vue__ = __webpack_require__(638);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__components_pages_TicketsPayment_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_18__components_pages_TicketsPayment_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__components_pages_ExtrasPayment_vue__ = __webpack_require__(626);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__components_pages_ExtrasPayment_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_19__components_pages_ExtrasPayment_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__components_pages_TransferPayment_vue__ = __webpack_require__(640);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__components_pages_TransferPayment_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_20__components_pages_TransferPayment_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__components_pages_RedirectComponent_vue__ = __webpack_require__(637);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__components_pages_RedirectComponent_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_21__components_pages_RedirectComponent_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__components_pages_OAuthCallback_vue__ = __webpack_require__(635);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__components_pages_OAuthCallback_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_22__components_pages_OAuthCallback_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__errors_AuthenticationError__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__api__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25_vue_multiselect__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25_vue_multiselect___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_25_vue_multiselect__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__components_MmbNav_vue__ = __webpack_require__(607);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__components_MmbNav_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_26__components_MmbNav_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__components_WoodenHorse_vue__ = __webpack_require__(613);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__components_WoodenHorse_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_27__components_WoodenHorse_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__mixins_Booking__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29_vue_analytics__ = __webpack_require__(218);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29_vue_analytics___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_29_vue_analytics__);
/**
 * First we will load all of this project's JavaScript dependencies which
 * includes Vue and other libraries. It is a great starting point when
 * building robust, powerful web applications using Vue and Laravel.
 */

__webpack_require__(108);

/**
 * Next, we will create a fresh Vue application instance and attach it to
 * the page. Then, you may begin adding components to this application
 * or customize the JavaScript scaffolding to fit your unique needs.
 */



__WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].registerModule('config', __WEBPACK_IMPORTED_MODULE_1__store_modules_manage_my_booking__["a" /* default */]);


Vue.use(__WEBPACK_IMPORTED_MODULE_2_v_tooltip___default.a, {
    container: 'body',
    trigger: 'hover focus'
});




Vue.use(__WEBPACK_IMPORTED_MODULE_4_vue_router__["a" /* default */]);




















var baseSegment = '/manage-my-booking';

var router = new __WEBPACK_IMPORTED_MODULE_4_vue_router__["a" /* default */]({
    mode: 'history',
    routes: [{ name: 'oauth.callback', path: baseSegment + '/oauth/callback' }, { name: 'oauth.callback.with.props', path: baseSegment + '/oauth/callback/:id/:name', component: __WEBPACK_IMPORTED_MODULE_22__components_pages_OAuthCallback_vue___default.a, props: true }, { name: 'gateway.callback', path: baseSegment + '/gateway/callback/:type', component: __WEBPACK_IMPORTED_MODULE_5__components_pages_PaymentCallback_vue___default.a, props: true }, { name: 'my-bookings', path: baseSegment + '/', component: __WEBPACK_IMPORTED_MODULE_6__components_pages_MyBookings_vue___default.a }, { name: 'my-experience', path: baseSegment + '/my-experience', component: __WEBPACK_IMPORTED_MODULE_7__components_pages_MyExperience_vue___default.a }, { name: 'my-party', path: baseSegment + '/my-party', component: __WEBPACK_IMPORTED_MODULE_8__components_pages_MyParty_vue___default.a }, { name: 'my-party.create', path: baseSegment + '/my-party/add', component: __WEBPACK_IMPORTED_MODULE_9__components_pages_MyPartyAdd_vue___default.a }, { name: 'availability.day', path: baseSegment + '/transfer/availability/transfer/overview', component: __WEBPACK_IMPORTED_MODULE_10__components_pages_AvailabilitySearchDay_vue___default.a }, { name: 'availability.slot', path: baseSegment + '/transfer/availability/transfer/search', component: __WEBPACK_IMPORTED_MODULE_11__components_pages_AvailabilitySearchSlot_vue___default.a }, { name: 'transfer.complete', path: baseSegment + '/transfer/complete', component: __WEBPACK_IMPORTED_MODULE_12__components_pages_TransferComplete_vue___default.a }, { name: 'guest.edit', path: baseSegment + '/my-party/guest/:id', component: __WEBPACK_IMPORTED_MODULE_13__components_pages_GuestEdit_vue___default.a, props: true }, { name: 'child.edit', path: baseSegment + '/my-party/child/:childId', component: __WEBPACK_IMPORTED_MODULE_14__components_pages_ChildEdit_vue___default.a, props: true }, { name: 'new.child.edit', path: baseSegment + '/my-party/new-child', component: __WEBPACK_IMPORTED_MODULE_15__components_pages_NewChildEdit_vue___default.a, props: true }, { name: 'magical-extras', path: baseSegment + '/magical-extras', component: __WEBPACK_IMPORTED_MODULE_16__components_pages_MagicalExtras_vue___default.a }, { name: 'extras.payment', path: baseSegment + '/magical-extras/payment', component: __WEBPACK_IMPORTED_MODULE_19__components_pages_ExtrasPayment_vue___default.a }, { name: 'my-details', path: baseSegment + '/my-details', component: __WEBPACK_IMPORTED_MODULE_17__components_pages_MyDetails_vue___default.a }, { name: 'payment', path: baseSegment + '/tickets/payment', component: __WEBPACK_IMPORTED_MODULE_18__components_pages_TicketsPayment_vue___default.a }, { name: 'transfer.payment', path: baseSegment + '/transfer/payment', component: __WEBPACK_IMPORTED_MODULE_20__components_pages_TransferPayment_vue___default.a }, { name: 'mmb-home', path: '/', component: __WEBPACK_IMPORTED_MODULE_21__components_pages_RedirectComponent_vue___default.a }]
});





// Add a request interceptor
__WEBPACK_IMPORTED_MODULE_24__api__["a" /* default */].interceptors.request.use(function (config) {
    // Do something before request is sent
    config.headers['Authorization'] = 'Bearer ' + __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].getters.accessToken;

    if (config.method !== 'get') {
        config.withCredentials = true;
    }

    return config;
});

// Add a response interceptor
__WEBPACK_IMPORTED_MODULE_24__api__["a" /* default */].interceptors.response.use(function (response) {
    // Do something with response data
    return response;
}, function (error) {
    // Do something with response error
    if (error.response && error.response.status === 401) {
        __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].dispatch('authenticate', _.omit(router.currentRoute, ['matched']), router.currentRoute.name);
    }

    return Promise.reject(error);
});

router.beforeEach(function (to, from, next) {
    if (__WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].getters.isAuthenticated) {
        if (__WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].getters.getBooking.id === 0) {
            __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].dispatch('loadBookings').then(function () {
                if (router.currentRoute.name === 'my-bookings' && __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].getters.getBookings.length === 1) {
                    router.replace({ name: 'my-experience' });
                }
                next();
            });
            return;
        }
        next();
        return;
    }
    if (_.startsWith(to.path, baseSegment + '/oauth/callback')) {
        try {
            var params = to.params;
            __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].dispatch('authorize', to.hash).then(function () {
                __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].commit('redirectTo', { redirectTo: null });
                router.replace({ name: 'oauth.callback.with.props', params: params });
            });
            return;
        } catch (error) {
            if (error instanceof __WEBPACK_IMPORTED_MODULE_23__errors_AuthenticationError__["a" /* default */]) {
                console.error(error.message);
                next();
                return;
            }
            throw error;
        }
    }
    __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].dispatch('authenticate', to, 'mmb-home');
});




Vue.component('multiselect', __WEBPACK_IMPORTED_MODULE_25_vue_multiselect___default.a);
Vue.component('mmb-nav', __WEBPACK_IMPORTED_MODULE_26__components_MmbNav_vue___default.a);
Vue.component('wooden-horses', __WEBPACK_IMPORTED_MODULE_27__components_WoodenHorse_vue___default.a);





Vue.use(__WEBPACK_IMPORTED_MODULE_29_vue_analytics___default.a, {
    id: 'UA-100951527-1',
    router: router
});

var app = new Vue({
    el: '#app',
    mixins: [__WEBPACK_IMPORTED_MODULE_28__mixins_Booking__["a" /* default */]],
    store: __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */],
    router: router,
    methods: {
        logout: function logout() {
            this.$store.dispatch('logout').then(function () {
                router.replace('/');
            });
        }
    }
});

var t = {
    init: function init() {
        $(document).ready(function () {
            $(document).on('click', '.image-misc__image--cross', function () {
                var activeInfo = $('.active.info').find('.day-selector__inside-date--small, .day-selector__inside-date--medium');
                $.each(activeInfo, function (k, i) {
                    if (i._tooltip) {
                        i._tooltip.hide();
                    }
                });
            });

            $(document).on('click', '.slot-selector__whats-included', function () {
                if ($(this).next()) {
                    $(this).next().toggle();
                }
            });
        });
    }
};
t.init();

/***/ }),
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */,
/* 360 */,
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */,
/* 366 */,
/* 367 */,
/* 368 */,
/* 369 */,
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */,
/* 374 */,
/* 375 */,
/* 376 */,
/* 377 */,
/* 378 */,
/* 379 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
	props: {
		adults: Array,
		seniors: Array,
		carers: Array
	},
	computed: {
		relationsshipsOptions: function relationsshipsOptions() {
			return [{
				name: 'Other', value: 'NOT_SPECIFIED'
			}, {
				name: 'Mother', value: 'MOTHER'
			}, {
				name: 'Father', value: 'FATHER'
			}, {
				name: 'Grandmother', value: 'GRANDMOTHER'
			}, {
				name: 'Grandfather', value: 'GRANDFATHER'
			}, {
				name: 'Aunt', value: 'AUNT'
			}, {
				name: 'Uncle', value: 'UNCLE'
			}, {
				name: 'Sibling', value: 'SIBLING'
			}, {
				name: 'Godparent', value: 'GODPARENT'
			}, {
				name: 'Friend', value: 'FRIEND'
			}];
		}
	},
	methods: {
		update: function update() {
			var _this = this;

			var vm = this;
			var bookingId = this.$store.getters.getBooking.id;
			var people = _.concat(this.adults, this.seniors, this.carers);

			Promise.all(_.map(_.filter(people, function (o) {
				return o.changed === true;
			}), function (person) {
				person.id = person.ticketId;
				person.dob = moment();
				person.gender = 'MALE';
				person.AttendeeType = person.type;
				person.answers = {
					yearsOfAttendance: [""]
				};
				return vm.$store.dispatch('updateAttendee', {
					bookingId: bookingId,
					attendee: person,
					ticketId: person.ticketId,
					booking: _this.$store.getters.getBooking
				});
			})).then(function () {
				_this.adults.forEach(function (adult) {
					adult.changed = false;
				});
				_this.seniors.forEach(function (senior) {
					senior.changed = false;
				});
				_this.carers.forEach(function (carer) {
					carer.changed = false;
				});
				vm.$router.replace({ name: 'my-party' });
			});
		},
		formatSelect: function formatSelect(options) {
			if (options.name) {
				return options.name;
			}
			if (options === 'NOT_SPECIFIED') {
				return 'Other';
			}
			return this.capitalizeFirstLetter(options);
		},
		capitalizeFirstLetter: function capitalizeFirstLetter(string) {
			string = string.toLowerCase();
			return string.charAt(0).toUpperCase() + string.slice(1);
		},
		linkUnlinkPerson: function linkUnlinkPerson(adult) {
			this.$store.dispatch('linkUnlinkPerson', {
				bookingId: this.$store.getters.getBooking.id,
				ticketId: adult.ticketId,
				link: adult.useBookerDetail
			});
		},
		markAdultAsChanged: function markAdultAsChanged(id) {
			if (id === null) {
				return;
			}

			var adult = _.find(this.adults, { ticketId: id });
			if (adult) {
				adult.changed = true;
			}
			var senior = _.find(this.seniors, { ticketId: id });
			if (senior) {
				senior.changed = true;
			}
			var carer = _.find(this.carers, { ticketId: id });
			if (carer) {
				carer.changed = true;
			}
		}
	}
});

/***/ }),
/* 380 */,
/* 381 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vuejs_datepicker__ = __webpack_require__(200);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vuejs_datepicker___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vuejs_datepicker__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_multiselect__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_multiselect___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_vue_multiselect__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mixins_Validation__ = __webpack_require__(110);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//





/* harmony default export */ __webpack_exports__["default"] = ({
	components: {
		'datepicker': __WEBPACK_IMPORTED_MODULE_0_vuejs_datepicker___default.a,
		'multiselect': __WEBPACK_IMPORTED_MODULE_1_vue_multiselect___default.a
	},
	mixins: [__WEBPACK_IMPORTED_MODULE_2__mixins_Validation__["a" /* default */]],
	props: {
		canEdit: Boolean,
		child: {
			type: Object,
			default: {
				id: 0,
				booking: null,
				type: 'CHILD',
				relationship: 'SON',
				gender: 'MALE',
				firstName: '',
				lastName: '',
				emailAddress: null,
				address1: null,
				address2: null,
				city: null,
				postCode: null,
				country: null,
				dob: '',
				primary: false,
				useBookerDetail: false,
				answers: {
					'pronunciation': '',
					'favoritePersonThing': '',
					'whatIsFavoritePersonThing': '',
					'favoriteActivityPassTime': '',
					'memorableEvent': '',
					'attendedBefore': true,
					'yearsOfAttendance': []
				}
			}
		}
	},
	data: function data() {
		var rules = {
			'child.answers.pronunciation': ['max:22'],
			'child.answers.favoritePersonThing': ['max:32'],
			'child.answers.whatIsFavoritePersonThing': ['max:16'],
			'child.answers.favoriteActivityPassTime': ['max:40'],
			'child.answers.memorableEvent': ['max:40']
		};

		return {

			rules: rules,
			relationships: [{ name: 'Not Specified', value: 'NOT_SPECIFIED' }, { name: 'Son', value: 'SON' }, { name: 'Daughter', value: 'DAUGHTER' }, { name: 'Grandson', value: 'GRANDSON' }, { name: 'Granddaughter', value: 'GRANDDAUGHTER' }],
			years: [2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016],
			showMore: false,
			nameErrors: {
				firstName: false,
				lastName: false
			}
		};
	},


	computed: {
		relationship: {
			get: function get() {
				return _.find(this.relationships, { value: this.child.relationship });
			},
			set: function set(relationship) {
				this.child.relationship = relationship.value;
			}
		},
		genders: function genders() {
			return [{
				value: 'MALE',
				label: 'Male'
			}, {
				value: 'FEMALE',
				label: 'Female'
			}];
		},

		gender: {
			get: function get() {
				return _.find(this.genders, { value: this.child.gender });
			},
			set: function set(gender) {
				this.child.gender = gender.value;
			}
		},
		reversedYears: function reversedYears() {
			return this.years.reverse();
		},
		isValid: function isValid() {
			return _.reduce(this.errors, function (isValid, error) {
				return isValid === false || error !== null ? false : true;
			}, true);
		}
	},
	mounted: function mounted() {
		var _this = this;

		this.passes && this.passes();
		this.$watch('child.firstName', function (child) {
			_this.child.firstName = _this.child.firstName.trim();
			if (_.isEmpty(_this.child.firstName) || _this.child.firstName.includes(",")) {
				_this.nameErrors.firstName = "This first name needs to be filled in.";
			} else {
				_this.nameErrors.firstName = false;
			}
		});
		this.$watch('child.lastName', function (child) {
			if (_.isEmpty(_this.child.lastName)) {
				_this.nameErrors.lastName = "This last name needs to be filled in.";
			} else {
				_this.nameErrors.lastName = false;
			}
		});
	},

	methods: {
		update: function update() {

			if (this.isValid && !this.nameErrors.firstName && !this.nameErrors.lastName) {
				var vm = this;

				this.$store.dispatch('updateAttendee', {
					bookingId: this.$store.getters.getBooking.id,
					attendee: this.child,
					booking: this.$store.getters.getBooking
				}).then(function () {
					vm.$router.push({ name: 'my-party' });
				});
			}
		},
		formatSelect: function formatSelect(options) {
			if (options.label) {
				return options.label;
			}
			return this.capitalizeFirstLetter(options);
		},
		capitalizeFirstLetter: function capitalizeFirstLetter(string) {
			string = string.toLowerCase();
			return string.charAt(0).toUpperCase() + string.slice(1);
		},
		yearIn: function yearIn(year) {
			return _.find(this.child.answers.yearsOfAttendance, function (storedYear) {
				return year == storedYear;
			});
		},
		showMoreYears: function showMoreYears() {
			this.showMore = !this.showMore;
		}
	}
});

/***/ }),
/* 382 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    name: 'child-summary',
    props: {
        src: Object
    },
    data: function data() {
        return {
            child: {
                id: null,
                first_name: '',
                first_name_confirm: '',
                last_name: '',
                name_pronunciation: '',
                gender: '',
                relationship: 'Not Specified',
                dob: null,
                favourite_thing: '',
                favourite_thing_relationship: '',
                favourite_acivity: '',
                memorable_event: '',
                attended_before: false,
                last_attended: []
            }
        };
    },
    mounted: function mounted() {
        this.child = this.src;
    },

    methods: {
        edit: function edit() {
            if (this.child.id === null) {
                this.$router.push({ name: 'new.child.edit', params: { ticketId: this.child.ticketId } });
                return;
            }
            if (this.child.type === 'ADULT') {
                this.$router.push({ name: 'guest.edit', params: { id: this.child.id, adultsOnly: true } });
            } else {
                this.$router.push({ name: 'child.edit', params: { childId: this.child.id } });
            }
        }
    }
});

/***/ }),
/* 383 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ChildSummary_vue__ = __webpack_require__(603);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ChildSummary_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__ChildSummary_vue__);
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ __webpack_exports__["default"] = ({
    components: {
        'child-summary': __WEBPACK_IMPORTED_MODULE_0__ChildSummary_vue___default.a
    },
    props: {
        children: Array
    },
    data: function data() {
        return {
            currentChildId: null
        };
    },

    computed: {
        currentChild: function currentChild() {
            return _.find(this.children, { id: this.currentChildId });
        }
    },
    methods: {
        edit: function edit(child) {
            this.currentChildId = child.id;
        },
        update: function update() {
            this.currentChildId = null;
        }
    }
});

/***/ }),
/* 384 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vuex__ = __webpack_require__(28);
//
//
//
//
//
//



/* harmony default export */ __webpack_exports__["default"] = ({
    computed: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_vuex__["mapGetters"])({
        error: 'getError'
    })
});

/***/ }),
/* 385 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue_multiselect__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue_multiselect___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue_multiselect__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mixins_Validation__ = __webpack_require__(110);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//




var countries = __webpack_require__(208)();

/* harmony default export */ __webpack_exports__["default"] = ({
    components: {
        'multiselect': __WEBPACK_IMPORTED_MODULE_0_vue_multiselect___default.a
    },
    mixins: [__WEBPACK_IMPORTED_MODULE_1__mixins_Validation__["a" /* default */]],
    props: {
        myDetails: {
            type: Object,
            default: {
                id: 0,
                title: '',
                firstName: '',
                lastName: '',
                emailAddress: '',
                telephone: '',
                address1: '',
                address2: '',
                city: '',
                postCode: '',
                information: '',
                country: {
                    id: 0,
                    name: '',
                    countryCodeAlpha2: '',
                    countryCodeAlpha3: '',
                    countryCodeNumeric: null,
                    sortOrder: 0
                }
            }
        },
        countries: {
            type: Array,
            default: function _default() {
                return countries.getData();
            }
        }
    },
    data: function data() {
        return {
            rules: {
                'myDetails.firstName': ['required'],
                'myDetails.lastName': ['required'],
                'myDetails.telephone': ['required'],
                'myDetails.emailAddress': ['required', 'email'],
                'myDetails.address1': ['required'],
                'myDetails.address2': ['required'],
                'myDetails.city': ['required'],
                'myDetails.postCode': ['required'],
                'myDetails.country.countryCodeAlpha2': ['required']
            },
            hasValidEmail: true
        };
    },

    methods: {
        update: function update() {
            this.$store.dispatch('updateMyDetails', this.myDetails);
        }
    }
});

/***/ }),
/* 386 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            hasValidPassword: true,
            hasValidConfirmedPassword: true,
            currentPassword: '',
            newPassword: '',
            confirmPassword: ''
        };
    },

    computed: {
        canChangePassword: function canChangePassword() {
            return this.newPassword.length > 0 && this.hasValidPassword && this.hasValidConfirmedPassword;
        }
    },
    methods: {
        validatePassword: function validatePassword() {
            this.hasValidPassword = this.newPassword.length >= 6;
        },
        validateConfirmedPassword: function validateConfirmedPassword() {
            this.hasValidConfirmedPassword = this.newPassword === this.confirmPassword;
        },
        change: function change() {
            this.$store.dispatch('changePassword', {
                currentPassword: this.currentPassword,
                newPassword: this.newPassword,
                confirmPassword: this.confirmPassword
            });
        }
    }
});

/***/ }),
/* 387 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            bookingsDropdown: false,
            showMobileMenu: false
        };
    },

    computed: {
        hasBookings: function hasBookings() {
            return this.$store.getters.getBookings && this.$store.getters.getBookings.length > 0;
        },
        bookings: function bookings() {
            return this.$store.getters.getBookings;
        },
        bookedDate: function bookedDate() {
            return moment(this.$store.getters.getBooking.bookedDate).format('Do MMM');
        }
    },
    methods: {
        logout: function logout() {
            var _this = this;

            this.$store.dispatch('logout').then(function () {
                _this.$router.replace('/');
            });
        },
        showBookingsDropDown: function showBookingsDropDown() {
            this.bookingsDropdown = !this.bookingsDropdown;
        },
        selectBooking: function selectBooking(booking) {
            var mobileMenu = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            this.$store.commit('setBooking', { booking: booking });
            this.$router.push({ name: 'my-experience' });
            this.showBookingsDropDown();
            if (this.showMobileMenu) {
                this.showMobileMenu = !this.showMobileMenu;
            }
        },
        getRouteName: function getRouteName(name) {
            var routeName = '';
            if (name && (name === 'my-experience' || name === 'my-party.create' || name === 'availability.day' || name === 'availability.slot')) {
                routeName = 'My Visit';
            }
            if (name && (name === 'my-party' || name === 'child.edit')) {
                routeName = 'Personalise';
            }
            if (name && name === 'magical-extras') {
                routeName = 'Magical Extras';
            }

            if (routeName === '') {
                routeName = 'My Visit';
            }

            return routeName;
        },
        toggleMobileMenu: function toggleMobileMenu() {
            this.showMobileMenu = !this.showMobileMenu;
            if (this.bookingsDropdown) {
                this.bookingsDropdown = !this.bookingsDropdown;
            }
        }
    }
});

/***/ }),
/* 388 */,
/* 389 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mixins_AdultsOnly__ = __webpack_require__(94);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ __webpack_exports__["default"] = ({
    mixins: [__WEBPACK_IMPORTED_MODULE_0__mixins_AdultsOnly__["a" /* default */]],
    props: {
        booking: Object,
        prices: Object,
        availableCancellationPolicies: Array
    },
    created: function created() {
        if (this.booking.childrenTickets + this.booking.infantsTickets === 0) {
            this.adultsOnly = true;
        }
    },
    data: function data() {
        return {
            hasMadeProtectionChoice: false,
            numberOfAdditionalWheelchairs: 0,
            cancellationPolicies: [],
            adultCurrentQuantity: 1,

            adultAdditionalQuantity: { value: 0, label: '0' },

            seniorCurrentQuantity: 0,

            seniorAdditionalQuantity: { value: 0, label: '0' },

            childCurrentQuantity: 1,

            childAdditionalQuantity: { value: 0, label: '0' },

            infantCurrentQuantity: 0,

            infantAdditionalQuantity: { value: 0, label: '0' },

            carerCurrentQuantity: 0,

            carerAdditionalQuantity: { value: 0, label: '0' }
        };
    },

    computed: {
        canAddCancellationProtection: function canAddCancellationProtection() {
            return this.adultAdditionalQuantity.value + this.seniorAdditionalQuantity.value + this.childAdditionalQuantity.value;
        },
        canCheckAvailability: function canCheckAvailability() {
            if (this.canAddCancellationProtection > 0) {
                return this.additionalTicketsQuantity > 0 && this.hasMadeProtectionChoice;
            }
            return this.additionalTicketsQuantity > 0;
        },
        availableTickets: function availableTickets() {
            var availableTickets = this.maxAvailableTickets - this.additionalTicketsQuantity;

            return availableTickets > 0 ? availableTickets : 0;
        },
        availableAdultTicketOptions: function availableAdultTicketOptions() {
            return this.createTicketOptions(this.adultAdditionalQuantity.value);
        },
        availableSeniorTicketOptions: function availableSeniorTicketOptions() {
            return this.createTicketOptions(this.seniorAdditionalQuantity.value);
        },
        availableChildTicketOptions: function availableChildTicketOptions() {
            return this.createTicketOptions(this.childAdditionalQuantity.value);
        },
        availableInfantTicketOptions: function availableInfantTicketOptions() {
            return this.createTicketOptions(this.infantAdditionalQuantity.value);
        },
        availableCarerTicketOptions: function availableCarerTicketOptions() {
            return this.createTicketOptions(this.carerAdditionalQuantity.value);
        },
        adultAdditionalTotal: function adultAdditionalTotal() {
            return parseFloat(Math.round(this.adultAdditionalQuantity.value * this.prices.adult * 100) / 100).toFixed(2);
        },
        seniorAdditionalTotal: function seniorAdditionalTotal() {
            return parseFloat(Math.round(this.seniorAdditionalQuantity.value * this.prices.senior * 100) / 100).toFixed(2);
        },
        childAdditionalTotal: function childAdditionalTotal() {
            return parseFloat(Math.round(this.childAdditionalQuantity.value * this.prices.child * 100) / 100).toFixed(2);
        },
        additionalTicketsQuantity: function additionalTicketsQuantity() {
            return this.adultAdditionalQuantity.value + this.seniorAdditionalQuantity.value + this.childAdditionalQuantity.value + this.infantAdditionalQuantity.value + this.carerAdditionalQuantity.value;
        },
        additionalTicketsTotal: function additionalTicketsTotal() {
            var total = parseFloat(this.adultAdditionalTotal) + parseFloat(this.seniorAdditionalTotal) + parseFloat(this.childAdditionalTotal);

            return parseFloat(Math.round(total * 100) / 100).toFixed(2);
        },
        numberOfAdditionalWheelchairOptions: function numberOfAdditionalWheelchairOptions() {
            return _.range(this.additionalTicketsQuantity + 1);
        },
        maxAvailableTickets: function maxAvailableTickets() {
            var maxAvailableTickets = 8 - (this.booking.adultsTickets + this.booking.seniorsTickets + this.booking.childrenTickets + this.booking.infantsTickets + this.booking.carersTickets);

            return maxAvailableTickets > 0 ? maxAvailableTickets : 0;
        },
        cancellationPolicyQuantity: function cancellationPolicyQuantity() {
            if (this.cancellationPolicies.length === 0) {
                return 0;
            }

            return this.adultAdditionalQuantity.value + this.seniorAdditionalQuantity.value + this.childAdditionalQuantity.value;
        },
        cancellationPolicyTotal: function cancellationPolicyTotal() {
            var _this = this;

            return _.reduce(this.cancellationPolicies, function (total, policy) {
                return total + parseFloat(policy.price) * parseInt(_this.cancellationPolicyQuantity);
            }, 0.00).toFixed(2);
        },
        grandTotal: function grandTotal() {
            var total = parseFloat(this.additionalTicketsTotal) + parseFloat(this.cancellationPolicyTotal);
            return parseFloat(Math.round(total * 100) / 100).toFixed(2);
        }
    },
    methods: {
        createTicketOptions: function createTicketOptions(currentTicketTypeQuantity) {
            return _.map(_.range(this.availableTickets + currentTicketTypeQuantity + 1), function (value) {
                return {
                    label: '' + value,
                    value: value
                };
            });
        },
        showCancellationPolicyPrice: function showCancellationPolicyPrice(price) {
            var tickets = this.adultAdditionalQuantity.value + this.seniorAdditionalQuantity.value + this.childAdditionalQuantity.value;

            return parseFloat(tickets * price).toFixed(2);
        },
        addCancellationPolicy: function addCancellationPolicy(policy) {
            if (_.find(this.cancellationPolicies, policy)) {
                return;
            }

            this.hasMadeProtectionChoice = true;
            this.cancellationPolicies.push(policy);
        },
        removeCancellationPolicy: function removeCancellationPolicy(policy) {
            this.hasMadeProtectionChoice = true;
            this.cancellationPolicies = _.reject(this.cancellationPolicies, policy);
        },
        checkAvailability: function checkAvailability() {
            var _this2 = this;

            var vm = this;

            this.$store.dispatch('reserveAdditionalTickets', {
                bookingId: this.booking.id,
                adults: this.adultAdditionalQuantity.value,
                seniors: this.seniorAdditionalQuantity.value,
                children: this.childAdditionalQuantity.value,
                infants: this.infantAdditionalQuantity.value,
                carers: this.carerAdditionalQuantity.value,
                wheelchairs: this.numberOfAdditionalWheelchairs,
                extras: _.map(this.cancellationPolicies, function (cancellationPolicy) {
                    var policy = _.clone(cancellationPolicy);

                    policy.qty = 1;
                    policy.selectedValue = _this2.cancellationPolicyQuantity;
                    return policy;
                }),
                successUrl: window.location.origin + this.$router.resolve({ name: 'gateway.callback' }).href,
                failureUrl: window.location.origin + this.$router.resolve({ name: 'gateway.callback' }).href
            }).then(function () {
                var response = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

                if (response === 'Skipped payment and completed booking with 0 cost') {
                    setTimeout(function () {
                        _this2.$store.dispatch('loadBookings').then(function () {
                            _this2.$store.getters.getBookings.forEach(function (loadedBooking) {
                                if (loadedBooking.id === _this2.booking.id) {
                                    _this2.$store.commit('setBooking', { booking: loadedBooking });
                                }
                            });
                        });
                        return _this2.$router.push({ name: 'transfer.complete' });
                    }, 1000);
                }
                vm.$router.push({ name: 'payment' });
            }).catch(function (error) {});
        },
        ticketSelected: function ticketSelected(a, b, c) {}
    }
});

/***/ }),
/* 390 */,
/* 391 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    props: {
        adults: {
            type: Number,
            default: 0
        },
        seniors: {
            type: Number,
            default: 0
        },
        children: {
            type: Number,
            default: 0
        },
        babies: {
            type: Number,
            default: 0
        },
        carers: {
            type: Number,
            default: 0
        },
        wheelchairs: {
            type: Number,
            default: 0
        },
        total: {
            type: String,
            default: '257.00'
        }
    }
});

/***/ }),
/* 392 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mixins_StopSelling__ = __webpack_require__(205);
//
//
//
//
//
//



/* harmony default export */ __webpack_exports__["default"] = ({
    mixins: [__WEBPACK_IMPORTED_MODULE_0__mixins_StopSelling__["a" /* default */]]
});

/***/ }),
/* 393 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({});

/***/ }),
/* 394 */,
/* 395 */,
/* 396 */,
/* 397 */,
/* 398 */,
/* 399 */,
/* 400 */,
/* 401 */,
/* 402 */,
/* 403 */,
/* 404 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__DaySelector_vue__ = __webpack_require__(257);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__DaySelector_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__DaySelector_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__BookingSummary_vue__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__BookingSummary_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__BookingSummary_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mixins_Booking__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__mixins_EmptyCheckout__ = __webpack_require__(234);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//






/* harmony default export */ __webpack_exports__["default"] = ({
    components: {
        'day-selector': __WEBPACK_IMPORTED_MODULE_0__DaySelector_vue___default.a,
        'booking-summary': __WEBPACK_IMPORTED_MODULE_1__BookingSummary_vue___default.a
    },
    mixins: [__WEBPACK_IMPORTED_MODULE_2__mixins_Booking__["a" /* default */], __WEBPACK_IMPORTED_MODULE_3__mixins_EmptyCheckout__["a" /* default */]],
    computed: {
        canContinueBooking: function canContinueBooking() {
            return this.selectedDay;
        },
        party: function party() {
            return this.$store.getters.party;
        }
    },
    created: function created() {
        // Create required state
        this.$store.commit('location', 'Windsor');
        this.$store.commit('season', '2017');
        this.$store.commit('party', {
            adults: this.booking.adultsTickets,
            seniors: this.booking.seniorsTickets,
            children: this.booking.childrenTickets,
            babies: this.booking.infantsTickets,
            carers: this.booking.carersTickets,
            wheelchairs: this.booking.wheelchairsTickets
        });

        this.$store.commit('setPremiumSearch', this.booking.premiumSlot ? this.booking.premiumSlot : false);

        // Trigger availability search
        this.$store.dispatch('checkAvailability');
    },

    methods: {
        updateDay: function updateDay(day) {
            this.$store.commit('day', day);
            this.$store.commit('slot', null);
        },
        removeExtra: function removeExtra() {
            console.log('remove extra');
        },
        continueBooking: function continueBooking() {
            this.$router.push({ name: 'availability.slot' });
        }
    }
});

/***/ }),
/* 405 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__SlotSelector_vue__ = __webpack_require__(261);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__SlotSelector_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__SlotSelector_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__BookingSummary_vue__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__BookingSummary_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__BookingSummary_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mixins_Booking__ = __webpack_require__(16);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//





/* harmony default export */ __webpack_exports__["default"] = ({
    components: {
        'slot-selector': __WEBPACK_IMPORTED_MODULE_0__SlotSelector_vue___default.a,
        'booking-summary': __WEBPACK_IMPORTED_MODULE_1__BookingSummary_vue___default.a
    },
    mixins: [__WEBPACK_IMPORTED_MODULE_2__mixins_Booking__["a" /* default */]],
    computed: {
        availableSlots: function availableSlots() {
            return _.get(this.selectedDay, 'availableSlots', 0);
        },
        canContinueBooking: function canContinueBooking() {
            return this.selectedSlot;
        },
        hasPrevDay: function hasPrevDay() {
            return this.checkPrevOrNext('prev');
        },
        hasNextDay: function hasNextDay() {
            return this.checkPrevOrNext('next');
        }
    },
    mounted: function mounted() {
        if (this.selectedDay === null) {
            return this.$router.push({ name: 'availability.day' });
        }
        this.dateChanged();
    },

    methods: {
        checkPrevOrNext: function checkPrevOrNext(direction) {
            var hasPrevOrNext = false;
            if (this.selectedDay === null) {
                return hasPrevOrNext;
            }

            var date = moment(this.selectedDay.date);
            this.days.forEach(function (val, i) {
                if (direction === 'prev') {
                    if (val.date && moment(val.date).isBefore(date)) {
                        hasPrevOrNext = true;
                    }
                }
                if (direction === 'next') {
                    if (val.date && moment(val.date).isAfter(date)) {
                        hasPrevOrNext = true;
                    }
                }
            });

            return hasPrevOrNext;
        },
        updateSlot: function updateSlot(slot) {
            this.$store.commit('slot', slot);
        },
        firstAvailableDay: function firstAvailableDay(currentMomentDay, step) {
            var filteredDays = _.filter(this.days, function (val, i) {
                if (step < 0) {
                    //prev
                    return val.date && moment(val.date).isBefore(currentMomentDay) && val.availableSlots && val.availableSlots > 0;
                }

                if (step > 0) {
                    //next
                    return val.date && moment(val.date).isAfter(currentMomentDay) && val.availableSlots && val.availableSlots > 0;
                }
            });
            if (filteredDays.length > 0) {
                if (step < 0) {
                    return _.last(filteredDays);
                }
                if (step > 0) {
                    return _.head(filteredDays);
                }
            }
        },

        /*
        firstAvailableDay(currentIndex, step) {
            let day = this.days[currentIndex + step];
             if (_.has(day, 'availableSlots') && day.availableSlots > 0) {
                return day;
            }
             return this.firstAvailableDay(currentIndex + step, step);
        },*/
        removeExtra: function removeExtra() {
            console.log('remove extra');
        },
        continueBooking: function continueBooking() {
            var vm = this;
            this.$store.dispatch('reserveTransfer').then(function (paymentRequired) {
                if (paymentRequired) {
                    vm.$router.push({ name: 'transfer.payment' });
                } else {
                    vm.$router.push({ name: 'transfer.complete' });
                }
            });
            //                this.$store.dispatch('reserveSlot').then(response => {
            //                    if(response.status === 200) {
            //                        this.$store.commit('resetReservationExpiry');
            //                        this.$store.commit('setReservationExpiry', moment(response.data.validUntil));
            //                        this.$router.push({name: 'extraSelector'});
            //                    }
            //                }).catch(error => {
            //                    console.error(error);
            //                });
        },
        indexOf: function indexOf(day) {
            var currentDay = day;

            return _.findIndex(this.days, function (day) {
                return day.date.isSame(currentDay.date, 'day');
            });
        },
        prevDay: function prevDay() {
            if (this.hasPrevDay) {
                this.changeDay(-1);
            }
        },
        nextDay: function nextDay() {
            if (this.hasNextDay) {
                this.changeDay(1);
            }
        },

        /*prevDay() {
            this.changeDay(-1);
        },
        nextDay() {
            this.changeDay(1);
        },*/
        changeDay: function changeDay(step) {
            try {

                var activeInfo = $('.active.info').find('.day-selector__inside-date--small, .day-selector__inside-date--medium');
                $.each(activeInfo, function (k, i) {
                    if (i._tooltip) {
                        i._tooltip.hide();
                    }
                });

                this.$store.commit('day', this.firstAvailableDay(moment(this.selectedDay.date), step));
                this.$store.commit('slot', null);
                this.dateChanged();
            } catch (error) {
                if (!(error instanceof RangeError)) {
                    throw error;
                }
            }
        },
        dateChanged: function dateChanged() {
            this.$store.dispatch('loadSlotAvailability');
        }
    }
});

/***/ }),
/* 406 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ChildForm_vue__ = __webpack_require__(256);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ChildForm_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__ChildForm_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mixins_Attendees__ = __webpack_require__(203);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//




/* harmony default export */ __webpack_exports__["default"] = ({
    components: {
        ChildForm: __WEBPACK_IMPORTED_MODULE_0__ChildForm_vue___default.a
    },
    mixins: [__WEBPACK_IMPORTED_MODULE_1__mixins_Attendees__["a" /* default */]],
    props: {
        childId: String | Number
    },
    data: function data() {
        return {
            canEdit: false
        };
    },
    mounted: function mounted() {
        var child = _.find(this.children, { id: parseInt(this.childId) });
        this.canEdit = !_.has(child, 'firstName');
    },

    computed: {
        child: function child() {
            return _.find(this.children, { id: parseInt(this.childId) });
        }
    }
});

/***/ }),
/* 407 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ReservationAlert_vue__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ReservationAlert_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__ReservationAlert_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__BookingDetails_vue__ = __webpack_require__(194);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__BookingDetails_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__BookingDetails_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__BookingSummary_vue__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__BookingSummary_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__BookingSummary_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__booking_portal_pages_PaymentErrorsContainer_vue__ = __webpack_require__(214);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__booking_portal_pages_PaymentErrorsContainer_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__booking_portal_pages_PaymentErrorsContainer_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mixins_MyDetails__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__mixins_AdditionalTickets__ = __webpack_require__(233);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__mixins_Booking__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__mixins_Prices__ = __webpack_require__(204);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__mixins_PaymentErrors__ = __webpack_require__(95);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//











/* harmony default export */ __webpack_exports__["default"] = ({
    components: {
        BookingDetails: __WEBPACK_IMPORTED_MODULE_1__BookingDetails_vue___default.a,
        BookingSummary: __WEBPACK_IMPORTED_MODULE_2__BookingSummary_vue___default.a,
        'payment-errors': __WEBPACK_IMPORTED_MODULE_3__booking_portal_pages_PaymentErrorsContainer_vue___default.a
    },
    mixins: [__WEBPACK_IMPORTED_MODULE_6__mixins_Booking__["a" /* default */], __WEBPACK_IMPORTED_MODULE_4__mixins_MyDetails__["a" /* default */], __WEBPACK_IMPORTED_MODULE_5__mixins_AdditionalTickets__["a" /* default */], __WEBPACK_IMPORTED_MODULE_7__mixins_Prices__["a" /* default */], __WEBPACK_IMPORTED_MODULE_8__mixins_PaymentErrors__["a" /* default */]],
    mounted: function mounted() {
        if (this.additionalExtras && this.additionalExtras.length < 1) {
            this.$router.replace({ name: 'magical-extras' });
        }
    },

    computed: {
        successUrl: function successUrl() {
            return window.location.origin + this.$router.resolve({ name: 'gateway.callback', params: { type: 'extras' } }).href + '?bookingId=' + this.$store.getters.getBooking.id;
        },
        failureUrl: function failureUrl() {
            return window.location.origin + this.$router.resolve({ name: 'gateway.callback', params: { type: 'extras' } }).href + '?bookingId=' + this.$store.getters.getBooking.id;
        },
        day: function day() {

            return { date: moment(this.$store.getters.getBooking.bookedDate) };
        },
        time: function time() {
            return { time: this.$store.getters.getBooking.bookedTime };
        },
        prices: function prices() {
            var adultPrice = 0;
            var seniorPrice = 0;
            var childPrice = 0;
            var totalPrice = 0;

            return { adultPrice: adultPrice, seniorPrice: seniorPrice, childPrice: childPrice, totalPrice: totalPrice };
        }
    },
    methods: {
        makePayment: function makePayment(params) {
            this.$store.dispatch('orderAdditionalExtras', params).then(function () {
                setTimeout(function () {
                    $('#paymentGatewayForm').submit();
                }, 200);
            });
        }
    }
});

/***/ }),
/* 408 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ChildForm_vue__ = __webpack_require__(256);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ChildForm_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__ChildForm_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mixins_Attendees__ = __webpack_require__(203);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//




/* harmony default export */ __webpack_exports__["default"] = ({
    components: {
        ChildForm: __WEBPACK_IMPORTED_MODULE_0__ChildForm_vue___default.a
    },
    mixins: [__WEBPACK_IMPORTED_MODULE_1__mixins_Attendees__["a" /* default */]],
    props: {
        id: String | Number,
        adultsOnly: false
    },
    computed: {
        guest: function guest() {
            if (this.adultsOnly) {
                var guest = _.find(this.adults, { id: parseInt(this.id) });

                if (!_.has(guest, 'answers') || guest.answers === null) {
                    guest.answers = {
                        'pronunciation': '',
                        'favoritePersonThing': '',
                        'whatIsFavoritePersonThing': '',
                        'favoriteActivityPassTime': '',
                        'memorableEvent': '',
                        'attendedBefore': true,
                        'yearsOfAttendance': []
                    };
                }

                return guest;
            }

            return _.find(this.children, { id: parseInt(this.id) });
        },
        canEdit: function canEdit() {
            return !_.has(this.guest, 'firstName');
        }
    }
});

/***/ }),
/* 409 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ExtraSelector_vue__ = __webpack_require__(258);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ExtraSelector_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__ExtraSelector_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__BookingSummary_vue__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__BookingSummary_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__BookingSummary_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mixins_Booking__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__mixins_EmptyCheckout__ = __webpack_require__(234);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mixins_StopSelling__ = __webpack_require__(205);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//







/* harmony default export */ __webpack_exports__["default"] = ({
    components: {
        'extra-selector': __WEBPACK_IMPORTED_MODULE_0__ExtraSelector_vue___default.a,
        'booking-summary': __WEBPACK_IMPORTED_MODULE_1__BookingSummary_vue___default.a
    },
    mixins: [__WEBPACK_IMPORTED_MODULE_2__mixins_Booking__["a" /* default */], __WEBPACK_IMPORTED_MODULE_3__mixins_EmptyCheckout__["a" /* default */], __WEBPACK_IMPORTED_MODULE_4__mixins_StopSelling__["a" /* default */]],
    mounted: function mounted() {
        this.$store.dispatch('loadAvailableExtras');
        this.$store.commit('party', {
            adults: 0,
            seniors: 0,
            children: 0,
            babies: 0,
            carers: 0,
            wheelchairs: 0
        });
    },

    computed: {
        additionalExtras: function additionalExtras() {
            return this.$store.getters.getAdditionalExtras;
        },
        canContinueBooking: function canContinueBooking() {
            return this.additionalExtras && this.additionalExtras.length > 0;
        }
    },
    methods: {
        continueBooking: function continueBooking() {
            var vm = this;

            this.$store.dispatch('reserveAdditionalExtras', { bookingId: this.booking.id, extras: this.additionalExtras }).then(function () {
                vm.$router.push({ name: 'extras.payment' });
            });
        },
        addExtra: function addExtra(extra) {
            console.log(extra);
            this.$store.commit('setAdditionalExtras', extra);
        },
        restartAvailabilitySearch: function restartAvailabilitySearch() {
            this.$store.commit('day', null);
            this.$store.commit('slot', null);
            this.$store.commit('resetExtras');
            this.$store.commit('resetSlotAvailability');
            this.$store.commit('resetAvailability');
            this.$router.push({ name: 'partySelector' });
        },
        removeExtra: function removeExtra(id) {
            this.$store.commit('removeAdditionalExtra', id);
        }
    }
});

/***/ }),
/* 410 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mixins_Booking__ = __webpack_require__(16);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ __webpack_exports__["default"] = ({
    mixins: [__WEBPACK_IMPORTED_MODULE_0__mixins_Booking__["a" /* default */]],
    computed: {
        bookings: function bookings() {
            return this.$store.getters.getBookings;
        }
    },
    mounted: function mounted() {
        if (this.bookings && this.bookings.length > 0) {
            this.selectBooking(this.bookings[0]);
        }
    },

    methods: {
        selectBooking: function selectBooking(booking) {
            this.$store.commit('setBooking', { booking: booking });
            this.$router.push({ name: 'my-experience' });
        }
    }
});

/***/ }),
/* 411 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ManageDetails_vue__ = __webpack_require__(605);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ManageDetails_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__ManageDetails_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ManagePassword_vue__ = __webpack_require__(606);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ManagePassword_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__ManagePassword_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mixins_MyDetails__ = __webpack_require__(109);
//
//
//
//
//
//
//
//
//
//
//
//
//





/* harmony default export */ __webpack_exports__["default"] = ({
    components: {
        ManageDetails: __WEBPACK_IMPORTED_MODULE_0__ManageDetails_vue___default.a,
        ManagePassword: __WEBPACK_IMPORTED_MODULE_1__ManagePassword_vue___default.a
    },
    mixins: [__WEBPACK_IMPORTED_MODULE_2__mixins_MyDetails__["a" /* default */]]
});

/***/ }),
/* 412 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__PartySummary_vue__ = __webpack_require__(611);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__PartySummary_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__PartySummary_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__StopSellingWarning_vue__ = __webpack_require__(612);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__StopSellingWarning_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__StopSellingWarning_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mixins_Booking__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__mixins_MyDetails__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mixins_StopSelling__ = __webpack_require__(205);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//







/* harmony default export */ __webpack_exports__["default"] = ({
				components: {
								PartySummary: __WEBPACK_IMPORTED_MODULE_0__PartySummary_vue___default.a,
								StopSellingWarning: __WEBPACK_IMPORTED_MODULE_1__StopSellingWarning_vue___default.a
				},
				mixins: [__WEBPACK_IMPORTED_MODULE_2__mixins_Booking__["a" /* default */], __WEBPACK_IMPORTED_MODULE_3__mixins_MyDetails__["a" /* default */], __WEBPACK_IMPORTED_MODULE_4__mixins_StopSelling__["a" /* default */]],
				computed: {
								bookedDate: function bookedDate() {
												return moment(this.booking.bookedDate).format('Do MMMM YYYY');
								},
								bookedDay: function bookedDay() {
												return moment(this.booking.bookedDate).format('dddd');
								},
								maxAvailableTickets: function maxAvailableTickets() {
												var maxAvailableTickets = 8 - (this.booking.adultsTickets + this.booking.seniorsTickets + this.booking.childrenTickets + this.booking.infantsTickets + this.booking.carersTickets);

												return maxAvailableTickets > 0 ? maxAvailableTickets : 0;
								}
				},
				methods: {
								changeDate: function changeDate() {
												if (!this.mustStopSelling) {
																this.$router.push({ name: 'availability.day' });
												}
								},
								addPeople: function addPeople() {
												if (!this.mustStopSelling) {
																this.$router.push({ name: 'my-party.create' });
												}
								}
				}
});

/***/ }),
/* 413 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Children_vue__ = __webpack_require__(604);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Children_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__Children_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Adults_vue__ = __webpack_require__(601);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Adults_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__Adults_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__GatewayError_vue__ = __webpack_require__(348);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__GatewayError_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__GatewayError_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__mixins_Attendees__ = __webpack_require__(203);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mixins_AdultsOnly__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__mixins_StopSelling__ = __webpack_require__(205);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//








/* harmony default export */ __webpack_exports__["default"] = ({
    components: {
        Children: __WEBPACK_IMPORTED_MODULE_0__Children_vue___default.a,
        Adults: __WEBPACK_IMPORTED_MODULE_1__Adults_vue___default.a,
        GatewayError: __WEBPACK_IMPORTED_MODULE_2__GatewayError_vue___default.a
    },
    mixins: [__WEBPACK_IMPORTED_MODULE_4__mixins_AdultsOnly__["a" /* default */], __WEBPACK_IMPORTED_MODULE_3__mixins_Attendees__["a" /* default */], __WEBPACK_IMPORTED_MODULE_5__mixins_StopSelling__["a" /* default */]],
    created: function created() {
        if (this.children.length === 0) {
            this.adultsOnly = true;
        }
    }
});

/***/ }),
/* 414 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__PartyAdditions_vue__ = __webpack_require__(609);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__PartyAdditions_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__PartyAdditions_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__GatewayError_vue__ = __webpack_require__(348);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__GatewayError_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__GatewayError_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mixins_Booking__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__mixins_Prices__ = __webpack_require__(204);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mixins_Extras__ = __webpack_require__(424);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__mixins_EmptyCheckout__ = __webpack_require__(234);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//








/* harmony default export */ __webpack_exports__["default"] = ({
	components: {
		PartyAdditions: __WEBPACK_IMPORTED_MODULE_0__PartyAdditions_vue___default.a,
		GatewayError: __WEBPACK_IMPORTED_MODULE_1__GatewayError_vue___default.a
	},
	mixins: [__WEBPACK_IMPORTED_MODULE_2__mixins_Booking__["a" /* default */], __WEBPACK_IMPORTED_MODULE_3__mixins_Prices__["a" /* default */], __WEBPACK_IMPORTED_MODULE_4__mixins_Extras__["a" /* default */], __WEBPACK_IMPORTED_MODULE_5__mixins_EmptyCheckout__["a" /* default */]],
	mounted: function mounted() {
		this.$store.commit('resetExtras');
	},

	computed: {
		bookedDate: function bookedDate() {
			return moment(this.booking.bookedDate).format('dddd Do MMMM YYYY');
		},
		bookedDay: function bookedDay() {
			return moment(this.booking.bookedDate).format('dddd');
		},
		maxAvailableTickets: function maxAvailableTickets() {
			var maxAvailableTickets = 8 - (this.booking.adultsTickets + this.booking.seniorsTickets + this.booking.childrenTickets + this.booking.infantsTickets + this.booking.carersTickets);

			return maxAvailableTickets > 0 ? maxAvailableTickets : 0;
		}
	}
});

/***/ }),
/* 415 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ChildForm_vue__ = __webpack_require__(256);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ChildForm_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__ChildForm_vue__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ __webpack_exports__["default"] = ({
	components: {
		ChildForm: __WEBPACK_IMPORTED_MODULE_0__ChildForm_vue___default.a
	},
	props: {
		ticketId: String | Number
	},
	mounted: function mounted() {
		if (typeof this.ticketId === 'undefined') {
			return this.$router.replace({ name: 'my-party' });
		}
	},
	data: function data() {
		return {
			canEdit: true,
			child: {
				id: null,
				booking: null,
				type: 'CHILD',
				relationship: 'NOT_SPECIFIED',
				gender: null,
				firstName: '',
				lastName: '',
				emailAddress: null,
				address1: null,
				address2: null,
				city: null,
				postCode: null,
				country: null,
				dob: '',
				primary: false,
				useBookerDetail: false,
				ticketId: this.ticketId,
				answers: {
					'pronunciation': '',
					'favoritePersonThing': '',
					'whatIsFavoritePersonThing': '',
					'favoriteActivityPassTime': '',
					'memorableEvent': '',
					'attendedBefore': false,
					'yearsOfAttendance': []
				}
			}
		};
	}
});

/***/ }),
/* 416 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    mounted: function mounted() {
        var _this = this;

        if (this.$store.getters.isAuthenticated) {
            this.$store.dispatch('loadBookings').then(function () {
                var bookings = _this.$store.getters.getBookings;
                if (_this.$route.params.id === '0') {
                    _this.$store.commit('setBooking', { booking: bookings[0] });
                } else {
                    bookings.forEach(function (loadedBooking) {
                        if (loadedBooking.id.toString() === _this.$route.params.id) {
                            _this.$store.commit('setBooking', { booking: loadedBooking });
                        }
                    });
                }
                _this.$router.replace({ name: _this.$route.params.name });
            });
        }
    }
});

/***/ }),
/* 417 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__store__ = __webpack_require__(39);
//
//
//
//
//
//
//
//
//
//
//
//
//
//



var config = {
    tickets: {
        successAction: 'confirmAdditionalTickets',
        success: { name: 'transfer.complete' },
        recoverAction: 'recoverAdditionalTickets',
        failure: { name: 'payment' }
    },
    extras: {
        successAction: 'confirmAdditionalExtras',
        success: { name: 'transfer.complete' },
        recoverAction: 'recoverAdditionalExtras',
        failure: { name: 'extras.payment' }
    },
    transfer: {
        successAction: 'confirmTransfer',
        success: { name: 'transfer.complete' },
        recoverAction: 'recoverTransfer',
        failure: { name: 'transfer.payment' }
    }
};

/* harmony default export */ __webpack_exports__["default"] = ({
    beforeRouteEnter: function beforeRouteEnter(to, from, next) {
        var options = _.get(config, to.params.type);

        if (to.query.success === 'false') {
            __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].commit('setPaymentErrors', {
                errorCode: to.query.errorCode,
                errorMessage: to.query.errorMessage,
                errors: to.query.validationErrors
            });

            __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].dispatch(options.recoverAction).then(function (response) {
                next(options.failure);
            }).catch(function (error) {
                next();
            });
            return;
        }

        __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].dispatch(options.successAction, {
            transactionId: to.query.transactionId,
            hash: to.query.hash,
            bookingId: to.query.bookingId
        }).then(function () {
            __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].dispatch('loadBookings').then(function () {
                next(options.success);
            });
        });
    },

    computed: {
        errorCode: function errorCode() {
            return this.$route.query.errorCode;
        },
        errorMessage: function errorMessage() {
            return this.$route.query.errorMessage;
        },
        validationErrors: function validationErrors() {
            return this.$route.query.validationErrors;
        }
    }
});

/***/ }),
/* 418 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    created: function created() {
        this.$router.push({ name: 'my-experience' });
    }
});

/***/ }),
/* 419 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ReservationAlert_vue__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ReservationAlert_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__ReservationAlert_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__BookingDetails_vue__ = __webpack_require__(194);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__BookingDetails_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__BookingDetails_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__BookingSummary_vue__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__BookingSummary_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__BookingSummary_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__booking_portal_pages_PaymentErrorsContainer_vue__ = __webpack_require__(214);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__booking_portal_pages_PaymentErrorsContainer_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__booking_portal_pages_PaymentErrorsContainer_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mixins_MyDetails__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__mixins_AdditionalTickets__ = __webpack_require__(233);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__mixins_Prices__ = __webpack_require__(204);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__mixins_PaymentErrors__ = __webpack_require__(95);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//










/* harmony default export */ __webpack_exports__["default"] = ({
    components: {
        ReservationAlert: __WEBPACK_IMPORTED_MODULE_0__ReservationAlert_vue___default.a,
        BookingDetails: __WEBPACK_IMPORTED_MODULE_1__BookingDetails_vue___default.a,
        BookingSummary: __WEBPACK_IMPORTED_MODULE_2__BookingSummary_vue___default.a,
        'payment-errors': __WEBPACK_IMPORTED_MODULE_3__booking_portal_pages_PaymentErrorsContainer_vue___default.a
    },
    mixins: [__WEBPACK_IMPORTED_MODULE_4__mixins_MyDetails__["a" /* default */], __WEBPACK_IMPORTED_MODULE_5__mixins_AdditionalTickets__["a" /* default */], __WEBPACK_IMPORTED_MODULE_6__mixins_Prices__["a" /* default */], __WEBPACK_IMPORTED_MODULE_7__mixins_PaymentErrors__["a" /* default */]],
    created: function created() {
        if (this.$store.getters.reservationExpiry === null) {
            this.restartAvailabilitySearch();
        }
    },

    computed: {
        successUrl: function successUrl() {
            return window.location.origin + this.$router.resolve({ name: 'gateway.callback', params: { type: 'tickets' } }).href + '?bookingId=' + this.$store.getters.getBooking.id;
        },
        failureUrl: function failureUrl() {
            return window.location.origin + this.$router.resolve({ name: 'gateway.callback', params: { type: 'tickets' } }).href + '?bookingId=' + this.$store.getters.getBooking.id;
        },
        day: function day() {
            return { date: moment(this.$store.getters.getBooking.bookedDate) };
        },
        time: function time() {
            return { time: this.$store.getters.getBooking.bookedTime };
        },
        prices: function prices() {
            var adultPrice = this.adultPrice * this.additionalTickets.adults;
            var seniorPrice = this.seniorPrice * this.additionalTickets.seniors;
            var childPrice = this.childPrice * this.additionalTickets.children;
            var totalPrice = adultPrice + seniorPrice + childPrice;

            return { adultPrice: adultPrice, seniorPrice: seniorPrice, childPrice: childPrice, totalPrice: totalPrice };
        }
    },
    methods: {
        restartAvailabilitySearch: function restartAvailabilitySearch() {
            this.$store.commit('resetReservationExpiry');
            this.$router.push({ name: 'my-party.create' });
        },
        makePayment: function makePayment(params) {
            this.$store.dispatch('orderAdditionalTickets', params).then(function () {
                setTimeout(function () {
                    $('#paymentGatewayForm').submit();
                }, 200);
            });
        }
    }
});

/***/ }),
/* 420 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    mounted: function mounted() {
        this.$store.commit('party', {
            adults: 0,
            seniors: 0,
            children: 0,
            babies: 0,
            carers: 0,
            wheelchairs: 0
        });
    }
});

/***/ }),
/* 421 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ReservationAlert_vue__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ReservationAlert_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__ReservationAlert_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__BookingDetails_vue__ = __webpack_require__(194);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__BookingDetails_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__BookingDetails_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__BookingSummary_vue__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__BookingSummary_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__BookingSummary_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__mixins_Attendees__ = __webpack_require__(203);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mixins_MyDetails__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__mixins_AdditionalTickets__ = __webpack_require__(233);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__mixins_Prices__ = __webpack_require__(204);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__mixins_Booking__ = __webpack_require__(16);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//










/* harmony default export */ __webpack_exports__["default"] = ({
    components: {
        ReservationAlert: __WEBPACK_IMPORTED_MODULE_0__ReservationAlert_vue___default.a,
        BookingDetails: __WEBPACK_IMPORTED_MODULE_1__BookingDetails_vue___default.a,
        BookingSummary: __WEBPACK_IMPORTED_MODULE_2__BookingSummary_vue___default.a
    },
    mixins: [__WEBPACK_IMPORTED_MODULE_3__mixins_Attendees__["a" /* default */], __WEBPACK_IMPORTED_MODULE_7__mixins_Booking__["a" /* default */], __WEBPACK_IMPORTED_MODULE_4__mixins_MyDetails__["a" /* default */], __WEBPACK_IMPORTED_MODULE_5__mixins_AdditionalTickets__["a" /* default */], __WEBPACK_IMPORTED_MODULE_6__mixins_Prices__["a" /* default */]],
    created: function created() {
        if (this.$store.getters.reservationExpiry === null) {
            this.restartAvailabilitySearch();
        }
    },

    computed: {
        successUrl: function successUrl() {
            return window.location.origin + this.$router.resolve({ name: 'gateway.callback', params: { type: 'transfer' } }).href + '?bookingId=' + this.$store.getters.getBooking.id;
        },
        failureUrl: function failureUrl() {
            return window.location.origin + this.$router.resolve({ name: 'gateway.callback', params: { type: 'transfer' } }).href + '?bookingId=' + this.$store.getters.getBooking.id;
        },
        day: function day() {
            return this.$store.getters.day;
        },
        time: function time() {
            return this.$store.getters.slot;
        },
        prices: function prices() {
            var adultPrice = this.adultPrice * this.additionalTickets.adults;
            var seniorPrice = this.seniorPrice * this.additionalTickets.seniors;
            var childPrice = this.childPrice * this.additionalTickets.children;
            var totalPrice = adultPrice + seniorPrice + childPrice;

            return { adultPrice: adultPrice, seniorPrice: seniorPrice, childPrice: childPrice, totalPrice: totalPrice };
        }
    },
    methods: {
        restartAvailabilitySearch: function restartAvailabilitySearch() {
            this.$store.commit('resetReservationExpiry');
            this.$router.push({ name: 'availability.day' });
        },
        makePayment: function makePayment(params) {
            params['isTransfer'] = true;
            this.$store.dispatch('orderAdditionalTickets', params).then(function () {
                setTimeout(function () {
                    $('#paymentGatewayForm').submit();
                }, 200);
            });
        },
        applyPromoCode: function applyPromoCode() {}
    }
});

/***/ }),
/* 422 */,
/* 423 */,
/* 424 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vuex__ = __webpack_require__(28);


/* harmony default export */ __webpack_exports__["a"] = ({
    beforeRouteEnter: function beforeRouteEnter(to, from, next) {
        next(function (vm) {
            vm.$store.dispatch('loadAvailableExtras').then(function () {
                next();
            });
        });
    },
    beforeRouteUpdate: function beforeRouteUpdate(to, from, next) {
        this.$store.dispatch('loadAvailableExtras').then(function () {
            next();
        });
    },

    computed: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_vuex__["mapGetters"])({
        availableExtras: 'availableExtras',
        availableInsurance: 'availableInsurance'
    })
});

/***/ }),
/* 425 */,
/* 426 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var state = {
	baseSegment: '/manage-my-booking',
	baseURL: window.location.origin + '/manage-my-booking'
};

var actions = {};

var mutations = {};

var getters = {
	getBaseURL: function getBaseURL(state) {
		return state.baseURL;
	}
};

/* harmony default export */ __webpack_exports__["a"] = ({
	state: state,
	getters: getters,
	actions: actions,
	mutations: mutations
});

/***/ }),
/* 427 */,
/* 428 */,
/* 429 */,
/* 430 */,
/* 431 */,
/* 432 */,
/* 433 */,
/* 434 */,
/* 435 */,
/* 436 */,
/* 437 */,
/* 438 */,
/* 439 */,
/* 440 */,
/* 441 */,
/* 442 */,
/* 443 */,
/* 444 */,
/* 445 */,
/* 446 */,
/* 447 */,
/* 448 */,
/* 449 */,
/* 450 */,
/* 451 */,
/* 452 */,
/* 453 */,
/* 454 */,
/* 455 */,
/* 456 */,
/* 457 */,
/* 458 */,
/* 459 */,
/* 460 */,
/* 461 */,
/* 462 */,
/* 463 */,
/* 464 */,
/* 465 */,
/* 466 */,
/* 467 */,
/* 468 */,
/* 469 */,
/* 470 */,
/* 471 */,
/* 472 */,
/* 473 */,
/* 474 */,
/* 475 */,
/* 476 */,
/* 477 */,
/* 478 */,
/* 479 */,
/* 480 */,
/* 481 */,
/* 482 */,
/* 483 */,
/* 484 */,
/* 485 */,
/* 486 */,
/* 487 */,
/* 488 */,
/* 489 */,
/* 490 */,
/* 491 */,
/* 492 */,
/* 493 */,
/* 494 */,
/* 495 */,
/* 496 */,
/* 497 */,
/* 498 */,
/* 499 */,
/* 500 */,
/* 501 */,
/* 502 */,
/* 503 */,
/* 504 */,
/* 505 */,
/* 506 */,
/* 507 */,
/* 508 */,
/* 509 */,
/* 510 */,
/* 511 */,
/* 512 */,
/* 513 */,
/* 514 */,
/* 515 */,
/* 516 */,
/* 517 */,
/* 518 */,
/* 519 */,
/* 520 */,
/* 521 */,
/* 522 */,
/* 523 */,
/* 524 */,
/* 525 */,
/* 526 */,
/* 527 */,
/* 528 */,
/* 529 */,
/* 530 */,
/* 531 */,
/* 532 */,
/* 533 */,
/* 534 */,
/* 535 */,
/* 536 */,
/* 537 */,
/* 538 */,
/* 539 */,
/* 540 */,
/* 541 */,
/* 542 */,
/* 543 */,
/* 544 */,
/* 545 */,
/* 546 */,
/* 547 */,
/* 548 */,
/* 549 */,
/* 550 */,
/* 551 */,
/* 552 */,
/* 553 */,
/* 554 */,
/* 555 */,
/* 556 */,
/* 557 */,
/* 558 */,
/* 559 */,
/* 560 */,
/* 561 */,
/* 562 */,
/* 563 */,
/* 564 */,
/* 565 */,
/* 566 */,
/* 567 */,
/* 568 */,
/* 569 */,
/* 570 */,
/* 571 */,
/* 572 */,
/* 573 */,
/* 574 */,
/* 575 */,
/* 576 */,
/* 577 */,
/* 578 */,
/* 579 */,
/* 580 */,
/* 581 */,
/* 582 */,
/* 583 */,
/* 584 */,
/* 585 */,
/* 586 */,
/* 587 */,
/* 588 */,
/* 589 */,
/* 590 */,
/* 591 */,
/* 592 */,
/* 593 */,
/* 594 */,
/* 595 */,
/* 596 */,
/* 597 */,
/* 598 */,
/* 599 */,
/* 600 */,
/* 601 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(379),
  /* template */
  __webpack_require__(654),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/Adults.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] Adults.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-32281ec6", Component.options)
  } else {
    hotAPI.reload("data-v-32281ec6", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 602 */,
/* 603 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(382),
  /* template */
  __webpack_require__(682),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/ChildSummary.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] ChildSummary.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-d379c112", Component.options)
  } else {
    hotAPI.reload("data-v-d379c112", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 604 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(383),
  /* template */
  __webpack_require__(657),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/Children.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] Children.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-3b1dcae8", Component.options)
  } else {
    hotAPI.reload("data-v-3b1dcae8", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 605 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(385),
  /* template */
  __webpack_require__(683),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/ManageDetails.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] ManageDetails.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-e47f4640", Component.options)
  } else {
    hotAPI.reload("data-v-e47f4640", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 606 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(386),
  /* template */
  __webpack_require__(644),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/ManagePassword.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] ManagePassword.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-0c8dc126", Component.options)
  } else {
    hotAPI.reload("data-v-0c8dc126", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 607 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(387),
  /* template */
  __webpack_require__(664),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/MmbNav.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] MmbNav.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-59e38064", Component.options)
  } else {
    hotAPI.reload("data-v-59e38064", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 608 */,
/* 609 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(389),
  /* template */
  __webpack_require__(669),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/PartyAdditions.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] PartyAdditions.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-7dcef47e", Component.options)
  } else {
    hotAPI.reload("data-v-7dcef47e", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 610 */,
/* 611 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(391),
  /* template */
  __webpack_require__(677),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/PartySummary.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] PartySummary.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-c7bb5126", Component.options)
  } else {
    hotAPI.reload("data-v-c7bb5126", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 612 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(392),
  /* template */
  __webpack_require__(678),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/StopSellingWarning.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] StopSellingWarning.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-c7c6d4ca", Component.options)
  } else {
    hotAPI.reload("data-v-c7c6d4ca", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 613 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(393),
  /* template */
  __webpack_require__(656),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/WoodenHorse.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] WoodenHorse.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-3aaa22ea", Component.options)
  } else {
    hotAPI.reload("data-v-3aaa22ea", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 614 */,
/* 615 */,
/* 616 */,
/* 617 */,
/* 618 */,
/* 619 */,
/* 620 */,
/* 621 */,
/* 622 */,
/* 623 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(404),
  /* template */
  __webpack_require__(680),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/pages/AvailabilitySearchDay.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] AvailabilitySearchDay.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-c90a4c9e", Component.options)
  } else {
    hotAPI.reload("data-v-c90a4c9e", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 624 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(405),
  /* template */
  __webpack_require__(648),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/pages/AvailabilitySearchSlot.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] AvailabilitySearchSlot.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-229fcbb9", Component.options)
  } else {
    hotAPI.reload("data-v-229fcbb9", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 625 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(406),
  /* template */
  __webpack_require__(645),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/pages/ChildEdit.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] ChildEdit.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-167d8284", Component.options)
  } else {
    hotAPI.reload("data-v-167d8284", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 626 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(407),
  /* template */
  __webpack_require__(658),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/pages/ExtrasPayment.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] ExtrasPayment.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-3c21251b", Component.options)
  } else {
    hotAPI.reload("data-v-3c21251b", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 627 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(408),
  /* template */
  __webpack_require__(673),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/pages/GuestEdit.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] GuestEdit.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-9cee090c", Component.options)
  } else {
    hotAPI.reload("data-v-9cee090c", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 628 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(409),
  /* template */
  __webpack_require__(670),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/pages/MagicalExtras.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] MagicalExtras.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-87800bda", Component.options)
  } else {
    hotAPI.reload("data-v-87800bda", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 629 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(410),
  /* template */
  __webpack_require__(665),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/pages/MyBookings.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] MyBookings.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-5e13cebe", Component.options)
  } else {
    hotAPI.reload("data-v-5e13cebe", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 630 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(411),
  /* template */
  __webpack_require__(660),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/pages/MyDetails.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] MyDetails.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-4413006e", Component.options)
  } else {
    hotAPI.reload("data-v-4413006e", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 631 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(412),
  /* template */
  __webpack_require__(650),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/pages/MyExperience.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] MyExperience.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-25787c24", Component.options)
  } else {
    hotAPI.reload("data-v-25787c24", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 632 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(413),
  /* template */
  __webpack_require__(681),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/pages/MyParty.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] MyParty.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-cf5167dc", Component.options)
  } else {
    hotAPI.reload("data-v-cf5167dc", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 633 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(414),
  /* template */
  __webpack_require__(655),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/pages/MyPartyAdd.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] MyPartyAdd.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-37947242", Component.options)
  } else {
    hotAPI.reload("data-v-37947242", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 634 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(415),
  /* template */
  __webpack_require__(643),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/pages/NewChildEdit.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] NewChildEdit.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-0a749d84", Component.options)
  } else {
    hotAPI.reload("data-v-0a749d84", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 635 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(416),
  /* template */
  __webpack_require__(679),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/pages/OAuthCallback.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] OAuthCallback.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-c8c32ad8", Component.options)
  } else {
    hotAPI.reload("data-v-c8c32ad8", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 636 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(417),
  /* template */
  __webpack_require__(666),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/pages/PaymentCallback.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] PaymentCallback.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-6505a363", Component.options)
  } else {
    hotAPI.reload("data-v-6505a363", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 637 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(418),
  /* template */
  __webpack_require__(661),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/pages/RedirectComponent.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] RedirectComponent.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-45a5bc79", Component.options)
  } else {
    hotAPI.reload("data-v-45a5bc79", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 638 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(419),
  /* template */
  __webpack_require__(676),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/pages/TicketsPayment.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] TicketsPayment.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-a87edb52", Component.options)
  } else {
    hotAPI.reload("data-v-a87edb52", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 639 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(420),
  /* template */
  __webpack_require__(663),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/pages/TransferComplete.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] TransferComplete.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-555110fc", Component.options)
  } else {
    hotAPI.reload("data-v-555110fc", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 640 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(2)(
  /* script */
  __webpack_require__(421),
  /* template */
  __webpack_require__(667),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "/Users/dgalitsyn/Development/lapland-website/resources/js/aurora/components/pages/TransferPayment.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] TransferPayment.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-6e9cc2da", Component.options)
  } else {
    hotAPI.reload("data-v-6e9cc2da", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 641 */,
/* 642 */,
/* 643 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row"
  }, [_vm._m(0), _vm._v(" "), _vm._m(1), _vm._v(" "), (_vm.child) ? _c('child-form', {
    attrs: {
      "child": _vm.child,
      "can-edit": _vm.canEdit
    }
  }) : _vm._e()], 1)
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column text-center"
  }, [_c('h1', {
    staticClass: "image-title image-title--childs-details"
  }, [_c('span', {
    staticClass: "image-title__image--childs-details"
  }, [_vm._v("\n                    Childs Details\n                ")])])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column text-center"
  }, [_c('p', {
    staticClass: "paragraph-sans"
  }, [_vm._v("\n            Please help Father Christmas deliver a personalised meeting by providing the details below.\n        ")])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-0a749d84", module.exports)
  }
}

/***/ }),
/* 644 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row"
  }, [_vm._m(0), _vm._v(" "), _c('div', {
    staticClass: "small-12 column child-form__form-wrapper"
  }, [_c('div', {
    staticClass: "input-container margin-bottom-small"
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "currentPassword"
    }
  }, [_vm._v("Current password")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.currentPassword),
      expression: "currentPassword"
    }],
    staticClass: "form-control",
    attrs: {
      "type": "password",
      "id": "currentPassword"
    },
    domProps: {
      "value": (_vm.currentPassword)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.currentPassword = $event.target.value
      }
    }
  })]), _vm._v(" "), _c('div', {
    class: ['input-container margin-bottom-small', {
      'input-container--danger': !_vm.hasValidPassword
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "newPassword"
    }
  }, [_vm._v("New password")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.newPassword),
      expression: "newPassword"
    }],
    staticClass: "form-control",
    attrs: {
      "type": "password",
      "id": "newPassword"
    },
    domProps: {
      "value": (_vm.newPassword)
    },
    on: {
      "change": _vm.validatePassword,
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.newPassword = $event.target.value
      }
    }
  }), _vm._v(" "), (!_vm.hasValidPassword) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v("Minimum 6 characters")]) : _vm._e()]), _vm._v(" "), _c('div', {
    class: ['input-container margin-bottom-small', {
      'input-container--danger': !_vm.hasValidConfirmedPassword
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "confirmPassword"
    }
  }, [_vm._v("Confirm new password")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.confirmPassword),
      expression: "confirmPassword"
    }],
    staticClass: "form-control",
    attrs: {
      "type": "password",
      "id": "confirmPassword"
    },
    domProps: {
      "value": (_vm.confirmPassword)
    },
    on: {
      "change": _vm.validateConfirmedPassword,
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.confirmPassword = $event.target.value
      }
    }
  }), _vm._v(" "), (!_vm.hasValidConfirmedPassword) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v("The confirmation password doesn't match")]) : _vm._e()]), _vm._v(" "), _c('div', {
    staticClass: "input-container"
  }, [_c('label', [_vm._v(" ")]), _vm._v(" "), _c('span', {
    staticClass: "input-container__help-text -no-italic"
  }, [_c('a', {
    class: ['button margin-bottom-medium rotate-ccw-small', {
      'booking-summary__continue--disabled': !_vm.canChangePassword
    }],
    staticStyle: {
      "width": "100%"
    },
    on: {
      "click": _vm.change
    }
  }, [_c('span', {
    staticClass: "button__inner"
  }, [_c('span', {
    staticClass: "button__text"
  }, [_vm._v("Change password")]), _vm._v(" "), _c('svg', {
    staticClass: "button__arrow"
  }, [_c('use', {
    attrs: {
      "xlink:href": "/images/svg/sprite.svg#button-arrow",
      "xmlns:xlink": "http://www.w3.org/1999/xlink"
    }
  })])])])])])])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column text-center"
  }, [_c('h2', {
    staticClass: "heading-2--small-doves"
  }, [_vm._v("Change Password")])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-0c8dc126", module.exports)
  }
}

/***/ }),
/* 645 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row"
  }, [_vm._m(0), _vm._v(" "), _vm._m(1), _vm._v(" "), (_vm.child) ? _c('child-form', {
    attrs: {
      "child": _vm.child,
      "can-edit": _vm.canEdit
    }
  }) : _vm._e()], 1)
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column text-center"
  }, [_c('h1', {
    staticClass: "image-title image-title--childs-details"
  }, [_c('span', {
    staticClass: "image-title__image--childs-details"
  }, [_vm._v("\n                    Childs Details\n                ")])])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column text-center"
  }, [_c('p', {
    staticClass: "paragraph-sans"
  }, [_vm._v("\n            Please help Father Christmas deliver a personalised meeting by providing the details below.\n        ")])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-167d8284", module.exports)
  }
}

/***/ }),
/* 646 */,
/* 647 */,
/* 648 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "column"
  }, [_c('div', {
    staticClass: "row"
  }, [_vm._m(0), _vm._v(" "), _c('div', {
    staticClass: "small-12 medium-12 large-9 column nopaddingleft"
  }, [_c('div', {
    staticClass: "slot-selector__nav-wrapper"
  }, [_c('nav', [_c('ul', {
    staticClass: "pager slot-selector__nav"
  }, [_c('li', {
    class: ['previous', {
      disabled: !_vm.hasPrevDay
    }]
  }, [_c('a', {
    attrs: {
      "href": "#"
    },
    on: {
      "click": function($event) {
        $event.preventDefault();
        _vm.prevDay($event)
      }
    }
  }, [_c('div', {
    staticClass: "image-misc__image--backarrow -previous"
  }), _vm._v(" Previous day\n                                ")])]), _vm._v(" "), _c('li', {
    class: ['next text-right', {
      disabled: !_vm.hasNextDay
    }]
  }, [_c('a', {
    attrs: {
      "href": "#"
    },
    on: {
      "click": function($event) {
        $event.preventDefault();
        _vm.nextDay($event)
      }
    }
  }, [_vm._v("\n                                    Next day "), _c('div', {
    staticClass: "image-misc__image--backarrow -next"
  })])])])])]), _vm._v(" "), _c('slot-selector', {
    attrs: {
      "booking": _vm.party,
      "options": _vm.availableSlots,
      "selectedDay": _vm.selectedDay,
      "is-premium-search": this.booking.premiumSlot ? this.booking.premiumSlot : false,
      "slots": _vm.slots,
      "party": _vm.party,
      "value": _vm.selectedSlot
    },
    on: {
      "continueBooking": _vm.continueBooking,
      "change": _vm.updateSlot
    }
  })], 1), _vm._v(" "), _c('div', {
    staticClass: "small-12 medium-12 large-3 column nopaddingright show-for-large"
  }, [_c('booking-summary', {
    attrs: {
      "booking": _vm.party,
      "prices": _vm.selectedSlot,
      "show-info-box": true,
      "is-premium-booking": this.booking.premiumSlot ? this.booking.premiumSlot : false,
      "transfer": true
    },
    on: {
      "removeExtra": _vm.removeExtra
    }
  }, [_c('div', {
    on: {
      "click": function($event) {
        _vm.canContinueBooking ? _vm.continueBooking() : null
      }
    }
  }, [_c('a', {
    class: ['button margin-bottom-medium rotate-ccw-small', {
      'booking-summary__continue--disabled': !_vm.canContinueBooking
    }]
  }, [_c('span', {
    staticClass: "button__inner"
  }, [_c('span', {
    staticClass: "button__text"
  }, [_vm._v("Continue Booking")]), _vm._v(" "), _c('svg', {
    staticClass: "button__arrow"
  }, [_c('use', {
    attrs: {
      "xlink:href": "/images/svg/sprite.svg#button-arrow",
      "xmlns:xlink": "http://www.w3.org/1999/xlink"
    }
  })])])])])])], 1)])])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column availability-search-day__title"
  }, [_c('h1', {
    staticClass: "image-title image-title--party-selector"
  }, [_c('span', {
    staticClass: "image-title__image--change-your-date"
  }, [_vm._v("\n                       Change Your Date\n                    ")])])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-229fcbb9", module.exports)
  }
}

/***/ }),
/* 649 */,
/* 650 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "small-12 column"
  }, [_c('stop-selling-warning', {
    staticClass: "margin-top-medium margin-bottom-none"
  })], 1), _vm._v(" "), _vm._m(0), _vm._v(" "), _c('div', {
    staticClass: "small-12 column"
  }, [_c('h2', {
    staticClass: "heading-2--my-experience-booked-time text-center"
  }, [_vm._v("\n            " + _vm._s(_vm.booking.bookedTime) + " on " + _vm._s(_vm.bookedDay) + "\n        ")]), _vm._v(" "), _c('h2', {
    staticClass: "heading-2--my-experience-booked-time text-center"
  }, [_vm._v("\n            " + _vm._s(_vm.bookedDate) + "\n        ")])]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column margin-bottom-small"
  }, [_c('p', {
    staticClass: "text-center"
  }, [_c('span', {
    staticClass: "my-experience__subtitle--booking-reference"
  }, [_vm._v("\n                Booking Reference:\n            ")]), _vm._v(" "), _c('span', {
    staticClass: "my-experience__subtitle--actual-booking-reference"
  }, [_vm._v("\n                " + _vm._s(_vm.booking.bookingReference) + "\n            ")])])]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column"
  }, [_c('div', {
    staticClass: "alert alert-info"
  }, [_vm._v("\n            Please note that the maximum family group size for this tour is 8, you will be able to add a maximum of " + _vm._s(_vm.maxAvailableTickets) + " ADDITIONAL TICKETS to your booking, subject to availability.\n        ")])]), _vm._v(" "), _c('div', {
    staticClass: "medium-1 column"
  }), _vm._v(" "), _c('div', {
    staticClass: "small-12 column"
  }, [_c('a', {
    class: ['button margin-bottom-medium rotate-ccw-small my-experience__change-your-date', {
      'button--disabled': _vm.mustStopSelling
    }],
    on: {
      "click": _vm.changeDate
    }
  }, [_c('span', {
    staticClass: "button__inner"
  }, [_c('span', {
    staticClass: "button__text"
  }, [_vm._v("Change your date ")]), _vm._v(" "), _c('svg', {
    staticClass: "button__arrow"
  }, [_c('use', {
    attrs: {
      "xlink:href": "/images/svg/sprite.svg#button-arrow",
      "xmlns:xlink": "http://www.w3.org/1999/xlink"
    }
  })])])])]), _vm._v(" "), _vm._m(1), _vm._v(" "), _c('div', {
    staticClass: "small-12 column my-experience__group-comp"
  }, [_c('div', [_c('div', {
    staticClass: "my-experience__group-number text-center"
  }, [_vm._v("\n                " + _vm._s(_vm.booking.adultsTickets) + "\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "my-experience__group-number-label text-center"
  }, [_vm._v("\n\n                Adults\n\n            ")])]), _vm._v(" "), _c('div', [_c('div', {
    staticClass: "my-experience__group-number text-center"
  }, [_vm._v("\n                " + _vm._s(_vm.booking.seniorsTickets) + "\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "my-experience__group-number-label text-center"
  }, [_vm._v("\n                Seniors\n\n            ")])]), _vm._v(" "), _c('div', [_c('div', {
    staticClass: "my-experience__group-number text-center"
  }, [_vm._v("\n                " + _vm._s(_vm.booking.childrenTickets) + "\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "my-experience__group-number-label text-center"
  }, [_vm._v("\n\n                Children\n\n\n            ")])]), _vm._v(" "), _c('div', [_c('div', {
    staticClass: "my-experience__group-number text-center"
  }, [_vm._v("\n                " + _vm._s(_vm.booking.infantsTickets) + "\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "my-experience__group-number-label text-center"
  }, [_vm._v("\n\n                Infants\n\n\n            ")])]), _vm._v(" "), _c('div', [_c('div', {
    staticClass: "my-experience__group-number text-center"
  }, [_vm._v("\n                " + _vm._s(_vm.booking.carersTickets) + "\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "my-experience__group-number-label text-center"
  }, [_vm._v("\n\n                Carers\n\n\n            ")])]), _vm._v(" "), _c('div', [_c('div', {
    staticClass: "my-experience__group-number text-center"
  }, [_vm._v("\n                " + _vm._s(_vm.booking.wheelchairsTickets) + "\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "my-experience__group-number-label text-center"
  }, [_vm._v("\n\n                Wheelchair\n\n            ")])])]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column text-center my-experience__total-price"
  }, [_c('span', [_vm._v("\n            TOTAL:\n        ")]), _vm._v(" "), _c('span', {
    staticClass: "my-experience__group-number"
  }, [_vm._v("\n            £ " + _vm._s(_vm.booking.paidAmount) + "\n        ")])]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column"
  }, [_c('a', {
    class: ['button margin-bottom-medium rotate-ccw-small my-experience__change-your-date', {
      'button--disabled': _vm.mustStopSelling
    }],
    on: {
      "click": _vm.addPeople
    }
  }, [_c('span', {
    staticClass: "button__inner"
  }, [_c('span', {
    staticClass: "button__text"
  }, [_vm._v("Add people ")]), _vm._v(" "), _c('svg', {
    staticClass: "button__arrow"
  }, [_c('use', {
    attrs: {
      "xlink:href": "/images/svg/sprite.svg#button-arrow",
      "xmlns:xlink": "http://www.w3.org/1999/xlink"
    }
  })])])])])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column"
  }, [_c('h1', {
    staticClass: "image-title small-bottom-margin"
  }, [_c('span', {
    staticClass: "image-title__image--your-time inline-block text-center"
  }, [_vm._v("\n            Your Time\n        ")])])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column"
  }, [_c('h1', {
    staticClass: "image-title small-bottom-margin"
  }, [_c('span', {
    staticClass: "image-title__image--your-party inline-block text-center"
  }, [_vm._v("\n            Your Time\n        ")])])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-25787c24", module.exports)
  }
}

/***/ }),
/* 651 */,
/* 652 */,
/* 653 */,
/* 654 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row nopadding"
  }, [_vm._m(0), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding adults__boxes-wrapper"
  }, [_c('div', {
    staticClass: "row nopadding"
  }, [_vm._l((_vm.adults), function(adult, index) {
    return _c('div', {
      staticClass: "small-6 column image-misc__image--child-details-box"
    }, [_c('form', {
      staticClass: "row nopadding",
      attrs: {
        "novalidate": ""
      },
      on: {
        "submit": function($event) {
          $event.preventDefault();
          _vm.update($event)
        }
      }
    }, [_c('div', {
      staticClass: "small-12 medium-6 column"
    }, [_vm._m(1, true), _vm._v(" "), _c('div', [_c('input', {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: (adult.firstName),
        expression: "adult.firstName"
      }],
      staticClass: "form-control",
      attrs: {
        "type": "text",
        "id": "adultFirstName",
        "name": "adultFirstName",
        "placeholder": "First Name"
      },
      domProps: {
        "value": (adult.firstName)
      },
      on: {
        "change": function($event) {
          _vm.markAdultAsChanged(adult.ticketId)
        },
        "input": function($event) {
          if ($event.target.composing) { return; }
          adult.firstName = $event.target.value
        }
      }
    })])]), _vm._v(" "), _c('div', {
      staticClass: "small-12 medium-6 column"
    }, [_vm._m(2, true), _vm._v(" "), _c('div', [_c('input', {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: (adult.lastName),
        expression: "adult.lastName"
      }],
      staticClass: "form-control",
      attrs: {
        "type": "text",
        "id": "adultLastName",
        "name": "adultLastName",
        "placeholder": "Last name"
      },
      domProps: {
        "value": (adult.lastName)
      },
      on: {
        "change": function($event) {
          _vm.markAdultAsChanged(adult.ticketId)
        },
        "input": function($event) {
          if ($event.target.composing) { return; }
          adult.lastName = $event.target.value
        }
      }
    })])]), _vm._v(" "), _c('div', {
      staticClass: "small-12 medium-6 column"
    }, [_vm._m(3, true), _vm._v(" "), _c('div', [_c('input', {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: (adult.emailAddress),
        expression: "adult.emailAddress"
      }],
      staticClass: "form-control",
      attrs: {
        "type": "email",
        "id": "adultEmailAddress"
      },
      domProps: {
        "value": (adult.emailAddress)
      },
      on: {
        "input": function($event) {
          if ($event.target.composing) { return; }
          adult.emailAddress = $event.target.value
        }
      }
    })])]), _vm._v(" "), _c('div', {
      staticClass: "small-12 medium-6 column"
    }, [_c('div', [_c('label', {
      staticClass: "control-label",
      attrs: {
        "for": 'adult-relationship-' + index
      }
    }, [_vm._v("Relationship")])]), _vm._v(" "), _c('div', [_c('multiselect', {
      attrs: {
        "options": _vm.relationsshipsOptions,
        "id": 'adult-relationship-' + index,
        "searchable": false,
        "custom-label": _vm.formatSelect,
        "allow-empty": true,
        "show-labels": false
      },
      model: {
        value: (adult.relationship),
        callback: function($$v) {
          adult.relationship = $$v
        },
        expression: "adult.relationship"
      }
    })], 1)]), _vm._v(" "), _c('div', {
      class: ['small-12 medium-12 column']
    }, [
      [_c('label', [_c('input', {
        attrs: {
          "type": "checkbox",
          "id": 'adult-use-details' + index
        },
        domProps: {
          "value": true,
          "checked": adult.useBookerDetail
        },
        on: {
          "change": function($event) {
            _vm.linkUnlinkPerson(adult)
          }
        }
      })]), _vm._v(" "), _c('label', {
        staticClass: "adults__use-my-details-label",
        attrs: {
          "for": 'adult-use-details' + index
        }
      }, [_vm._v("\n                                Use my details (Booker Details)\n                            ")])]
    ], 2)])])
  }), _vm._v(" "), _vm._l((_vm.seniors), function(senior, index) {
    return _c('div', {
      staticClass: "small-6 column image-misc__image--child-details-box"
    }, [_c('form', {
      staticClass: "row nopadding",
      attrs: {
        "novalidate": ""
      },
      on: {
        "submit": function($event) {
          $event.preventDefault();
          _vm.update($event)
        }
      }
    }, [_c('div', {
      staticClass: "small-12 medium-6 column"
    }, [_vm._m(4, true), _vm._v(" "), _c('div', [_c('input', {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: (senior.firstName),
        expression: "senior.firstName"
      }],
      staticClass: "form-control",
      attrs: {
        "type": "text",
        "id": "seniorFirstName",
        "name": "seniorFirstName",
        "placeholder": "First name"
      },
      domProps: {
        "value": (senior.firstName)
      },
      on: {
        "change": function($event) {
          _vm.markAdultAsChanged(senior.ticketId)
        },
        "input": function($event) {
          if ($event.target.composing) { return; }
          senior.firstName = $event.target.value
        }
      }
    })])]), _vm._v(" "), _c('div', {
      staticClass: "small-12 medium-6 column"
    }, [_vm._m(5, true), _vm._v(" "), _c('div', [_c('input', {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: (senior.lastName),
        expression: "senior.lastName"
      }],
      staticClass: "form-control",
      attrs: {
        "type": "text",
        "id": "seniorLastName",
        "name": "seniorLastName",
        "placeholder": "Last name"
      },
      domProps: {
        "value": (senior.lastName)
      },
      on: {
        "change": function($event) {
          _vm.markAdultAsChanged(senior.ticketId)
        },
        "input": function($event) {
          if ($event.target.composing) { return; }
          senior.lastName = $event.target.value
        }
      }
    })])]), _vm._v(" "), _c('div', {
      staticClass: "small-12 medium-6 column"
    }, [_vm._m(6, true), _vm._v(" "), _c('div', [_c('input', {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: (senior.emailAddress),
        expression: "senior.emailAddress"
      }],
      staticClass: "form-control",
      attrs: {
        "type": "email",
        "id": "seniorEmailAddress"
      },
      domProps: {
        "value": (senior.emailAddress)
      },
      on: {
        "input": function($event) {
          if ($event.target.composing) { return; }
          senior.emailAddress = $event.target.value
        }
      }
    })])]), _vm._v(" "), _c('div', {
      staticClass: "small-12 medium-6 column"
    }, [_c('div', [_c('label', {
      staticClass: "control-label",
      attrs: {
        "for": 'senior-relationship-' + index
      }
    }, [_vm._v("Relationship")])]), _vm._v(" "), _c('div', [_c('multiselect', {
      attrs: {
        "options": _vm.relationsshipsOptions,
        "id": 'senior-relationship-' + index,
        "searchable": false,
        "custom-label": _vm.formatSelect,
        "allow-empty": true,
        "show-labels": false
      },
      model: {
        value: (senior.relationship),
        callback: function($$v) {
          senior.relationship = $$v
        },
        expression: "senior.relationship"
      }
    })], 1)]), _vm._v(" "), _c('div', {
      class: ['small-12 medium-12 column']
    }, [
      [_c('label', [_c('input', {
        attrs: {
          "type": "checkbox",
          "id": 'senior-use-details' + index
        },
        domProps: {
          "value": true,
          "checked": senior.useBookerDetail
        },
        on: {
          "change": function($event) {
            _vm.linkUnlinkPerson(senior)
          }
        }
      })]), _vm._v(" "), _c('label', {
        staticClass: "adults__use-my-details-label"
      }, [_vm._v("\n                                Use my details (Booker Details)\n                            ")])]
    ], 2)])])
  }), _vm._v(" "), _vm._l((_vm.carers), function(carer, index) {
    return _c('div', {
      staticClass: "small-6 column image-misc__image--child-details-box"
    }, [_c('form', {
      staticClass: "row nopadding",
      attrs: {
        "novalidate": ""
      },
      on: {
        "submit": function($event) {
          $event.preventDefault();
          _vm.update($event)
        }
      }
    }, [_c('div', {
      staticClass: "small-12 medium-6 column"
    }, [_vm._m(7, true), _vm._v(" "), _c('div', [_c('input', {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: (carer.firstName),
        expression: "carer.firstName"
      }],
      staticClass: "form-control",
      attrs: {
        "type": "text",
        "id": "carerFirstname",
        "name": "carerFirstname",
        "placeholder": "First name"
      },
      domProps: {
        "value": (carer.firstName)
      },
      on: {
        "change": function($event) {
          _vm.markAdultAsChanged(carer.ticketId)
        },
        "input": function($event) {
          if ($event.target.composing) { return; }
          carer.firstName = $event.target.value
        }
      }
    })])]), _vm._v(" "), _c('div', {
      staticClass: "small-12 medium-6 column"
    }, [_vm._m(8, true), _vm._v(" "), _c('div', [_c('input', {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: (carer.lastName),
        expression: "carer.lastName"
      }],
      staticClass: "form-control",
      attrs: {
        "type": "text",
        "id": "carerLastName",
        "name": "carerLastName",
        "placeholder": "Last name"
      },
      domProps: {
        "value": (carer.lastName)
      },
      on: {
        "change": function($event) {
          _vm.markAdultAsChanged(carer.ticketId)
        },
        "input": function($event) {
          if ($event.target.composing) { return; }
          carer.lastName = $event.target.value
        }
      }
    })])]), _vm._v(" "), _c('div', {
      staticClass: "small-12 medium-6 column"
    }, [_vm._m(9, true), _vm._v(" "), _c('div', [_c('input', {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: (carer.emailAddress),
        expression: "carer.emailAddress"
      }],
      staticClass: "form-control",
      attrs: {
        "type": "email",
        "id": "carerEmailAddress"
      },
      domProps: {
        "value": (carer.emailAddress)
      },
      on: {
        "input": function($event) {
          if ($event.target.composing) { return; }
          carer.emailAddress = $event.target.value
        }
      }
    })])]), _vm._v(" "), _c('div', {
      staticClass: "small-12 medium-6 column"
    }, [_c('div', [_c('label', {
      staticClass: "control-label",
      attrs: {
        "for": 'carer-relationship-' + index
      }
    }, [_vm._v("Relationship")])]), _vm._v(" "), _c('div', [_c('multiselect', {
      attrs: {
        "options": _vm.relationsshipsOptions,
        "id": 'carer-relationship-' + index,
        "searchable": false,
        "custom-label": _vm.formatSelect,
        "allow-empty": true,
        "show-labels": false
      },
      model: {
        value: (carer.relationship),
        callback: function($$v) {
          carer.relationship = $$v
        },
        expression: "carer.relationship"
      }
    })], 1)]), _vm._v(" "), _c('div', {
      class: ['small-12 medium-12 column']
    }, [
      [_c('label', [_c('input', {
        attrs: {
          "type": "checkbox",
          "id": 'carer-use-details' + index
        },
        domProps: {
          "value": true,
          "checked": carer.useBookerDetail
        },
        on: {
          "change": function($event) {
            _vm.linkUnlinkPerson(carer)
          }
        }
      })]), _vm._v(" "), _c('label', {
        staticClass: "adults__use-my-details-label",
        attrs: {
          "for": 'carer-use-details' + index
        }
      }, [_vm._v("\n                                Use my details (Booker Details)\n                            ")])]
    ], 2)])])
  })], 2)]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column text-center adults__update-details-wrapper"
  }, [_c('a', {
    class: ['button margin-bottom-medium rotate-ccw-small'],
    on: {
      "click": _vm.update
    }
  }, [_c('span', {
    staticClass: "button__inner"
  }, [_c('span', {
    staticClass: "button__text"
  }, [_vm._v("Update details")]), _vm._v(" "), _c('svg', {
    staticClass: "button__arrow"
  }, [_c('use', {
    attrs: {
      "xlink:href": "/images/svg/sprite.svg#button-arrow",
      "xmlns:xlink": "http://www.w3.org/1999/xlink"
    }
  })])])])])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column text-center"
  }, [_c('h3', [_vm._v("\n            To enhance the children's enjoyment of the day, all adult members of your party are optionally invited\n            to submit their contact details to receive information on the Lapland"), _c('sup', [_vm._v("UK")]), _vm._v(" story.\n        ")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('label', {
    staticClass: "sr-only",
    attrs: {
      "for": "adultFirstName"
    }
  }, [_vm._v("Adult First name")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('label', {
    staticClass: "sr-only",
    attrs: {
      "for": "adultLastName"
    }
  }, [_vm._v("Adult Last name")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('label', {
    staticClass: "control-label",
    attrs: {
      "for": "adultEmailAddress"
    }
  }, [_vm._v("Email address")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('label', {
    staticClass: "sr-only",
    attrs: {
      "for": "seniorFirstName"
    }
  }, [_vm._v("Senior First name")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('label', {
    staticClass: "sr-only",
    attrs: {
      "for": "seniorLastName"
    }
  }, [_vm._v("Senior Last name")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('label', {
    staticClass: "control-label",
    attrs: {
      "for": "seniorEmailAddress"
    }
  }, [_vm._v("Email address")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('label', {
    staticClass: "sr-only",
    attrs: {
      "for": "carerFirstname"
    }
  }, [_vm._v("Carer First name")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('label', {
    staticClass: "sr-only",
    attrs: {
      "for": "carerLastName"
    }
  }, [_vm._v("Carer Last name")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('label', {
    staticClass: "control-label",
    attrs: {
      "for": "carerEmailAddress"
    }
  }, [_vm._v("Email address")])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-32281ec6", module.exports)
  }
}

/***/ }),
/* 655 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row mmb-my-party-add"
  }, [_vm._m(0), _vm._v(" "), _c('div', {
    staticClass: "small-12 column"
  }, [_c('h2', {
    staticClass: "heading-2--my-experience-booked-time text-center"
  }, [_vm._v("\n            " + _vm._s(_vm.booking.bookedTime) + " on " + _vm._s(_vm.bookedDay) + "\n        ")]), _vm._v(" "), _c('h2', {
    staticClass: "heading-2--my-experience-booked-time text-center"
  }, [_vm._v("\n            " + _vm._s(_vm.bookedDate) + "\n        ")])]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column"
  }, [_c('div', {
    staticClass: "text-center"
  }, [_c('span', {
    staticClass: "my-experience__subtitle--booking-reference"
  }, [_vm._v("\n                Booking Reference:\n            ")]), _vm._v(" "), _c('span', {
    staticClass: "my-experience__subtitle--actual-booking-reference"
  }, [_vm._v("\n                " + _vm._s(_vm.booking.bookingReference) + "\n            ")])])]), _vm._v(" "), _vm._m(1), _vm._v(" "), _c('div', {
    staticClass: "small-12 column"
  }, [_c('div', {
    staticClass: "image-misc__image--additional-tickets-box text-center show-for-large"
  }, [_c('div', [_vm._v("\n                Please note that the maximum family group size for this tour is 8, you will be able to add a maximum of " + _vm._s(_vm.maxAvailableTickets) + " ADDITIONAL TICKETS to your booking, subject to availability.\n            ")])]), _vm._v(" "), _c('div', {
    staticClass: "image-misc__image--mobile-additional-tickets-box text-center hide-for-large"
  }, [_c('div', [_vm._v("\n                Please note that the maximum family group size for this tour is 8, you will be able to add a maximum of " + _vm._s(_vm.maxAvailableTickets) + " ADDITIONAL TICKETS to your booking, subject to availability.\n            ")])])]), _vm._v(" "), _c('gateway-error'), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('party-additions', {
    attrs: {
      "booking": _vm.booking,
      "prices": {
        adult: _vm.adultPrice,
        senior: _vm.seniorPrice,
        child: _vm.childPrice
      },
      "available-cancellation-policies": _vm.availableInsurance
    }
  })], 1)], 1)
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column"
  }, [_c('h1', {
    staticClass: "image-title small-bottom-margin"
  }, [_c('span', {
    staticClass: "image-title__image--add-people inline-block text-center"
  }, [_vm._v("\n                Add People\n            ")])])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column text-center"
  }, [_c('span', {
    staticClass: "image-misc__image--underline"
  }, [_vm._v("\n                 \n        ")])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-37947242", module.exports)
  }
}

/***/ }),
/* 656 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _vm._m(0)
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('div', {
    staticClass: "image-misc__image--left-horse hide-for-small-only hide-for-medium-only"
  }, [_vm._v("\n         \n    ")]), _vm._v(" "), _c('div', {
    staticClass: "image-misc__image--right-horse hide-for-small-only hide-for-medium-only"
  }, [_vm._v("\n         \n    ")])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-3aaa22ea", module.exports)
  }
}

/***/ }),
/* 657 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row nopadding"
  }, [_c('div', {
    staticClass: "small-12 children__boxes-wrapper"
  }, _vm._l((_vm.children), function(child) {
    return _c('div', {
      staticClass: "children__box"
    }, [_c('div', {
      staticClass: "image-misc__image--child-details-box text-left"
    }, [_c('child-summary', {
      attrs: {
        "src": child
      },
      on: {
        "edit": function($event) {
          _vm.edit(child)
        }
      }
    })], 1)])
  }))])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-3b1dcae8", module.exports)
  }
}

/***/ }),
/* 658 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "column"
  }, [_c('div', {
    staticClass: "row extra-selector__content"
  }, [_vm._m(0), _vm._v(" "), _c('div', {
    staticClass: "small-12 large-9 column nopaddingleft"
  }, [(this.paymentErrors) ? [_c('payment-errors')] : _vm._e(), _vm._v(" "), (_vm.myDetails.exists()) ? _c('booking-details', {
    attrs: {
      "existing-customer-details": _vm.myDetails,
      "number-of-children": _vm.additionalTickets.children,
      "successUrl": _vm.successUrl,
      "failureUrl": _vm.failureUrl,
      "show-children": false
    },
    on: {
      "pay": _vm.makePayment
    }
  }) : _vm._e()], 2), _vm._v(" "), _c('div', {
    staticClass: "small-12 large-3 column nopaddingright extra-selector__booking-summary"
  }, [_c('booking-summary', {
    attrs: {
      "booking": _vm.party,
      "extras": _vm.additionalExtras,
      "prices": _vm.prices,
      "can-remove-extras": false
    }
  })], 1)])])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column"
  }, [_c('h1', {
    staticClass: "image-title image-title--party-selector"
  }, [_c('span', {
    staticClass: "image-title__image--magical-extras"
  }, [_vm._v("\n                   Magical Extras\n            ")])])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-3c21251b", module.exports)
  }
}

/***/ }),
/* 659 */,
/* 660 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row"
  }, [_vm._m(0), _vm._v(" "), _c('manage-details', {
    attrs: {
      "my-details": _vm.myDetails
    }
  }), _vm._v(" "), _c('manage-password')], 1)
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column"
  }, [_c('h1', {
    staticClass: "image-title small-bottom-margin"
  }, [_c('span', {
    staticClass: "image-title__image--my-account inline-block text-center"
  }, [_vm._v("\n            My Account\n        ")])])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-4413006e", module.exports)
  }
}

/***/ }),
/* 661 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c("div")
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-45a5bc79", module.exports)
  }
}

/***/ }),
/* 662 */,
/* 663 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _vm._m(0)
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('h2', [_vm._v("Congratulations!")]), _vm._v(" "), _c('p', [_vm._v("You have successfully added to your Visit.")]), _vm._v(" "), _c('p', [_vm._v("You will receive an email with your updated booking confirmation and top tips on how to have the most magical day at Lapland"), _c('sup', [_vm._v("UK")]), _vm._v(".")])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-555110fc", module.exports)
  }
}

/***/ }),
/* 664 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "column"
  }, [_c('div', {
    class: ['image-misc__image--mobile-mmb-banner mmb-nav__mobile-menu hide-for-large', {
      '-mobile-menu': _vm.showMobileMenu
    }],
    on: {
      "click": _vm.toggleMobileMenu
    }
  }, [_c('div', [_vm._v("\n            " + _vm._s(_vm.getRouteName(_vm.$route.name)) + "\n        ")]), _vm._v(" "), _c('span', {
    staticClass: "image-misc__image--arrowdown"
  })]), _vm._v(" "), (_vm.showMobileMenu) ? _c('ul', {
    class: ['mobile-mmb-nav__container hide-for-large mmb-nav__mobile-menu text-center', {
      '-mobile-menu': _vm.showMobileMenu
    }]
  }, [_c('li', {
    on: {
      "click": _vm.toggleMobileMenu
    }
  }, [_c('router-link', {
    attrs: {
      "to": {
        name: 'my-experience'
      }
    }
  }, [_vm._v("My Visit")])], 1), _vm._v(" "), _c('li', {
    on: {
      "click": _vm.toggleMobileMenu
    }
  }, [_c('router-link', {
    attrs: {
      "to": {
        name: 'my-party'
      }
    }
  }, [_vm._v("Personalise")])], 1), _vm._v(" "), _c('li', {
    on: {
      "click": _vm.toggleMobileMenu
    }
  }, [_c('router-link', {
    attrs: {
      "to": {
        name: 'magical-extras'
      }
    }
  }, [_vm._v("Magical Extras")])], 1), _vm._v(" "), _c('li', [_c('label', {
    on: {
      "click": _vm.showBookingsDropDown
    }
  }, [_c('a', [_vm._v("\n                    Booking: " + _vm._s(_vm.bookedDate) + "\n                ")])])]), _vm._v(" "), _vm._l((_vm.bookings), function(booking) {
    return (_vm.hasBookings && _vm.bookingsDropdown) ? _c('li', {
      staticClass: "mmb-nav__change-booking"
    }, [_c('div', {
      staticClass: "my-experience__booking-dropdown--booking text-center",
      on: {
        "click": function($event) {
          _vm.selectBooking(booking, true)
        }
      }
    }, [_vm._v("\n                " + _vm._s(booking.bookingReference) + "\n            ")])]) : _vm._e()
  })], 2) : _vm._e(), _vm._v(" "), _c('div', {
    staticClass: "image-misc__image--mmb-banner show-for-large"
  }, [_c('ul', {
    staticClass: "mmb-nav__container"
  }, [_c('li', [_c('router-link', {
    attrs: {
      "to": {
        name: 'my-experience'
      }
    }
  }, [_vm._v("My Visit")])], 1), _vm._v(" "), _c('li', [_c('router-link', {
    attrs: {
      "to": {
        name: 'my-party'
      }
    }
  }, [_vm._v("Personalise")])], 1), _vm._v(" "), _c('li', [_c('router-link', {
    attrs: {
      "to": {
        name: 'magical-extras'
      }
    }
  }, [_vm._v("Magical Extras")])], 1), _vm._v(" "), _c('li', [_c('label', {
    on: {
      "click": _vm.showBookingsDropDown
    }
  }, [_c('a', [_vm._v("\n                        Booking: " + _vm._s(_vm.bookedDate) + "\n                        "), _c('span', {
    staticClass: "image-misc__image--down-arrow"
  })])])])]), _vm._v(" "), (_vm.hasBookings && _vm.bookingsDropdown) ? _c('div', {
    staticClass: "my-experience__booking-dropdown"
  }, _vm._l((_vm.bookings), function(booking) {
    return _c('div', {
      staticClass: "my-experience__booking-dropdown--booking text-center",
      on: {
        "click": function($event) {
          _vm.selectBooking(booking)
        }
      }
    }, [_vm._v("\n                " + _vm._s(booking.bookingReference) + "\n            ")])
  })) : _vm._e()])])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-59e38064", module.exports)
  }
}

/***/ }),
/* 665 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (false),
      expression: "false"
    }]
  }, [_c('h2', [_vm._v("My Bookings")]), _vm._v(" "), _c('p', [_vm._v("Please click on the booking you wish to manage then click again on Manage Booking to proceed.")]), _vm._v(" "), _c('div', {
    staticClass: "panel panel-default"
  }, [_c('table', {
    staticClass: "table"
  }, [_vm._m(0), _vm._v(" "), _c('tbody', _vm._l((_vm.bookings), function(booking) {
    return _c('tr', {
      on: {
        "click": function($event) {
          _vm.selectBooking(booking)
        }
      }
    }, [_c('td', [_vm._v(_vm._s(booking.bookingReference))]), _vm._v(" "), _c('td', [_vm._v(_vm._s(booking.bookedDate))]), _vm._v(" "), _c('td', [_vm._v(_vm._s(booking.adultsTickets))]), _vm._v(" "), _c('td', [_vm._v(_vm._s(booking.seniorsTickets))]), _vm._v(" "), _c('td', [_vm._v(_vm._s(booking.childrenTickets))]), _vm._v(" "), _c('td', [_vm._v(_vm._s(booking.infantsTickets))]), _vm._v(" "), _c('td', [_vm._v(_vm._s(booking.carersTickets))]), _vm._v(" "), _c('td', [_vm._v(_vm._s(booking.wheelchairsTickets))])])
  }))])])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('thead', [_c('tr', [_c('th', [_vm._v("Booking reference")]), _vm._v(" "), _c('th', [_vm._v("Date of visit")]), _vm._v(" "), _c('th', [_vm._v("Adults")]), _vm._v(" "), _c('th', [_vm._v("Seniors")]), _vm._v(" "), _c('th', [_vm._v("Children")]), _vm._v(" "), _c('th', [_vm._v("Infants")]), _vm._v(" "), _c('th', [_vm._v("Carers")]), _vm._v(" "), _c('th', [_vm._v("Wheelchairs")])])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-5e13cebe", module.exports)
  }
}

/***/ }),
/* 666 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "error-page error-page--conker"
  }, [_vm._m(0), _vm._v(" "), _c('div', {
    staticClass: "error-page__summary"
  }, [_c('p', [_vm._v(_vm._s(_vm.errorMessage))])]), _vm._v(" "), _vm._m(1)])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('h1', {
    staticClass: "image-title image-title--oops"
  }, [_c('span', {
    staticClass: "image-title__image--oops"
  }, [_vm._v("Oops!")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "error-page__suggestion"
  }, [_c('p', [_vm._v("Please try again, if the problem persists contact "), _c('a', {
    attrs: {
      "href": "mailto:enquiries@laplanduk.co.uk"
    }
  }, [_vm._v("enquiries@laplanduk.co.uk")]), _vm._v(".")])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-6505a363", module.exports)
  }
}

/***/ }),
/* 667 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "column"
  }, [_c('div', {
    staticClass: "row extra-selector__content"
  }, [_vm._m(0), _vm._v(" "), _c('div', {
    staticClass: "small-12 medium-12 large-9 column nopaddingleft"
  }, [_c('reservation-alert', {
    attrs: {
      "duration": 300,
      "default-time-left": '30'
    },
    on: {
      "expired": _vm.restartAvailabilitySearch
    }
  }), _vm._v(" "), _c('booking-details', {
    attrs: {
      "existing-customer-details": _vm.myDetails,
      "number-of-children": _vm.$store.state.booking.children,
      "successUrl": _vm.successUrl,
      "failureUrl": _vm.failureUrl,
      "show-children": false
    },
    on: {
      "pay": _vm.makePayment,
      "applyPromoCode": _vm.applyPromoCode
    }
  })], 1), _vm._v(" "), _c('div', {
    staticClass: "small-12 medium-12 large-3 column nopaddingright extra-selector__booking-summary"
  }, [_c('booking-summary', {
    attrs: {
      "day": _vm.day,
      "time": _vm.time,
      "booking": _vm.party,
      "prices": _vm.selectedSlot,
      "transfer": true
    }
  })], 1)])])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column availability-search-day__title"
  }, [_c('h1', {
    staticClass: "image-title image-title--party-selector"
  }, [_c('span', {
    staticClass: "image-title__image--change-your-date"
  }, [_vm._v("\n                       Change Your Date\n                    ")])])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-6e9cc2da", module.exports)
  }
}

/***/ }),
/* 668 */,
/* 669 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_vm._m(0), _vm._v(" "), _c('div', {
    staticClass: "party-additions__wrapper -border -margin"
  }, [_vm._v("\n             \n        ")]), _vm._v(" "), _c('div', {
    staticClass: "party-additions__wrapper -margin"
  }, [_c('div', [_vm._v("\n                Adult\n            ")]), _vm._v(" "), _c('div', [_vm._v("\n                " + _vm._s(_vm.booking.adultsTickets) + "\n            ")]), _vm._v(" "), _c('div', [_vm._v("\n                £" + _vm._s(_vm.prices.adult) + "\n            ")]), _vm._v(" "), _c('div', [_c('multiselect', {
    attrs: {
      "placeholder": "0",
      "name": "Adult",
      "options": _vm.availableAdultTicketOptions,
      "searchable": false,
      "track-by": "value",
      "label": "label",
      "allow-empty": false,
      "show-labels": false
    },
    on: {
      "select": _vm.ticketSelected
    },
    model: {
      value: (_vm.adultAdditionalQuantity),
      callback: function($$v) {
        _vm.adultAdditionalQuantity = $$v
      },
      expression: "adultAdditionalQuantity"
    }
  })], 1), _vm._v(" "), _c('div', [_vm._v("\n                £" + _vm._s(_vm.adultAdditionalTotal) + "\n            ")])]), _vm._v(" "), _c('div', {
    staticClass: "party-additions__wrapper -margin"
  }, [_c('div', [_vm._v("\n                Senior\n            ")]), _vm._v(" "), _c('div', [_vm._v("\n                " + _vm._s(_vm.booking.seniorsTickets) + "\n            ")]), _vm._v(" "), _c('div', [_vm._v("\n                £" + _vm._s(_vm.prices.senior) + "\n            ")]), _vm._v(" "), _c('div', [_c('multiselect', {
    attrs: {
      "placeholder": "0",
      "name": "Senior",
      "options": _vm.availableSeniorTicketOptions,
      "searchable": false,
      "track-by": "value",
      "label": "label",
      "allow-empty": false,
      "show-labels": false
    },
    model: {
      value: (_vm.seniorAdditionalQuantity),
      callback: function($$v) {
        _vm.seniorAdditionalQuantity = $$v
      },
      expression: "seniorAdditionalQuantity"
    }
  })], 1), _vm._v(" "), _c('div', [_vm._v("\n                £" + _vm._s(_vm.seniorAdditionalTotal) + "\n            ")])]), _vm._v(" "), (!_vm.adultsOnly) ? [_c('div', {
    staticClass: "party-additions__wrapper -margin"
  }, [_c('div', [_vm._v("\n                Child\n            ")]), _vm._v(" "), _c('div', [_vm._v("\n                " + _vm._s(_vm.booking.childrenTickets) + "\n            ")]), _vm._v(" "), _c('div', [_vm._v("\n                £" + _vm._s(_vm.prices.child) + "\n            ")]), _vm._v(" "), _c('div', [_c('multiselect', {
    attrs: {
      "placeholder": "0",
      "name": "Child",
      "options": _vm.availableChildTicketOptions,
      "searchable": false,
      "track-by": "value",
      "label": "label",
      "allow-empty": false,
      "show-labels": false
    },
    model: {
      value: (_vm.childAdditionalQuantity),
      callback: function($$v) {
        _vm.childAdditionalQuantity = $$v
      },
      expression: "childAdditionalQuantity"
    }
  })], 1), _vm._v(" "), _c('div', [_vm._v("\n                £" + _vm._s(_vm.childAdditionalTotal) + "\n            ")])]), _vm._v(" "), _c('div', {
    staticClass: "party-additions__wrapper -margin"
  }, [_c('div', [_vm._v("\n                Infant\n            ")]), _vm._v(" "), _c('div', [_vm._v("\n                " + _vm._s(_vm.booking.infantsTickets) + "\n            ")]), _vm._v(" "), _c('div', [_vm._v("\n                £0.00\n            ")]), _vm._v(" "), _c('div', [_c('multiselect', {
    attrs: {
      "placeholder": "0",
      "name": "Infant",
      "options": _vm.availableInfantTicketOptions,
      "searchable": false,
      "track-by": "value",
      "label": "label",
      "allow-empty": false,
      "show-labels": false
    },
    model: {
      value: (_vm.infantAdditionalQuantity),
      callback: function($$v) {
        _vm.infantAdditionalQuantity = $$v
      },
      expression: "infantAdditionalQuantity"
    }
  })], 1), _vm._v(" "), _c('div', [_vm._v("\n                £0.00\n            ")])]), _vm._v(" "), _c('div', {
    staticClass: "party-additions__wrapper -margin"
  }, [_c('div', [_vm._v("\n                Carer\n            ")]), _vm._v(" "), _c('div', [_vm._v("\n                " + _vm._s(_vm.booking.carersTickets) + "\n            ")]), _vm._v(" "), _c('div', [_vm._v("\n                £0.00\n            ")]), _vm._v(" "), _c('div', [_c('multiselect', {
    attrs: {
      "placeholder": "0",
      "name": "Carer",
      "options": _vm.availableCarerTicketOptions,
      "searchable": false,
      "track-by": "value",
      "label": "label",
      "allow-empty": false,
      "show-labels": false
    },
    model: {
      value: (_vm.carerAdditionalQuantity),
      callback: function($$v) {
        _vm.carerAdditionalQuantity = $$v
      },
      expression: "carerAdditionalQuantity"
    }
  })], 1), _vm._v(" "), _c('div', [_vm._v("\n                £0.00\n            ")])])] : _vm._e(), _vm._v(" "), _c('div', {
    staticClass: "party-additions__wrapper"
  }, [_c('div', [_vm._v("\n                 \n            ")]), _vm._v(" "), _c('div', [_vm._v("\n                 \n            ")]), _vm._v(" "), _c('div', [_vm._v("\n                 \n            ")]), _vm._v(" "), _c('div', [_vm._v("\n                 \n            ")]), _vm._v(" "), _c('div', [_vm._v("\n               TOTAL: £" + _vm._s(_vm.additionalTicketsTotal) + "\n            ")])]), _vm._v(" "), _c('div', {
    staticClass: "row nopadding"
  }, [_vm._m(1), _vm._v(" "), _c('div', {
    staticClass: "small-12 medium-2 column"
  }, [_c('multiselect', {
    attrs: {
      "placeholder": "0",
      "name": "numberOfAdditionalWheelchairs",
      "options": _vm.numberOfAdditionalWheelchairOptions,
      "searchable": false,
      "allow-empty": true,
      "show-labels": false,
      "id": "additional-wheelchairs"
    },
    model: {
      value: (_vm.numberOfAdditionalWheelchairs),
      callback: function($$v) {
        _vm.numberOfAdditionalWheelchairs = $$v
      },
      expression: "numberOfAdditionalWheelchairs"
    }
  })], 1), _vm._v(" "), _vm._m(2), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_vm._v("\n                 \n            ")]), _vm._v(" "), (_vm.canAddCancellationProtection > 0) ? [_vm._l((_vm.availableCancellationPolicies), function(cancellationPolicy) {
    return _c('div', {
      staticClass: "small-12 column"
    }, [_c('h2', {
      staticClass: "heading-2--doves"
    }, [_vm._v("\n                        " + _vm._s(cancellationPolicy.name) + "\n                    ")])])
  }), _vm._v(" "), _vm._l((_vm.availableCancellationPolicies), function(cancellationPolicy) {
    return _c('div', {
      staticClass: "small-12 column sans-18-light"
    }, [_c('div', {
      staticClass: "cancel-protection__choice sans-18-light"
    }, [_c('label', {
      on: {
        "click": function($event) {
          _vm.addCancellationPolicy(cancellationPolicy)
        }
      }
    }, [_c('div', {
      staticClass: "cancel-protection__radio-outer"
    }, [(_vm.hasMadeProtectionChoice && _vm.cancellationPolicies.length > 0) ? _c('div', {
      staticClass: "cancel-protection__radio-inner"
    }) : _vm._e()]), _vm._v(" "), _c('input', {
      attrs: {
        "name": "insurance",
        "type": "radio",
        "data-type": "Cancellation Protection"
      }
    }), _vm._v("\n\n                            Yes, please protect my purchase (total additional cost "), _c('span', [_vm._v("£" + _vm._s(_vm.showCancellationPolicyPrice(cancellationPolicy.price)))]), _vm._v(")\n                            I confirm that I have read, understood and saved the\n                            "), _c('a', {
      staticClass: "cancel-protection__termsandconds",
      attrs: {
        "target": "_blank"
      }
    }, [_vm._v("terms and conditions")]), _vm._v("\n                            of the TicketPlan Cancellation Protection.\n\n                        ")])]), _vm._v(" "), _c('div', {
      staticClass: "cancel-protection__choice sans-18-light"
    }, [_c('label', {
      staticClass: "sans-18-light",
      on: {
        "click": function($event) {
          _vm.removeCancellationPolicy(cancellationPolicy)
        }
      }
    }, [_c('div', {
      staticClass: "cancel-protection__radio-outer"
    }, [(_vm.hasMadeProtectionChoice && _vm.cancellationPolicies.length === 0) ? _c('div', {
      staticClass: "cancel-protection__radio-inner"
    }) : _vm._e()]), _vm._v(" "), _c('input', {
      attrs: {
        "name": "insurance",
        "type": "radio",
        "data-type": "Cancellation Protection"
      }
    }), _vm._v("\n                            I do not wish to purchase cancellation protection and accept my tickets are non-refundable.\n                        ")])])])
  })] : _vm._e(), _vm._v(" "), _c('div', {
    staticClass: "small-12 column"
  }, [_c('a', {
    class: ['button margin-bottom-medium rotate-ccw-small party-additions__check-availability-button', {
      'booking-summary__continue--disabled': !_vm.canCheckAvailability
    }],
    on: {
      "click": function($event) {
        _vm.canCheckAvailability && _vm.checkAvailability()
      }
    }
  }, [_c('span', {
    staticClass: "button__inner"
  }, [_c('span', {
    staticClass: "button__text show-for-large"
  }, [_vm._v("Check availability and update")]), _vm._v(" "), _c('span', {
    staticClass: "button__text hide-for-large"
  }, [_vm._v("Check availability")]), _vm._v(" "), _c('svg', {
    staticClass: "button__arrow"
  }, [_c('use', {
    attrs: {
      "xlink:href": "/images/svg/sprite.svg#button-arrow",
      "xmlns:xlink": "http://www.w3.org/1999/xlink"
    }
  })])])])]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column sans-18-light"
  }, [_vm._v("\n                If you would like to cancel your booking, you will need to have bought Cancellation Protection, for more information, please click here.\n            ")])], 2)], 2)
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "party-additions__wrapper -caps"
  }, [_c('div', {
    staticClass: "hide-for-small-only"
  }, [_vm._v("\n                Ticket"), _c('br'), _vm._v("Type\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "hide-for-small-only"
  }, [_vm._v("\n                Current"), _c('br'), _vm._v("Quantity\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "hide-for-small-only"
  }, [_vm._v("\n                Additional"), _c('br'), _vm._v("Ticket\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "hide-for-small-only"
  }, [_vm._v("\n                Additional"), _c('br'), _vm._v("Quantity\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "hide-for-small-only"
  }, [_vm._v("\n                Additional"), _c('br'), _vm._v("Price\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "show-for-small-only"
  }, [_vm._v("\n                TKT\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "show-for-small-only"
  }, [_vm._v("\n                QTY\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "show-for-small-only"
  }, [_vm._v("\n                ADD.\n                "), _c('br'), _vm._v("\n                TKT\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "show-for-small-only"
  }, [_vm._v("\n                ADD.\n                "), _c('br'), _vm._v("\n                QTY\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "show-for-small-only"
  }, [_vm._v("\n                ADD.\n                "), _c('br'), _vm._v("\n                PRICE\n            ")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column"
  }, [_c('h2', {
    staticClass: "heading-2--doves"
  }, [_vm._v("\n                    Wheelchairs\n                ")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 medium-10 column sans-18-light"
  }, [_vm._v("\n                Do any of your party use a wheelchair? Please tell us about the number of wheelchairs that will be\n                attend the event. You have already booked 0 "), _c('strong', [_vm._v("wheelchairs")]), _vm._v(". You can still add 3 wheelchairs at the most.\n            ")])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-7dcef47e", module.exports)
  }
}

/***/ }),
/* 670 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row magical-extras__wrapper"
  }, [_vm._m(0), _vm._v(" "), _c('div', {
    staticClass: "small-12 medium-12 large-9 column nopaddingleft"
  }, [_c('extra-selector', {
    on: {
      "addExtra": _vm.addExtra
    }
  })], 1), _vm._v(" "), _c('div', {
    staticClass: "small-12 medium-12 large-3 column nopaddingright"
  }, [_c('booking-summary', {
    attrs: {
      "booking": _vm.party,
      "prices": _vm.selectedSlot,
      "extras": _vm.additionalExtras,
      "emit-to-remove": true
    },
    on: {
      "removeExtra": _vm.removeExtra
    }
  }, [_c('div', {
    on: {
      "click": function($event) {
        _vm.canContinueBooking ? _vm.continueBooking() : null
      }
    }
  }, [_c('a', {
    class: ['button margin-bottom-medium rotate-ccw-small', {
      'booking-summary__continue--disabled': !_vm.canContinueBooking
    }]
  }, [_c('span', {
    staticClass: "button__inner"
  }, [_c('span', {
    staticClass: "button__text"
  }, [_vm._v("Continue Booking")]), _vm._v(" "), _c('svg', {
    staticClass: "button__arrow"
  }, [_c('use', {
    attrs: {
      "xlink:href": "/images/svg/sprite.svg#button-arrow",
      "xmlns:xlink": "http://www.w3.org/1999/xlink"
    }
  })])])])])])], 1)])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column"
  }, [_c('h1', {
    staticClass: "image-title image-title--party-selector"
  }, [_c('span', {
    staticClass: "image-title__image--magical-extras"
  }, [_vm._v("\n                   Magical Extras\n            ")])])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-87800bda", module.exports)
  }
}

/***/ }),
/* 671 */,
/* 672 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return (_vm.error.exists()) ? _c('div', {
    staticClass: "alert alert-danger",
    attrs: {
      "role": "alert"
    }
  }, [_c('strong', [_vm._v(_vm._s(_vm.error.errorCode))]), _vm._v(" " + _vm._s(_vm.error.errorMessage) + " "), _c('br'), _vm._v(" " + _vm._s(_vm.error.validationErrors) + "\n")]) : _vm._e()
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-8e5d749e", module.exports)
  }
}

/***/ }),
/* 673 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row"
  }, [_vm._m(0), _vm._v(" "), _vm._m(1), _vm._v(" "), (_vm.guest) ? _c('child-form', {
    attrs: {
      "child": _vm.guest,
      "can-edit": _vm.canEdit
    }
  }) : _vm._e()], 1)
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column text-center"
  }, [_c('h1', {
    staticClass: "image-title image-title--adult-details"
  }, [_c('span', {
    staticClass: "image-title__image--adult-details"
  }, [_vm._v("\n                    Adults Details\n                ")])])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column text-center"
  }, [_c('p', {
    staticClass: "paragraph-sans"
  }, [_vm._v("\n            Please help Father Christmas deliver a personalised meeting by providing the details below.\n        ")])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-9cee090c", module.exports)
  }
}

/***/ }),
/* 674 */,
/* 675 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row nopadding child-form__form-wrapper"
  }, [_c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container"
  }, [_c('label', {
    staticClass: "text-right",
    attrs: {
      "for": "firstName"
    }
  }, [_vm._v("FIRST NAME:")]), _vm._v(" "), (_vm.canEdit) ? [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.child.firstName),
      expression: "child.firstName"
    }],
    attrs: {
      "type": "text",
      "id": "firstName",
      "name": "firstName",
      "placeholder": "First name"
    },
    domProps: {
      "value": (_vm.child.firstName)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.child.firstName = $event.target.value
      }
    }
  })] : [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.child.firstName),
      expression: "child.firstName"
    }],
    attrs: {
      "type": "text",
      "id": "firstName",
      "name": "firstName",
      "placeholder": "First name",
      "disabled": "disabled"
    },
    domProps: {
      "value": (_vm.child.firstName)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.child.firstName = $event.target.value
      }
    }
  })], _vm._v(" "), ((_vm.nameErrors['firstName']) && _vm.canEdit) ? _c('div', {
    staticClass: "input-container__error"
  }, [_vm._v(" " + _vm._s(_vm.nameErrors['firstName']) + "\n            ")]) : _vm._e()], 2)]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container"
  }, [_c('label', {
    staticClass: "text-right",
    attrs: {
      "for": "lastName"
    }
  }, [_vm._v("SURNAME:")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.child.lastName),
      expression: "child.lastName"
    }],
    attrs: {
      "type": "text",
      "id": "lastName",
      "name": "lastName",
      "placeholder": "Last name"
    },
    domProps: {
      "value": (_vm.child.lastName)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.child.lastName = $event.target.value
      }
    }
  }), _vm._v(" "), ((_vm.nameErrors['lastName']) && _vm.canEdit) ? _c('div', {
    staticClass: "input-container__error"
  }, [_vm._v(" " + _vm._s(_vm.nameErrors['lastName']) + "\n            ")]) : _vm._e()])]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container -next-help-text"
  }, [_c('label', {
    staticClass: "text-right",
    attrs: {
      "for": "firstName_confirm"
    }
  }, [_vm._v("RE-ENTER FIRST NAME:")]), _vm._v(" "), (_vm.canEdit) ? [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.child.firstName),
      expression: "child.firstName"
    }],
    attrs: {
      "type": "text",
      "id": "firstName_confirm",
      "name": "firstName_confirm",
      "placeholder": "First name"
    },
    domProps: {
      "value": (_vm.child.firstName)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.child.firstName = $event.target.value
      }
    }
  })] : [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.child.firstName),
      expression: "child.firstName"
    }],
    attrs: {
      "type": "text",
      "id": "firstName_confirm",
      "name": "firstName_confirm",
      "placeholder": "First name",
      "disabled": "disabled"
    },
    domProps: {
      "value": (_vm.child.firstName)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.child.firstName = $event.target.value
      }
    }
  })], _vm._v(" "), ((typeof _vm.errors['child.firstName'] !== 'undefined') && _vm.canEdit) ? _c('div', {
    staticClass: "input-container__error"
  }, [_vm._v(" " + _vm._s(_vm.errors['child.firstName']) + "\n            ")]) : _vm._e()], 2)]), _vm._v(" "), _vm._m(0), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    class: ['input-container -next-help-text', {
      'input-container--danger': _vm.hasError('child.answers.pronunciation')
    }]
  }, [_c('label', {
    attrs: {
      "for": "namePronunciation"
    }
  }, [_vm._v("How do you pronounce your child's name?")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.child.answers.pronunciation),
      expression: "child.answers.pronunciation"
    }],
    attrs: {
      "type": "text",
      "id": "namePronunciation",
      "name": "namePronunciation",
      "placeholder": "Pronunciation"
    },
    domProps: {
      "value": (_vm.child.answers.pronunciation)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.child.answers.pronunciation = $event.target.value
      }
    }
  }), _vm._v(" "), (_vm.hasError('child.answers.pronunciation')) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v(_vm._s(_vm.getError('child.answers.pronunciation')))]) : _vm._e()])]), _vm._v(" "), _vm._m(1), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container -next-help-text"
  }, [_c('label', {
    staticClass: "text-right"
  }, [_vm._v("Gender:")]), _vm._v(" "), _c('multiselect', {
    attrs: {
      "options": _vm.genders,
      "id": 'child-gender',
      "searchable": false,
      "custom-label": _vm.formatSelect,
      "allow-empty": true,
      "show-labels": false
    },
    model: {
      value: (_vm.gender),
      callback: function($$v) {
        _vm.gender = $$v
      },
      expression: "gender"
    }
  })], 1)]), _vm._v(" "), _vm._m(2), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container"
  }, [_c('label', {
    staticClass: "text-right",
    attrs: {
      "for": "relationship"
    }
  }, [_vm._v("Relationship:")]), _vm._v(" "), _c('multiselect', {
    attrs: {
      "id": "relationship",
      "name": "relationship",
      "label": "name",
      "track-by": "value",
      "options": _vm.relationships,
      "searchable": false,
      "allow-empty": false,
      "showLabels": false
    },
    model: {
      value: (_vm.relationship),
      callback: function($$v) {
        _vm.relationship = $$v
      },
      expression: "relationship"
    }
  })], 1)]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container"
  }, [_c('label', {
    staticClass: "text-right",
    attrs: {
      "for": "dateOfBirth"
    }
  }, [_vm._v("Date of birth:")]), _vm._v(" "), _c('datepicker', {
    attrs: {
      "input-class": "form-control",
      "id": "dateOfBirth",
      "name": "dateOfBirth",
      "placeholder": "Date of birth",
      "format": "dd/MM/yyyy"
    },
    model: {
      value: (_vm.child.dob),
      callback: function($$v) {
        _vm.child.dob = $$v
      },
      expression: "child.dob"
    }
  })], 1)]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    class: ['input-container -next-help-text', {
      'input-container--danger': _vm.hasError('child.answers.favoritePersonThing')
    }]
  }, [_c('label', {
    staticClass: "text-right",
    attrs: {
      "for": "favoriteThing"
    }
  }, [_vm._v("Favorite person or pet or thing:")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.child.answers.favoritePersonThing),
      expression: "child.answers.favoritePersonThing"
    }],
    attrs: {
      "type": "text",
      "id": "favoriteThing",
      "name": "favoriteThing",
      "placeholder": "Favourite thing"
    },
    domProps: {
      "value": (_vm.child.answers.favoritePersonThing)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.child.answers.favoritePersonThing = $event.target.value
      }
    }
  }), _vm._v(" "), (_vm.hasError('child.answers.favoritePersonThing')) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v(_vm._s(_vm.getError('child.answers.favoritePersonThing')))]) : _vm._e()])]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    class: ['input-container -next-help-text', {
      'input-container--danger': _vm.hasError('child.answers.whatIsFavoritePersonThing')
    }]
  }, [_c('label', {
    staticClass: "text-right",
    attrs: {
      "for": "favoriteThingRelationship"
    }
  }, [_vm._v("Relationship of favorite person or pet or thing:")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.child.answers.whatIsFavoritePersonThing),
      expression: "child.answers.whatIsFavoritePersonThing"
    }],
    attrs: {
      "type": "text",
      "id": "favoriteThingRelationship",
      "name": "favoriteThingRelationship",
      "placeholder": "Relationship of favourite thing"
    },
    domProps: {
      "value": (_vm.child.answers.whatIsFavoritePersonThing)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.child.answers.whatIsFavoritePersonThing = $event.target.value
      }
    }
  }), _vm._v(" "), (_vm.hasError('child.answers.whatIsFavoritePersonThing')) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v(_vm._s(_vm.getError('child.answers.whatIsFavoritePersonThing')))]) : _vm._e()])]), _vm._v(" "), _vm._m(3), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    class: ['input-container -next-help-text', {
      'input-container--danger': _vm.hasError('child.answers.favoriteActivityPassTime')
    }]
  }, [_c('label', {
    staticClass: "text-right",
    attrs: {
      "for": "favoriteActivity"
    }
  }, [_vm._v("Favorite activity or pastime:")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.child.answers.favoriteActivityPassTime),
      expression: "child.answers.favoriteActivityPassTime"
    }],
    attrs: {
      "type": "text",
      "id": "favoriteActivity",
      "name": "favoriteActivity",
      "placeholder": "Favourite activity"
    },
    domProps: {
      "value": (_vm.child.answers.favoriteActivityPassTime)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.child.answers.favoriteActivityPassTime = $event.target.value
      }
    }
  }), _vm._v(" "), (_vm.hasError('child.answers.favoriteActivityPassTime')) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v(_vm._s(_vm.getError('child.answers.favoriteActivityPassTime')))]) : _vm._e()])]), _vm._v(" "), _vm._m(4), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    class: ['input-container -next-help-text', {
      'input-container--danger': _vm.hasError('child.answers.memorableEvent')
    }]
  }, [_c('label', {
    staticClass: "text-right",
    attrs: {
      "for": "memorableEvent"
    }
  }, [_vm._v("Memorable event:")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.child.answers.memorableEvent),
      expression: "child.answers.memorableEvent"
    }],
    attrs: {
      "type": "text",
      "id": "memorableEvent",
      "name": "memorableEvent",
      "placeholder": "Memorable event"
    },
    domProps: {
      "value": (_vm.child.answers.memorableEvent)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.child.answers.memorableEvent = $event.target.value
      }
    }
  }), _vm._v(" "), (_vm.hasError('child.answers.memorableEvent')) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v(_vm._s(_vm.getError('child.answers.memorableEvent')))]) : _vm._e()])]), _vm._v(" "), _vm._m(5), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container"
  }, [_c('label', {
    staticClass: "text-right input-container__attended-before-label",
    attrs: {
      "for": "attendedBefore"
    }
  }, [_vm._v("Please let us know if this child has attended the event before:")]), _vm._v(" "), _c('span', {
    staticClass: "input-container__help-text"
  }, [_vm._v("\n            Please let us know if your child has attended the event before. This will allow Father Christmas to deliver a more personalised visit.\n            "), _c('div', [_vm._l((_vm.reversedYears), function(year) {
    return (year > 2013) ? _c('div', {
      staticClass: "input-container__attendance-year inline-block"
    }, [_c('label', {
      staticClass: "input-container__text text-right -terms",
      attrs: {
        "for": year
      }
    }, [_c('input', {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: (_vm.child.answers.yearsOfAttendance),
        expression: "child.answers.yearsOfAttendance"
      }],
      attrs: {
        "type": "checkbox",
        "id": year
      },
      domProps: {
        "value": year,
        "checked": Array.isArray(_vm.child.answers.yearsOfAttendance) ? _vm._i(_vm.child.answers.yearsOfAttendance, year) > -1 : (_vm.child.answers.yearsOfAttendance)
      },
      on: {
        "__c": function($event) {
          var $$a = _vm.child.answers.yearsOfAttendance,
            $$el = $event.target,
            $$c = $$el.checked ? (true) : (false);
          if (Array.isArray($$a)) {
            var $$v = year,
              $$i = _vm._i($$a, $$v);
            if ($$c) {
              $$i < 0 && (_vm.child.answers.yearsOfAttendance = $$a.concat($$v))
            } else {
              $$i > -1 && (_vm.child.answers.yearsOfAttendance = $$a.slice(0, $$i).concat($$a.slice($$i + 1)))
            }
          } else {
            _vm.child.answers.yearsOfAttendance = $$c
          }
        }
      }
    }), _vm._v("\n                        " + _vm._s(year) + "\n                    ")])]) : _vm._e()
  }), _vm._v(" "), (_vm.showMore) ? _vm._l((_vm.reversedYears), function(year) {
    return (year < 2014) ? _c('div', {
      staticClass: "input-container__attendance-year inline-block"
    }, [_c('label', {
      staticClass: "input-container__text text-right -terms",
      attrs: {
        "for": year
      }
    }, [_c('input', {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: (_vm.child.answers.yearsOfAttendance),
        expression: "child.answers.yearsOfAttendance"
      }],
      attrs: {
        "type": "checkbox",
        "id": year
      },
      domProps: {
        "value": year,
        "checked": Array.isArray(_vm.child.answers.yearsOfAttendance) ? _vm._i(_vm.child.answers.yearsOfAttendance, year) > -1 : (_vm.child.answers.yearsOfAttendance)
      },
      on: {
        "__c": function($event) {
          var $$a = _vm.child.answers.yearsOfAttendance,
            $$el = $event.target,
            $$c = $$el.checked ? (true) : (false);
          if (Array.isArray($$a)) {
            var $$v = year,
              $$i = _vm._i($$a, $$v);
            if ($$c) {
              $$i < 0 && (_vm.child.answers.yearsOfAttendance = $$a.concat($$v))
            } else {
              $$i > -1 && (_vm.child.answers.yearsOfAttendance = $$a.slice(0, $$i).concat($$a.slice($$i + 1)))
            }
          } else {
            _vm.child.answers.yearsOfAttendance = $$c
          }
        }
      }
    }), _vm._v("\n                            " + _vm._s(year) + "\n                        ")])]) : _vm._e()
  }) : _vm._e()], 2), _vm._v(" "), _c('div', {
    staticClass: "input-container__show-more-years text-center"
  }, [(!_vm.showMore) ? _c('div', {
    staticClass: "inline-block",
    on: {
      "click": _vm.showMoreYears
    }
  }, [_vm._v("\n                    Show more...\n                ")]) : _vm._e()])])])]), _vm._v(" "), _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container"
  }, [_c('label', [_vm._v("\n                 \n            ")]), _vm._v(" "), _c('span', {
    staticClass: "input-container__help-text -no-italic"
  }, [_c('a', {
    class: ['button margin-bottom-medium rotate-ccw-small'],
    on: {
      "click": _vm.update
    }
  }, [_c('span', {
    staticClass: "button__inner"
  }, [_c('span', {
    staticClass: "button__text"
  }, [_vm._v("Update")]), _vm._v(" "), _c('svg', {
    staticClass: "button__arrow"
  }, [_c('use', {
    attrs: {
      "xlink:href": "/images/svg/sprite.svg#button-arrow",
      "xmlns:xlink": "http://www.w3.org/1999/xlink"
    }
  })])])])])])])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container"
  }, [_c('label', [_vm._v("\n                 \n            ")]), _vm._v(" "), _c('span', {
    staticClass: "input-container__help-text"
  }, [_vm._v("\n            Please note, the spelling you provide will be printed on your child’s invitation from Father Christmas.\n        ")])])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container"
  }, [_c('label', [_vm._v("\n                 \n            ")]), _vm._v(" "), _c('span', {
    staticClass: "input-container__help-text"
  }, [_vm._v("\n                Please write the phonetic pronunciation to help Father Christmas e.g. Joseph = jo - sef.\n            ")])])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container"
  }, [_c('label', [_vm._v("\n                 \n            ")]), _vm._v(" "), _c('span', {
    staticClass: "input-container__help-text"
  }, [_vm._v("\n            Please provider the child's gender.\n        ")])])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container"
  }, [_c('label', [_vm._v("\n                 \n            ")]), _vm._v(" "), _c('span', {
    staticClass: "input-container__help-text"
  }, [_vm._v("\n                Father Christmas will need to know who/what the favourite thing is e.g granny/toy doll\n            ")])])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container"
  }, [_c('label', [_vm._v("\n                 \n            ")]), _vm._v(" "), _c('span', {
    staticClass: "input-container__help-text"
  }, [_vm._v("\n            e.g. Ballet/Cubs.\n        ")])])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column nopadding"
  }, [_c('div', {
    staticClass: "input-container"
  }, [_c('label', [_vm._v("\n                 \n            ")]), _vm._v(" "), _c('span', {
    staticClass: "input-container__help-text"
  }, [_vm._v("\n            Please provide details of a memorable event that has happened to your child in the two weeks prior to visiting Lapland"), _c('sup', [_vm._v("UK")]), _vm._v(". e.g. Scored a goal in football/swam 10m.\n        ")])])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-a7b1707a", module.exports)
  }
}

/***/ }),
/* 676 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row ticket-payment__wrapper"
  }, [_c('div', {
    staticClass: "column"
  }, [_c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "small-12 medium-12 large-9 column nopaddingleft"
  }, [(this.paymentErrors) ? [_c('payment-errors')] : _vm._e(), _vm._v(" "), _c('reservation-alert', {
    attrs: {
      "duration": 300
    },
    on: {
      "expired": _vm.restartAvailabilitySearch
    }
  }), _vm._v(" "), (_vm.myDetails.exists()) ? _c('booking-details', {
    attrs: {
      "show-children": _vm.additionalTickets.children > 0,
      "existing-customer-details": _vm.myDetails,
      "number-of-adults": _vm.additionalTickets.adults + _vm.additionalTickets.seniors,
      "number-of-children": _vm.additionalTickets.children,
      "successUrl": _vm.successUrl,
      "failureUrl": _vm.failureUrl
    },
    on: {
      "pay": _vm.makePayment
    }
  }) : _vm._e()], 2), _vm._v(" "), _c('div', {
    staticClass: "small-12 medium-12 large-3 column nopaddingright extra-selector__booking-summary"
  }, [_c('booking-summary', {
    attrs: {
      "day": _vm.day,
      "time": _vm.time,
      "booking": _vm.additionalTickets,
      "extras": _vm.additionalExtras,
      "prices": _vm.prices
    }
  })], 1)])])])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-a87edb52", module.exports)
  }
}

/***/ }),
/* 677 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "panel panel-default"
  }, [_vm._m(0), _vm._v(" "), _c('table', {
    staticClass: "table"
  }, [_vm._m(1), _vm._v(" "), _c('tbody', [_c('tr', [_c('td', [_vm._v(_vm._s(_vm.adults))]), _vm._v(" "), _c('td', [_vm._v(_vm._s(_vm.seniors))]), _vm._v(" "), _c('td', [_vm._v(_vm._s(_vm.children))]), _vm._v(" "), _c('td', [_vm._v(_vm._s(_vm.babies))]), _vm._v(" "), _c('td', [_vm._v(_vm._s(_vm.carers))]), _vm._v(" "), _c('td', [_vm._v(_vm._s(_vm.wheelchairs))]), _vm._v(" "), _c('td', [_vm._v("£" + _vm._s(_vm.total))])])])]), _vm._v(" "), _c('div', {
    staticClass: "panel-footer text-center"
  }, [_c('router-link', {
    staticClass: "btn btn-default",
    attrs: {
      "to": {
        name: 'my-party.create'
      }
    }
  }, [_vm._v("Add people to your party")]), _vm._v(" "), _c('router-link', {
    staticClass: "btn btn-default",
    attrs: {
      "to": {
        name: 'availability.day'
      }
    }
  }, [_vm._v("Change the date of visit")])], 1)])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "panel-heading"
  }, [_c('h2', {
    staticClass: "panel-title"
  }, [_vm._v("Your Party")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('thead', [_c('tr', [_c('th', [_vm._v("Adults")]), _vm._v(" "), _c('th', [_vm._v("Seniors")]), _vm._v(" "), _c('th', [_vm._v("Children")]), _vm._v(" "), _c('th', [_vm._v("Babies")]), _vm._v(" "), _c('th', [_vm._v("Carers")]), _vm._v(" "), _c('th', [_vm._v("Wheelchairs")]), _vm._v(" "), _c('th', [_vm._v("Total")])])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-c7bb5126", module.exports)
  }
}

/***/ }),
/* 678 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return (_vm.mustStopSelling) ? _c('div', {
    staticClass: "alert alert-danger",
    attrs: {
      "role": "alert"
    }
  }, [_c('span', {
    staticClass: "icon icon--danger"
  }), _vm._v(" You can not modify your booking after " + _vm._s(_vm.stopSellingDeadline) + " the day before your tour.\n")]) : _vm._e()
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-c7c6d4ca", module.exports)
  }
}

/***/ }),
/* 679 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c("div")
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-c8c32ad8", module.exports)
  }
}

/***/ }),
/* 680 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "column"
  }, [_c('div', {
    staticClass: "row"
  }, [_vm._m(0), _vm._v(" "), _c('div', {
    staticClass: "small-12 medium-12 large-9 column nopaddingleft"
  }, [(_vm.days.length > 0) ? _c('day-selector', {
    attrs: {
      "booking": _vm.party,
      "options": _vm.days,
      "weekday-adjustment": 1,
      "value": _vm.selectedDay,
      "display-back-to-party": false
    },
    on: {
      "change": _vm.updateDay,
      "continueBooking": _vm.continueBooking
    }
  }) : _vm._e()], 1), _vm._v(" "), _c('div', {
    staticClass: "small-12 medium-12 large-3 column nopaddingright show-for-large"
  }, [_c('booking-summary', {
    attrs: {
      "booking": _vm.party,
      "prices": _vm.selectedSlot,
      "show-info-box": true,
      "is-premium-booking": this.booking.premiumSlot ? this.booking.premiumSlot : false
    }
  }, [_c('div', {
    on: {
      "click": function($event) {
        _vm.canContinueBooking ? _vm.continueBooking() : null
      }
    }
  }, [_c('a', {
    class: ['button margin-bottom-medium rotate-ccw-small', {
      'booking-summary__continue--disabled': !_vm.canContinueBooking
    }]
  }, [_c('span', {
    staticClass: "button__inner"
  }, [_c('span', {
    staticClass: "button__text"
  }, [_vm._v("Continue Booking")]), _vm._v(" "), _c('svg', {
    staticClass: "button__arrow"
  }, [_c('use', {
    attrs: {
      "xlink:href": "/images/svg/sprite.svg#button-arrow",
      "xmlns:xlink": "http://www.w3.org/1999/xlink"
    }
  })])])])])])], 1)])])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column availability-search-day__title"
  }, [_c('h1', {
    staticClass: "image-title image-title--party-selector"
  }, [_c('span', {
    staticClass: "image-title__image--change-your-date"
  }, [_vm._v("\n                       Change Your Date\n                    ")])])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-c90a4c9e", module.exports)
  }
}

/***/ }),
/* 681 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row nopadding"
  }, [_c('div', {
    staticClass: "column nopadding"
  }, [(!_vm.adultsOnly) ? [_vm._m(0), _vm._v(" "), _vm._m(1), _vm._v(" "), _vm._m(2), _vm._v(" "), _vm._m(3), _vm._v(" "), _vm._m(4), _vm._v(" "), _vm._m(5), _vm._v(" "), _c('gateway-error'), _vm._v(" "), _c('children', {
    attrs: {
      "children": _vm.children
    }
  })] : _vm._e(), _vm._v(" "), _vm._m(6), _vm._v(" "), (!_vm.adultsOnly) ? _c('adults', {
    attrs: {
      "adults": _vm.adults,
      "seniors": _vm.seniors,
      "carers": _vm.carers
    }
  }) : _c('children', {
    attrs: {
      "children": _vm.adults
    }
  })], 2)])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "small-12 column text-center"
  }, [_c('h1', {
    staticClass: "image-title image-title--childs-details"
  }, [_c('span', {
    staticClass: "image-title__image--childs-details"
  }, [_vm._v("\n                        Childs Details\n                    ")])])])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column text-center"
  }, [_c('p', [_vm._v("\n                    Please enter the required information for your child's personalised Father Christmas visit.\n                ")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column text-center"
  }, [_c('h3', [_vm._v("\n                    We recommend completing this once you have received your invitations later in the year.\n                ")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column text-center"
  }, [_c('div', {
    staticClass: "my-party__small-policy"
  }, [_vm._v("\n                    All information is kept in the strictest of confidence in line with our "), _c('a', {
    staticClass: "link",
    attrs: {
      "href": "#"
    }
  }, [_vm._v("Privacy Policy")]), _vm._v(".\n                ")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column text-center my-party__child-details-break"
  }, [_c('h3', [_vm._v("\n                    Please click the Edit button to submit magical details for each child.\n                ")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column text-center"
  }, [_c('div', {
    staticClass: "my-party__italic-warning"
  }, [_vm._v("\n                    We understand that this information can change so feel free to update child details up until the day before your visit.\n                ")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "small-12 column text-center"
  }, [_c('h1', {
    staticClass: "image-title image-title--childs-details"
  }, [_c('span', {
    staticClass: "image-title__image--adult-details"
  }, [_vm._v("\n                    Adult Details\n                ")])])])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-cf5167dc", module.exports)
  }
}

/***/ }),
/* 682 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('div', [_c('h2', {
    staticClass: "heading-2__child-name"
  }, [_vm._v(_vm._s(_vm.child.firstName))])]), _vm._v(" "), _c('div', {
    staticClass: "child-summary__edit-details"
  }, [_c('a', {
    class: ['button margin-bottom-medium rotate-ccw-small'],
    on: {
      "click": _vm.edit
    }
  }, [_c('span', {
    staticClass: "button__inner"
  }, [_c('span', {
    staticClass: "button__text"
  }, [_vm._v("Edit Details")]), _vm._v(" "), _c('svg', {
    staticClass: "button__arrow"
  }, [_c('use', {
    attrs: {
      "xlink:href": "/images/svg/sprite.svg#button-arrow",
      "xmlns:xlink": "http://www.w3.org/1999/xlink"
    }
  })])])])])])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-d379c112", module.exports)
  }
}

/***/ }),
/* 683 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('form', {
    staticClass: "row",
    on: {
      "submit": function($event) {
        $event.preventDefault();
      }
    }
  }, [_vm._m(0), _vm._v(" "), _vm._m(1), _vm._v(" "), _c('div', {
    staticClass: "small-12 column child-form__form-wrapper"
  }, [_c('div', {
    class: ['input-container margin-bottom-small', {
      'input-container--danger': _vm.hasError('myDetails.firstName')
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "firstName"
    }
  }, [_vm._v("First name")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.myDetails.firstName),
      expression: "myDetails.firstName"
    }],
    staticClass: "form-control",
    attrs: {
      "type": "text",
      "id": "firstName"
    },
    domProps: {
      "value": (_vm.myDetails.firstName)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.myDetails.firstName = $event.target.value
      }
    }
  }), _vm._v(" "), (_vm.hasError('myDetails.firstName')) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v("\n                " + _vm._s(_vm.getError('myDetails.firstName')) + "\n            ")]) : _vm._e()]), _vm._v(" "), _c('div', {
    class: ['input-container margin-bottom-small', {
      'input-container--danger': _vm.hasError('myDetails.lastName')
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "lastName"
    }
  }, [_vm._v("Last name")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.myDetails.lastName),
      expression: "myDetails.lastName"
    }],
    staticClass: "form-control",
    attrs: {
      "type": "text",
      "id": "lastName"
    },
    domProps: {
      "value": (_vm.myDetails.lastName)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.myDetails.lastName = $event.target.value
      }
    }
  }), _vm._v(" "), (_vm.hasError('myDetails.lastName')) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v("\n                " + _vm._s(_vm.getError('myDetails.lastName')) + "\n            ")]) : _vm._e()]), _vm._v(" "), _c('div', {
    class: ['input-container margin-bottom-small', {
      'input-container--danger': _vm.hasError('myDetails.telephone')
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "telephone"
    }
  }, [_vm._v("Telephone")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.myDetails.telephone),
      expression: "myDetails.telephone"
    }],
    staticClass: "form-control",
    attrs: {
      "type": "tel",
      "id": "telephone"
    },
    domProps: {
      "value": (_vm.myDetails.telephone)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.myDetails.telephone = $event.target.value
      }
    }
  }), _vm._v(" "), (_vm.hasError('myDetails.telephone')) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v("\n                " + _vm._s(_vm.getError('myDetails.telephone')) + "\n            ")]) : _vm._e()]), _vm._v(" "), _c('div', {
    class: ['input-container margin-bottom-small', {
      'input-container--danger': _vm.hasError('myDetails.emailAddress')
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "emailAddress"
    }
  }, [_vm._v("Email address")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.myDetails.emailAddress),
      expression: "myDetails.emailAddress"
    }],
    staticClass: "form-control",
    attrs: {
      "type": "email",
      "id": "emailAddress"
    },
    domProps: {
      "value": (_vm.myDetails.emailAddress)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.myDetails.emailAddress = $event.target.value
      }
    }
  }), _vm._v(" "), (_vm.hasError('myDetails.emailAddress')) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v("\n                " + _vm._s(_vm.getError('myDetails.emailAddress')) + "\n            ")]) : _vm._e()]), _vm._v(" "), _c('div', {
    class: ['input-container margin-bottom-small', {
      'input-container--danger': _vm.hasError('myDetails.address1')
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "myDetailsAddress1"
    }
  }, [_vm._v("Address line 1")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.myDetails.address1),
      expression: "myDetails.address1"
    }],
    staticClass: "form-control",
    attrs: {
      "type": "text",
      "id": "myDetailsAddress1"
    },
    domProps: {
      "value": (_vm.myDetails.address1)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.myDetails.address1 = $event.target.value
      }
    }
  }), _vm._v(" "), (_vm.hasError('myDetails.address1')) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v("\n                " + _vm._s(_vm.getError('myDetails.address1')) + "\n            ")]) : _vm._e()]), _vm._v(" "), _c('div', {
    class: ['input-container margin-bottom-small', {
      'input-container--danger': _vm.hasError('myDetails.address2')
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "myDetailsAddress2"
    }
  }, [_vm._v("Address line 2")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.myDetails.address2),
      expression: "myDetails.address2"
    }],
    staticClass: "form-control",
    attrs: {
      "type": "text",
      "id": "myDetailsAddress2"
    },
    domProps: {
      "value": (_vm.myDetails.address2)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.myDetails.address2 = $event.target.value
      }
    }
  }), _vm._v(" "), (_vm.hasError('myDetails.address2')) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v("\n                " + _vm._s(_vm.getError('myDetails.address2')) + "\n            ")]) : _vm._e()]), _vm._v(" "), _c('div', {
    class: ['input-container margin-bottom-small', {
      'input-container--danger': _vm.hasError('myDetails.city')
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "myDetailsCity"
    }
  }, [_vm._v("City")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.myDetails.city),
      expression: "myDetails.city"
    }],
    staticClass: "form-control",
    attrs: {
      "type": "text",
      "id": "myDetailsCity"
    },
    domProps: {
      "value": (_vm.myDetails.city)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.myDetails.city = $event.target.value
      }
    }
  }), _vm._v(" "), (_vm.hasError('myDetails.city')) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v("\n                " + _vm._s(_vm.getError('myDetails.city')) + "\n            ")]) : _vm._e()]), _vm._v(" "), _c('div', {
    class: ['input-container margin-bottom-small', {
      'input-container--danger': _vm.hasError('myDetails.postCode')
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "myDetailsPostCode"
    }
  }, [_vm._v("Postcode")]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.myDetails.postCode),
      expression: "myDetails.postCode"
    }],
    staticClass: "form-control",
    attrs: {
      "type": "text",
      "id": "myDetailsPostCode"
    },
    domProps: {
      "value": (_vm.myDetails.postCode)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.myDetails.postCode = $event.target.value
      }
    }
  }), _vm._v(" "), (_vm.hasError('myDetails.postCode')) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v("\n                " + _vm._s(_vm.getError('myDetails.postCode')) + "\n            ")]) : _vm._e()]), _vm._v(" "), _c('div', {
    class: ['input-container margin-bottom-small', {
      'input-container--danger': _vm.hasError('myDetails.country')
    }]
  }, [_c('label', {
    staticClass: "input-container__text text-right",
    attrs: {
      "for": "myDetailsCountry"
    }
  }, [_vm._v("Country")]), _vm._v(" "), _c('multiselect', {
    staticStyle: {
      "padding": "0 0.75rem!important"
    },
    attrs: {
      "id": "myDetailsCountry",
      "track-by": "code",
      "label": "name",
      "options": _vm.countries,
      "searchable": true,
      "allow-empty": false,
      "show-labels": false
    },
    model: {
      value: (_vm.myDetails.country),
      callback: function($$v) {
        _vm.myDetails.country = $$v
      },
      expression: "myDetails.country"
    }
  }), _vm._v(" "), (_vm.hasError('myDetails.country')) ? _c('span', {
    staticClass: "input-container__error"
  }, [_vm._v("\n                " + _vm._s(_vm.getError('myDetails.country')) + "\n            ")]) : _vm._e()], 1), _vm._v(" "), _c('div', {
    staticClass: "input-container"
  }, [_c('label', [_vm._v(" ")]), _vm._v(" "), _c('span', {
    staticClass: "input-container__help-text -no-italic"
  }, [_c('button', {
    class: ['button margin-bottom-medium rotate-ccw-small'],
    staticStyle: {
      "width": "100%"
    },
    on: {
      "click": function($event) {
        $event.preventDefault();
        _vm.update($event)
      }
    }
  }, [_c('span', {
    staticClass: "button__inner"
  }, [_c('span', {
    staticClass: "button__text"
  }, [_vm._v("Update details")]), _vm._v(" "), _c('svg', {
    staticClass: "button__arrow"
  }, [_c('use', {
    attrs: {
      "xlink:href": "/images/svg/sprite.svg#button-arrow",
      "xmlns:xlink": "http://www.w3.org/1999/xlink"
    }
  })])])])])])])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column text-center"
  }, [_c('h2', {
    staticClass: "heading-2--small-doves"
  }, [_vm._v("Customer details")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "small-12 column text-center"
  }, [_c('p', [_vm._v("\n            Please provide us with your contact details so that we can post your Lapland"), _c('sup', [_vm._v("UK")]), _vm._v(" pack including children's\n            invitations from Father Christmas.\n        ")])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-e47f4640", module.exports)
  }
}

/***/ }),
/* 684 */,
/* 685 */,
/* 686 */,
/* 687 */,
/* 688 */,
/* 689 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(352);


/***/ })
],[689]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,